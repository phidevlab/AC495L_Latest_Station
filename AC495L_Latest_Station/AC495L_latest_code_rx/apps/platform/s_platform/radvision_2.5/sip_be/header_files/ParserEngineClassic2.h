#if !defined(RV_SIP_IMS_DCS_HEADER_SUPPORT) && !defined(RV_SIP_IMS_HEADER_SUPPORT) && !defined(RV_SIP_EXTENDED_HEADER_SUPPORT) && !defined(RV_SIP_JSR32_SUPPORT) && !defined(RV_SIP_LIGHT) && !defined(RV_SIP_TEL_URI_SUPPORT) && !defined(RV_SIP_PRIMITIVES) && !defined(RV_SIP_AUTH_ON) && defined(RV_SIP_SUBS_ON)
/*
 AnaGram Parsing Engine
 Copyright (c) 1993-1999, Parsifal Software.
 All Rights Reserved.
 Serial number 2P20671
 Registered to:
   Meir Fuchs
   RADVision Ltd.
*/
#ifndef PARSERENGINECLASSIC_H_1165245778
#include ".\ParserEngineClassic.h"
#endif
#ifndef PARSERENGINECLASSIC_H_1165245778
#error Mismatched header file
#endif
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define RULE_CONTEXT (&((PCB).cs[(PCB).ssx]))
#define ERROR_CONTEXT ((PCB).cs[(PCB).error_frame_ssx])
#define CONTEXT ((PCB).cs[(PCB).ssx])
#ifndef PCB_TYPE
#define PCB_TYPE SipParser_pcb_type
#endif
#define PCB (*pcb_pointer)
#define PCB_DECL PCB_TYPE *pcb_pointer
#define PCB_POINTER pcb_pointer
#define CHANGE_REDUCTION(x) SipParser_change_reduction(PCB_POINTER, SipParser_##x##_token)
int SipParser_change_reduction(PCB_DECL, SipParser_token_type);
#ifndef CONVERT_CASE
static const char agCaseTable[31] = {
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,    0,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
};
static int agConvertCase(int c) {
  if (c >= 'a' && c <= 'z') return c ^= 0x20;
  if (c >= 0xe0 && c < 0xff) c ^= agCaseTable[c-0xe0];
  return c;
}
#define CONVERT_CASE(c) agConvertCase(c)
#endif
#ifndef TAB_SPACING
#define TAB_SPACING 8
#endif
#define ag_rp_1(PCB_POINTER) (SET_HEADER_VALUE())
#define ag_rp_2(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_3(PCB_POINTER) (SIP_BEGIN_TOKEN())
static void ag_rp_4(PCB_DECL) {
/* Line 300, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        REMOVE_COMMA_BETWEEN_HEADERS();
    
}
#define ag_rp_5(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_6(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_7(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_8(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_9(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_10(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_11(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_12(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_13(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_14(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_15(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_16(PCB_POINTER) (CUR_STRING())
#define ag_rp_17(PCB_POINTER) (CUR_STRING())
#define ag_rp_18(PCB_POINTER) (CUR_STRING())
#define ag_rp_19(PCB_POINTER) (CUR_STRING())
#define ag_rp_20(PCB_POINTER) (CUR_STRING())
#define ag_rp_21(PCB_POINTER) (CUR_STRING())
#define ag_rp_22(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_INVITE))
#define ag_rp_23(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_ACK))
#define ag_rp_24(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_BYE))
#define ag_rp_25(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_CANCEL))
#define ag_rp_26(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_REGISTER))
#define ag_rp_27(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_REFER))
#define ag_rp_28(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_NOTIFY))
#define ag_rp_29(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_SUBSCRIBE))
#define ag_rp_30(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_PRACK))
static ParserMethod ag_rp_31(PCB_DECL, ParserBasicToken t) {
/* Line 490, RV SIP Stack */
 ParserMethod method;
                            method.type = PARSER_METHOD_TYPE_OTHER;
                            method.other = t;
                            RV_UNUSED_ARG(pcb_pointer);
                            return method;
                          
}
static void ag_rp_32(PCB_DECL, ParserCSeq cseq) {
/* Line 506, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitCSeq(PCB.pParserMgr, PCB.pointer,&cseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
static ParserCSeq ag_rp_33(PCB_DECL, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 527, RV SIP Stack */
        ParserCSeq cseq;
        cseq.method = method;
		cseq.sequenceNumber = sequenceNumber;
        RV_UNUSED_ARG(pcb_pointer);
        return(cseq);
	 
}
#define ag_rp_34(PCB_POINTER) (CUR_STRING())
static void ag_rp_35(PCB_DECL, ParserContentLength contentLength) {
/* Line 549, RV SIP Stack */
          RvStatus status;
          contentLength.isCompact = PCB.isCompactForm;
          status = ParserInitContentLength(PCB.pParserMgr,PCB.pointer,&contentLength,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
     
}
static ParserContentLength ag_rp_36(PCB_DECL) {
/* Line 572, RV SIP Stack */
        ParserContentLength contentLength;
        contentLength.contentLenVal = CUR_STRING();
        return contentLength;
    
}
static void ag_rp_37(PCB_DECL, ParserCallId callId) {
/* Line 587, RV SIP Stack */
  
          RvStatus status;
          callId.isCompact = PCB.isCompactForm;
          status = ParserInitCallId(PCB.pParserMgr,PCB.pointer,&callId,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if(RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
    
}
static ParserCallId ag_rp_38(PCB_DECL, ParserBasicToken token) {
/* Line 609, RV SIP Stack */
         ParserCallId callId;
         callId.callIdVal = token;
         callId.isCompact = PCB.isCompactForm;
         return callId;
    
}
static ParserCallId ag_rp_39(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 616, RV SIP Stack */
        ParserCallId callId;
        token.len = (token2.len +token.len + 1);
        callId.callIdVal = token;
        callId.isCompact = PCB.isCompactForm;
        return callId;
    
}
static void ag_rp_40(PCB_DECL) {
/* Line 634, RV SIP Stack */
        RvStatus status;
        PCB.contentType.isCompactForm = PCB.isCompactForm;
        status = ParserInitContentType(PCB.pParserMgr,PCB.pointer,&(PCB.contentType),PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status) 
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_TYPE, &PCB);
     
}
static void ag_rp_41(PCB_DECL, ParserMediaType t, ParserMediaSubType st) {
/* Line 663, RV SIP Stack */
 
        PCB.contentType.mediaType    = t;
        PCB.contentType.mediaSubType = st;
        PCB.contentType.genericParamList = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             PCB.contentType.genericParamList=PCB.pExtParams;
        }
    
}
static void ag_rp_42(PCB_DECL) {
/* Line 676, RV SIP Stack */
 
	           PCB.contentType.params.isBoundary  = RV_FALSE;
  	           PCB.contentType.params.isVersion   = RV_FALSE;
               PCB.contentType.params.isBase      = RV_FALSE;
            
}
static void ag_rp_43(PCB_DECL, ParserBoundary b) {
/* Line 694, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_44(PCB_DECL, ParserBase v) {
/* Line 701, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_45(PCB_DECL, ParserBase b) {
/* Line 708, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
static void ag_rp_46(PCB_DECL) {
/* Line 716, RV SIP Stack */
        
        
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
    
}
static void ag_rp_47(PCB_DECL, ParserBoundary b) {
/* Line 731, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_48(PCB_DECL, ParserBase v) {
/* Line 736, RV SIP Stack */
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_49(PCB_DECL, ParserBase b) {
/* Line 741, RV SIP Stack */
        PCB.contentType.params.isBase = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
#define ag_rp_50(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_TEXT))
#define ag_rp_51(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_IMAGE))
#define ag_rp_52(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_AUDIO))
#define ag_rp_53(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_VIDEO))
#define ag_rp_54(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_APPLICATION))
#define ag_rp_55(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MULTIPART))
#define ag_rp_56(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MESSAGE))
static ParserMediaType ag_rp_57(PCB_DECL, ParserBasicToken t) {
/* Line 761, RV SIP Stack */
		ParserMediaType mediaType;
		mediaType.type = RVSIP_MEDIATYPE_OTHER;
		mediaType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaType;
	
}
#define ag_rp_58(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_PLAIN))
#define ag_rp_59(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_SDP))
#define ag_rp_60(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ISUP))
#define ag_rp_61(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_QSIG))
#define ag_rp_62(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_MIXED))
#define ag_rp_63(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ALTERNATIVE))
#define ag_rp_64(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_DIGEST))
#define ag_rp_65(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_RFC822))
#define ag_rp_66(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_3GPP_IMS_XML))
static ParserMediaSubType ag_rp_67(PCB_DECL, ParserBasicToken t) {
/* Line 787, RV SIP Stack */
		ParserMediaSubType mediaSubType;
		mediaSubType.type = RVSIP_MEDIASUBTYPE_OTHER;
		mediaSubType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaSubType;
	
}
#define ag_rp_68(PCB_POINTER, t) (t)
#define ag_rp_69(PCB_POINTER, t) (t)
#define ag_rp_70(PCB_POINTER, t) (t)
#define ag_rp_71(PCB_POINTER, t) (t)
#define ag_rp_72(PCB_POINTER, t) (t)
#define ag_rp_73(PCB_POINTER, t) (t)
static void ag_rp_74(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 820, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
      else
      {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
   
}
#define ag_rp_75(PCB_POINTER, token) (token)
#define ag_rp_76(PCB_POINTER, qs) (qs)
static void ag_rp_77(PCB_DECL, ParserBasicToken token) {
/* Line 858, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token.buf,token.len, PCB.pExtParams);
      }
      else
      {      
          
          APPEND_DATA(token.buf,token.len,PCB.pExtParams);
      }
    
}
static void ag_rp_78(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 872, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
        else
        {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
    
}
#define ag_rp_79(PCB_POINTER, token) (token)
#define ag_rp_80(PCB_POINTER, qs) (qs)
static void ag_rp_81(PCB_DECL, ParserSipVersion ver, ParserStatusCode status, ParserReasonPhrase reason) {
/* Line 906, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;
        statusLine.reasonPhrase = reason;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if (RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
static void ag_rp_82(PCB_DECL, ParserSipVersion ver, ParserStatusCode status) {
/* Line 926, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;       
        statusLine.reasonPhrase.buf=NULL;
        statusLine.reasonPhrase.len=0;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
#define ag_rp_83(PCB_POINTER) (CUR_STRING())
#define ag_rp_84(PCB_POINTER) (CUR_STRING())
static ParserStatusCode ag_rp_85(PCB_DECL, int D100, int D10, int D1) {
/* Line 964, RV SIP Stack */
        RvUint16 code;
        RV_UNUSED_ARG(pcb_pointer);
        code =  (RvUint16)((D100 - '0')*100 + (D10 - '0')*10 + (D1 - '0'));
        return code;
    
}
static void ag_rp_86(PCB_DECL, ParserMethod met) {
/* Line 983, RV SIP Stack */
 
        RvStatus   status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_87(PCB_DECL, ParserMethod met) {
/* Line 1000, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_88(PCB_DECL) {
/* Line 1028, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr, &PCB, PCB.pointer, &(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
           
       }
       
    
}
static void ag_rp_89(PCB_DECL) {
/* Line 1056, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr,&PCB, PCB.pointer,&(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
       }
    
}
static void ag_rp_90(PCB_DECL) {
/* Line 1083, RV SIP Stack */
 
        PCB.singleVia.sentProtocol = PCB.sentProtocol;
        PCB.singleVia.sentBy       = PCB.viaSentBy;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            if (PCB.singleVia.params.isOtherParams==RV_FALSE)
            {
                PCB.singleVia.params.isOtherParams = RV_TRUE;
                PCB.singleVia.params.otherParam = PCB.pExtParams;
            }
        }                
    
}
static void ag_rp_91(PCB_DECL) {
/* Line 1100, RV SIP Stack */
 
        PCB.singleVia.params.hidden     = RV_FALSE;
        PCB.singleVia.params.alias     = RV_FALSE;
        PCB.singleVia.params.isTtl      = RV_FALSE;
        PCB.singleVia.params.isMaddr    = RV_FALSE;
	    PCB.singleVia.params.isReceived = RV_FALSE;
        PCB.singleVia.params.isBranch   = RV_FALSE;
        PCB.singleVia.params.isOtherParams=RV_FALSE;  
        PCB.singleVia.params.isRport	= RV_FALSE;
        PCB.singleVia.params.isComp     = RV_FALSE;
    
}
static void ag_rp_92(PCB_DECL, ParserViaParam p) {
/* Line 1114, RV SIP Stack */
        switch( p.paramType )
        {
            case PARSER_PARAM_TYPE_HIDDEN :
                PCB.singleVia.params.hidden = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_ALIAS:
                PCB.singleVia.params.alias = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_TTL :
                PCB.singleVia.params.isTtl = RV_TRUE;
                PCB.singleVia.params.ttl   = p.param.ttl;
                break;
            
            case PARSER_PARAM_TYPE_MADDR :
                PCB.singleVia.params.isMaddr = RV_TRUE;
                PCB.singleVia.params.maddr   = p.param.maddr;
                break;
            
            case PARSER_PARAM_TYPE_RECEIVED :
                PCB.singleVia.params.isReceived = RV_TRUE;
                PCB.singleVia.params.received   = p.param.received;
                break;
            
            case PARSER_PARAM_TYPE_BRANCH :
                PCB.singleVia.params.isBranch = RV_TRUE;
                PCB.singleVia.params.branch   = p.param.branch;
                break;
            case PARSER_PARAM_TYPE_RPORT:
                PCB.singleVia.params.isRport = RV_TRUE;
                PCB.singleVia.params.rPort   = p.param.rport;
                break;
                 
            case PARSER_PARAM_TYPE_COMP :
                PCB.singleVia.params.isComp  = RV_TRUE;
                PCB.singleVia.params.comp    = p.param.comp;
                break;   
            default:
                if (p.isOther == RV_TRUE)
                {
                     PCB.singleVia.params.isOtherParams = RV_TRUE;
                     PCB.singleVia.params.otherParam   = p.otherParam;
                }                   
                break;
        }       
    
}
static void ag_rp_93(PCB_DECL, ParserProtocolName pn, ParserProtocolVersion pv, ParserTransport t) {
/* Line 1166, RV SIP Stack */
 
        PCB.sentProtocol.protocolName    = pn;
        PCB.sentProtocol.protocolVersion = pv;
        PCB.sentProtocol.transport       = t;
    
}
#define ag_rp_94(PCB_POINTER, t) (t)
#define ag_rp_95(PCB_POINTER) (CUR_STRING())
#define ag_rp_96(PCB_POINTER, t) (t)
#define ag_rp_97(PCB_POINTER, t) (t)
static ParserTransport ag_rp_98(PCB_DECL) {
/* Line 1193, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_UDP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_99(PCB_DECL) {
/* Line 1200, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TCP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_100(PCB_DECL) {
/* Line 1207, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_SCTP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_101(PCB_DECL) {
/* Line 1214, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TLS;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_102(PCB_DECL, ParserBasicToken token) {
/* Line 1221, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_OTHER;
        t.strTransport = token;
        RV_UNUSED_ARG(pcb_pointer);
        return t;
    
}
#define ag_rp_103(PCB_POINTER) (CUR_STRING())
static void ag_rp_104(PCB_DECL, ParserBasicToken host) {
/* Line 1240, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_FALSE;
        PCB.viaSentBy.hostName = host;
     
}
static void ag_rp_105(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 1246, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_TRUE;
        PCB.viaSentBy.hostName = host;
        PCB.viaSentBy.port     = port;
      
}
static ParserViaParam ag_rp_106(PCB_DECL) {
/* Line 1260, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_HIDDEN;                   
          viaParam.param.hidden = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_107(PCB_DECL) {
/* Line 1269, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_ALIAS;                   
          viaParam.param.alias = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_108(PCB_DECL, ParserTTLParam t) {
/* Line 1278, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_TTL;                   
          viaParam.param.ttl = t;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_109(PCB_DECL, ParserMaddrParam ma) {
/* Line 1287, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_MADDR;                   
          viaParam.param.maddr = ma;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_110(PCB_DECL, ParserReceived r) {
/* Line 1296, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RECEIVED;                   
          viaParam.param.received = r;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_111(PCB_DECL, ParserBranch b) {
/* Line 1305, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_BRANCH;                   
          viaParam.param.branch = b;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_112(PCB_DECL, ParserPort rport) {
/* Line 1315, RV SIP Stack */
          ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RPORT;                   
          viaParam.param.rport = rport;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_113(PCB_DECL, ParserCompParam comp) {
/* Line 1324, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType  = PARSER_PARAM_TYPE_COMP;                   
          viaParam.param.comp = comp;
	      viaParam.isOther    = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_114(PCB_DECL) {
/* Line 1333, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_OTHER; 
	      viaParam.isOther = RV_TRUE;
          viaParam.otherParam = PCB.pExtParams;
          return viaParam;    
        
}
static void ag_rp_115(PCB_DECL, ParserBasicToken token) {
/* Line 1350, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1, PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
    
}
static void ag_rp_116(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1365, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_117(PCB_DECL, ParserBasicToken token, ParserQuotedString token2) {
/* Line 1384, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_118(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1407, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
#define ag_rp_119(PCB_POINTER, t) (t)
#define ag_rp_120(PCB_POINTER, ttl) (ttl)
#define ag_rp_121(PCB_POINTER) (CUR_STRING())
#define ag_rp_122(PCB_POINTER) (CUR_STRING())
#define ag_rp_123(PCB_POINTER) (CUR_STRING())
#define ag_rp_124(PCB_POINTER, rport) (rport)
static ParserPort ag_rp_125(PCB_DECL) {
/* Line 1462, RV SIP Stack */
        ParserPort port;
        port.len = 0;
		port.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return port;
    
}
#define ag_rp_126(PCB_POINTER, port) (port)
#define ag_rp_127(PCB_POINTER, ma) (ma)
#define ag_rp_128(PCB_POINTER, host) (host)
#define ag_rp_129(PCB_POINTER, host) (host)
#define ag_rp_130(PCB_POINTER, t) (t)
#define ag_rp_131(PCB_POINTER, comp) (comp)
static ParserCompParam ag_rp_132(PCB_DECL) {
/* Line 1499, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_SIGCOMP;
        comp.strCompParam = CUR_STRING();
        return comp;
    
}
static ParserCompParam ag_rp_133(PCB_DECL, ParserBasicToken token) {
/* Line 1506, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_OTHER;
        comp.strCompParam = CUR_STRING();
        RV_UNUSED_ARG(token.buf);
        return comp;
    
}
#define ag_rp_134(PCB_POINTER) (CUR_STRING())
#define ag_rp_135(PCB_POINTER) (CUR_STRING())
static void ag_rp_136(PCB_DECL) {
/* Line 1543, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
    
}
static void ag_rp_137(PCB_DECL) {
/* Line 1547, RV SIP Stack */
        PCB.parenCount++;
    
}
static void ag_rp_138(PCB_DECL) {
/* Line 1551, RV SIP Stack */
        if (PCB.parenCount-- == 0) 
        {
            CHANGE_REDUCTION(END_COMMENT);
        }
    
}
static void ag_rp_139(PCB_DECL, ParserAbsoluteUri uri) {
/* Line 1737, RV SIP Stack */
       RvStatus status;
       status = ParserInitAbsUri(PCB.pParserMgr, &PCB, &uri, PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (status != RV_OK)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
    
}
static ParserAbsoluteUri ag_rp_140(PCB_DECL, ParserBasicToken scheme, ParserBasicToken id) {
/* Line 1757, RV SIP Stack */
        ParserAbsoluteUri uri;
        uri.scheme = scheme;
        uri.idefntifier = id;
        RV_UNUSED_ARG(pcb_pointer);
        return uri;
    
}
#define ag_rp_141(PCB_POINTER) (CUR_STRING())
#define ag_rp_142(PCB_POINTER, displayName) (displayName)
#define ag_rp_143(PCB_POINTER) (CUR_STRING())
#define ag_rp_144(PCB_POINTER) (CUR_STRING())
static void ag_rp_145(PCB_DECL) {
/* Line 2158, RV SIP Stack */
        RvStatus status;
        status = ParserInitUrl(PCB.pParserMgr,&PCB,&(PCB.sipUrl), PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_URL_PARAMETER, &PCB);
    
}
#define ag_rp_146(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
#define ag_rp_147(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
static void ag_rp_148(PCB_DECL) {
/* Line 2209, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_FALSE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
static void ag_rp_149(PCB_DECL) {
/* Line 2215, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_TRUE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
#define ag_rp_150(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_151(PCB_DECL) {
/* Line 2227, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
		uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
#define ag_rp_152(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_RV_ABS))
static void ag_rp_153(PCB_DECL) {
/* Line 2243, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_FALSE);
    
}
#define ag_rp_154(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_155(PCB_DECL) {
/* Line 2253, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
        uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
static void ag_rp_156(PCB_DECL) {
/* Line 2266, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_TRUE);
    
}
static void ag_rp_157(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2274, RV SIP Stack */
  
           
         PCB.sipUrl.optionalHeaders = hs;
         
         if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
         {
              PCB.sipUrl.urlParameters.genericParamList= PCB.pUrlExtParams;
              PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
         }          
  	
}
static void ag_rp_158(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2285, RV SIP Stack */
  
         
       PCB.sipUrl.optionalHeaders = hs;
       
       if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
       {
            PCB.sipUrl.urlParameters.genericParamList=PCB.pUrlExtParams;
            PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
       }          
	
}
static void ag_rp_159(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2315, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_160(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2324, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_161(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2351, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_162(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2360, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_163(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2372, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_164(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2381, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_165(PCB_DECL, ParserDisplayName scheme, ParserBasicToken id) {
/* Line 2395, RV SIP Stack */
          PCB.exUri.ExUriInfo.absUri.scheme = scheme;
          PCB.exUri.ExUriInfo.absUri.idefntifier = id;
          PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_ABS_URI;
      
}
static void ag_rp_166(PCB_DECL) {
/* Line 2405, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_TRUE;
    
}
static void ag_rp_167(PCB_DECL) {
/* Line 2410, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_168(PCB_DECL) {
/* Line 2417, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_USERINFO);
    
}
static void ag_rp_169(PCB_DECL, ParserBasicToken user) {
/* Line 2423, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_FALSE;
    
}
static void ag_rp_170(PCB_DECL, ParserBasicToken user, ParserBasicToken pass) {
/* Line 2428, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_TRUE;
        PCB.sipUrl.urlUserInfo.password   = pass;
     
}
#define ag_rp_171(PCB_POINTER, t) (t)
#define ag_rp_172(PCB_POINTER) (CUR_STRING())
#define ag_rp_173(PCB_POINTER) (CUR_STRING())
static void ag_rp_174(PCB_DECL) {
/* Line 2461, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_175(PCB_DECL) {
/* Line 2467, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_HOST);
    
}
static void ag_rp_176(PCB_DECL, ParserBasicToken host) {
/* Line 2475, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_FALSE;
    
}
static void ag_rp_177(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 2481, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_TRUE;
        PCB.sipUrl.urlHost.port     = port;
    
}
#define ag_rp_178(PCB_POINTER, t) (t)
#define ag_rp_179(PCB_POINTER, ip6ref) (ip6ref)
#define ag_rp_180(PCB_POINTER) (CUR_STRING())
#define ag_rp_181(PCB_POINTER) (CUR_STRING())
#define ag_rp_182(PCB_POINTER) (CUR_STRING())
#define ag_rp_183(PCB_POINTER) (RESET_URI_PARAMS())
static void ag_rp_184(PCB_DECL) {
/* Line 2535, RV SIP Stack */
	
       PCB.sipUrl.urlParameters.isValid = RV_TRUE;
    
}
static void ag_rp_185(PCB_DECL) {
/* Line 2548, RV SIP Stack */
 
        RESET_URI_PARAMS();  
         								
        switch( PCB.urlParameter.paramType )
        {
            case PARSER_TRANSPORT_PARAM: 
	            PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
	            PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
	            break;
            case PARSER_USER_PARAM: 
	            PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
	            PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
	            break;		
            case PARSER_TTL_PARAM: 
	            PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
	            PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
	            break;
            case PARSER_MADDR_PARAM: 
	            PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
	            break;
            case PARSER_METHOD_PARAM: 
	            PCB.sipUrl.urlParameters.isMethodParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.methodParam         = PCB.urlParameter.param.methodParam; 
	            break;
            case PARSER_LR_PARAM: 
	            PCB.sipUrl.urlParameters.lrParamType         = PCB.urlParameter.param.lrParamType;
	            break;
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam         = RV_TRUE;
                PCB.sipUrl.urlParameters.compParam           = PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
	            break;
             default:
                 PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                 PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;            
        } 	 														
    
}
static void ag_rp_186(PCB_DECL) {
/* Line 2595, RV SIP Stack */
 
         
        switch( PCB.urlParameter.paramType )
        {
	        case PARSER_TRANSPORT_PARAM: 
		        PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
		        PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
		        break;
	        case PARSER_USER_PARAM: 
		        PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
		        PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
		        break;	
	        case PARSER_TTL_PARAM: 
		        PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
		        PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
		        break;
	        case PARSER_MADDR_PARAM: 
		        PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
		        PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
		        break;  
            case PARSER_METHOD_PARAM: 
		        PCB.sipUrl.urlParameters.isMethodParam		= RV_TRUE;
		        PCB.sipUrl.urlParameters.methodParam		= PCB.urlParameter.param.methodParam; 
		        break; 
            case PARSER_LR_PARAM: 
		        PCB.sipUrl.urlParameters.lrParamType		= PCB.urlParameter.param.lrParamType;
		        break; 
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam		= RV_TRUE;
                PCB.sipUrl.urlParameters.compParam			= PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
		        PCB.sipUrl.urlParameters.isOtherParams		= RV_TRUE;
		        break; 
            default:
                PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;                  
        }	 
    
}
static void ag_rp_187(PCB_DECL, ParserTransport t) {
/* Line 2645, RV SIP Stack */
 
         PCB.urlParameter.paramType = PARSER_TRANSPORT_PARAM;
         PCB.urlParameter.param.transport = t;
    
}
static void ag_rp_188(PCB_DECL, ParserUserParam u) {
/* Line 2650, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_USER_PARAM;
		 PCB.urlParameter.param.userParam = u;
	
}
static void ag_rp_189(PCB_DECL, ParserTtlParam t) {
/* Line 2655, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_TTL_PARAM;
		 PCB.urlParameter.param.ttlParam = t;
	
}
static void ag_rp_190(PCB_DECL, ParserMaddrParam ma) {
/* Line 2660, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_MADDR_PARAM;
		 PCB.urlParameter.param.maddrParam = ma;
	
}
static void ag_rp_191(PCB_DECL, ParserMethod met) {
/* Line 2666, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_METHOD_PARAM;
		 PCB.urlParameter.param.methodParam =met;
    
}
static void ag_rp_192(PCB_DECL, ParserLrParamType lrParam) {
/* Line 2671, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_LR_PARAM;
		 PCB.urlParameter.param.lrParamType   = lrParam;
    
}
static void ag_rp_193(PCB_DECL, ParserCompParam comp) {
/* Line 2676, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_COMP_PARAM;
        PCB.urlParameter.param.compParam = comp;
    
}
static void ag_rp_194(PCB_DECL, ParserTokenizedByParam tokenizedBy) {
/* Line 2681, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_TOKENIZED_BY_PARAM;
        PCB.urlParameter.param.tokenizedByParam = tokenizedBy;
    
}
static void ag_rp_195(PCB_DECL, RvBool orig) {
/* Line 2686, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_ORIG_PARAM;
        PCB.urlParameter.param.bOrigParam = orig;
    
}
static void ag_rp_196(PCB_DECL) {
/* Line 2696, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_OTHER_PARAM;
    
}
#define ag_rp_197(PCB_POINTER, t) (t)
static ParserUserParam ag_rp_198(PCB_DECL, RvSipUserParam pt) {
/* Line 2711, RV SIP Stack */
 
        ParserUserParam userParam;
	    userParam.paramType = pt;
		userParam.otherUser.buf = NULL;
		userParam.otherUser.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
static ParserUserParam ag_rp_199(PCB_DECL, ParserOtherUser ou) {
/* Line 2720, RV SIP Stack */
 
        ParserUserParam userParam;
        userParam.paramType = RVSIP_USERPARAM_OTHER;
	    userParam.otherUser = ou;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
#define ag_rp_200(PCB_POINTER) (RVSIP_USERPARAM_PHONE)
#define ag_rp_201(PCB_POINTER) (RVSIP_USERPARAM_IP)
#define ag_rp_202(PCB_POINTER, t) (t)
#define ag_rp_203(PCB_POINTER, ttl) (ttl)
#define ag_rp_204(PCB_POINTER, host) (host)
#define ag_rp_205(PCB_POINTER, met) (met)
#define ag_rp_206(PCB_POINTER) (ParserLrParam1)
#define ag_rp_207(PCB_POINTER) (ParserLrParamTrue)
#define ag_rp_208(PCB_POINTER) (ParserLrParamOn)
#define ag_rp_209(PCB_POINTER) (ParserLrParamEmpty)
#define ag_rp_210(PCB_POINTER, comp) (comp)
#define ag_rp_211(PCB_POINTER, hostname) (hostname)
#define ag_rp_212(PCB_POINTER) (RV_TRUE)
static void ag_rp_213(PCB_DECL, ParserBasicToken token) {
/* Line 2792, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token.buf,token.len, PCB.pUrlExtParams);
          }
          else
          {      
              
              APPEND_DATA(token.buf,token.len,PCB.pUrlExtParams);
          }
    
}
static void ag_rp_214(PCB_DECL, ParserBasicToken token1, ParserBasicToken token2) {
/* Line 2806, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
          else
          {      
              
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
    
}
#define ag_rp_215(PCB_POINTER) (CUR_STRING())
#define ag_rp_216(PCB_POINTER, token) (token)
static ParserOptionalHeaders ag_rp_217(PCB_DECL) {
/* Line 2849, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_FALSE;
		optionalHeaders.body.buf = NULL;
		optionalHeaders.body.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
static ParserOptionalHeaders ag_rp_218(PCB_DECL, ParserBasicToken headersList) {
/* Line 2858, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_TRUE;
        optionalHeaders.body=headersList;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
#define ag_rp_219(PCB_POINTER) (CUR_STRING())
#define ag_rp_220(PCB_POINTER) (CUR_STRING())
#define ag_rp_221(PCB_POINTER) (CUR_STRING())
#define ag_rp_222(PCB_POINTER) (CUR_STRING())
#define ag_rp_223(PCB_POINTER) (CUR_STRING())
static void ag_rp_224(PCB_DECL) {
/* Line 2894, RV SIP Stack */
        RvStatus status;
        status = ParserInitRequsetLine(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.requestLine), PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REQUEST_LINE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        
    
}
static void ag_rp_225(PCB_DECL, ParserMethod met, ParserSipVersion ver) {
/* Line 2919, RV SIP Stack */
         PCB.requestLine.method = met;
         PCB.requestLine.sipVer = ver;
		 PCB.requestLine.exUri = PCB.exUri;         
    
}
#define ag_rp_226(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("m"))
#define ag_rp_227(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("i"))
#define ag_rp_228(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("c"))
#define ag_rp_229(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("v"))
#define ag_rp_230(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("t"))
#define ag_rp_231(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("f"))
#define ag_rp_232(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("r"))
#define ag_rp_233(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("b"))
#define ag_rp_234(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("k"))
#define ag_rp_235(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("x"))
#define ag_rp_236(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("o"))
#define ag_rp_237(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("u"))
#define ag_rp_238(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("l"))
#define ag_rp_239(PCB_POINTER, met) (met)
#define ag_rp_240(PCB_POINTER) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_SIP_URL, PCB.exUri.ExUriInfo.absUri))
#define ag_rp_241(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_PRES_URI, uri))
#define ag_rp_242(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_IM_URI, uri))
#define ag_rp_243(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_ABS_URI, uri))
static void ag_rp_244(PCB_DECL) {
/* Line 2974, RV SIP Stack */
 
         RvStatus status;
         status = ParserInitParty(PCB.pParserMgr,PCB.pointer,&(PCB.party), PCB.eHeaderType, PCB.eWhichHeader, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
        ParserCleanExtParams (PCB.pExtParams); 
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_PARTY, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
	 
}
static void ag_rp_245(PCB_DECL) {
/* Line 3000, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_246(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3009, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams = partyParams; 
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_247(PCB_DECL) {
/* Line 3018, RV SIP Stack */
 
	  PCB.party.nameAddr.isDisplayName = RV_FALSE;
      PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
	  PCB.party.nameAddr.exUri = PCB.exUri;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_248(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3028, RV SIP Stack */
 
        PCB.party.nameAddr.isDisplayName = RV_FALSE;
        PCB.party.partyParams = partyParams;
		PCB.party.nameAddr.exUri = PCB.exUri;       
        PCB.party.isCompact = PCB.isCompactForm;
      
	
}
static void ag_rp_249(PCB_DECL, ParserDisplayName name) {
/* Line 3040, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;    
        PCB.nameAddr.isDisplayName = RV_TRUE;  
	    PCB.nameAddr.name = name;
	
}
static void ag_rp_250(PCB_DECL) {
/* Line 3047, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;
        PCB.nameAddr.isDisplayName = RV_FALSE;  
    
}
#define ag_rp_251(PCB_POINTER, qs) (qs)
#define ag_rp_252(PCB_POINTER, mtot) (mtot)
#define ag_rp_253(PCB_POINTER) (CUR_STRING())
#define ag_rp_254(PCB_POINTER) (CUR_STRING())
#define ag_rp_255(PCB_POINTER, t) (t)
#define ag_rp_256(PCB_POINTER, ppd) (ppd)
static ParserPartyParams ag_rp_257(PCB_DECL, ParserPartyParams ppl, ParserPartyParams ppd) {
/* Line 3078, RV SIP Stack */
        if (RV_TRUE == ppd.isTag)
        {
            ppl.isTag = RV_TRUE;
            ppl.tag = ppd.tag;
        }
        if (RV_TRUE == ppd.isAddrParams) 
        {
            ppl.isAddrParams = RV_TRUE;
            ppl.addrParams = ppd.addrParams;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ppl;
    
}
static ParserPartyParams ag_rp_258(PCB_DECL, ParserTagParam tag) {
/* Line 3097, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isTag = RV_TRUE;
        partyParams.tag = tag;
        partyParams.isAddrParams = RV_FALSE;
        partyParams.addrParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return partyParams; 
    
}
static ParserPartyParams ag_rp_259(PCB_DECL) {
/* Line 3107, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isAddrParams = RV_TRUE;
        partyParams.isTag = RV_FALSE;
        partyParams.addrParams = PCB.pExtParams;
		partyParams.tag.buf = NULL;
		partyParams.tag.len = 0;
        return partyParams; 
    
}
static void ag_rp_260(PCB_DECL) {
/* Line 3133, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_TRUE; 
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr, &PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
    
}
static void ag_rp_261(PCB_DECL) {
/* Line 3166, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues  contactHeaderValues;
         contactHeaderValues.isStar        = RV_FALSE;
         contactHeaderValues.header        = PCB.contact;
         contactHeaderValues.isCompact     = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_262(PCB_DECL) {
/* Line 3199, RV SIP Stack */
         RvStatus                 status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_FALSE;
         contactHeaderValues.header = PCB.contact;
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_263(PCB_DECL) {
/* Line 3234, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_FALSE;
	
}
static void ag_rp_264(PCB_DECL) {
/* Line 3240, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_TRUE;
      
	
}
static void ag_rp_265(PCB_DECL) {
/* Line 3250, RV SIP Stack */
 
	  PCB.contact.nameAddr.isDisplayName = RV_FALSE;  
      PCB.contact.isParams = RV_FALSE;
	  PCB.contact.nameAddr.exUri = PCB.exUri;      
	
}
static void ag_rp_266(PCB_DECL) {
/* Line 3257, RV SIP Stack */
 
      PCB.contact.nameAddr.isDisplayName = RV_FALSE;
	  PCB.contact.isParams = RV_TRUE;      
      PCB.contact.nameAddr.exUri = PCB.exUri;
	
}
static void ag_rp_267(PCB_DECL, ParserQVal q) {
/* Line 3277, RV SIP Stack */
 
        PCB.contact.params.isQ = RV_TRUE;
        PCB.contact.params.q = q;
    
}
static void ag_rp_268(PCB_DECL, ParserContactActionType action) {
/* Line 3283, RV SIP Stack */
 
        PCB.contact.params.isAction = RV_TRUE;
        PCB.contact.params.action = action;
    
}
static void ag_rp_269(PCB_DECL) {
/* Line 3289, RV SIP Stack */
 
        PCB.contact.params.isExpires = RV_TRUE;
        PCB.contact.params.expires = PCB.expires;
    
}
static void ag_rp_270(PCB_DECL) {
/* Line 3295, RV SIP Stack */
  
        PCB.contact.params.isExtention = RV_TRUE;
		PCB.contact.params.exten = PCB.pExtParams;
    
}
#define ag_rp_271(PCB_POINTER, qVal) (qVal)
#define ag_rp_272(PCB_POINTER) (CUR_STRING())
#define ag_rp_273(PCB_POINTER) (CUR_STRING())
#define ag_rp_274(PCB_POINTER, actionVal) (actionVal)
#define ag_rp_275(PCB_POINTER) (PARSER_CONTACT_ACTION_PROXY)
#define ag_rp_276(PCB_POINTER) (PARSER_CONTACT_ACTION_REDIRECT)
static void ag_rp_277(PCB_DECL) {
/* Line 3341, RV SIP Stack */
       RvStatus status;
       status = ParserInitExpiresHeader(PCB.pParserMgr,PCB.pointer,&(PCB.expires),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_278(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3363, RV SIP Stack */
  
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_279(PCB_DECL, ParserSipDate date) {
/* Line 3369, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
static void ag_rp_280(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3378, RV SIP Stack */
   
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_281(PCB_DECL, ParserSipDate date) {
/* Line 3384, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
#define ag_rp_282(PCB_POINTER) (CUR_STRING())
static void ag_rp_283(PCB_DECL, ParserSipDate date) {
/* Line 3409, RV SIP Stack */
   
          RvStatus status;
          status = ParserInitDateHeader(PCB.pParserMgr,PCB.pointer,&date,PCB.eHeaderType,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
                
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
    
}
static ParserSipDate ag_rp_284(PCB_DECL, ParserDDMMYY date, ParserTime t) {
/* Line 3431, RV SIP Stack */
  
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_285(PCB_POINTER, date) (date)
static ParserSipDate ag_rp_286(PCB_DECL, RvSipDateWeekDay day, ParserDDMMYY date, ParserTime t) {
/* Line 3446, RV SIP Stack */
   
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
	    sipDate.eWeekDay = day; 
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_287(PCB_POINTER) (RVSIP_WEEKDAY_SUN)
#define ag_rp_288(PCB_POINTER) (RVSIP_WEEKDAY_MON)
#define ag_rp_289(PCB_POINTER) (RVSIP_WEEKDAY_TUE)
#define ag_rp_290(PCB_POINTER) (RVSIP_WEEKDAY_WED)
#define ag_rp_291(PCB_POINTER) (RVSIP_WEEKDAY_THU)
#define ag_rp_292(PCB_POINTER) (RVSIP_WEEKDAY_FRI)
#define ag_rp_293(PCB_POINTER) (RVSIP_WEEKDAY_SAT)
static ParserDDMMYY ag_rp_294(PCB_DECL, ParserInt32 dd, RvSipDateMonth mm, ParserInt32 yy) {
/* Line 3471, RV SIP Stack */
        ParserDDMMYY ddmmyy;
        ddmmyy.day = dd;
        ddmmyy.eMonth = mm;
        ddmmyy.year = yy;
        RV_UNUSED_ARG(pcb_pointer);
        return ddmmyy;
    
}
static ParserInt32 ag_rp_295(PCB_DECL, int d) {
/* Line 3483, RV SIP Stack */
    	RV_UNUSED_ARG(pcb_pointer);
    	return d - '0';	
    
}
static ParserInt32 ag_rp_296(PCB_DECL, int d1, int d2) {
/* Line 3488, RV SIP Stack */
		RV_UNUSED_ARG(pcb_pointer);
	    return 10 * (d1-'0') + (d2-'0');
    
}
#define ag_rp_297(PCB_POINTER) (RVSIP_MONTH_JAN)
#define ag_rp_298(PCB_POINTER) (RVSIP_MONTH_FEB)
#define ag_rp_299(PCB_POINTER) (RVSIP_MONTH_MAR)
#define ag_rp_300(PCB_POINTER) (RVSIP_MONTH_APR)
#define ag_rp_301(PCB_POINTER) (RVSIP_MONTH_MAY)
#define ag_rp_302(PCB_POINTER) (RVSIP_MONTH_JUN)
#define ag_rp_303(PCB_POINTER) (RVSIP_MONTH_JUL)
#define ag_rp_304(PCB_POINTER) (RVSIP_MONTH_AUG)
#define ag_rp_305(PCB_POINTER) (RVSIP_MONTH_SEP)
#define ag_rp_306(PCB_POINTER) (RVSIP_MONTH_OCT)
#define ag_rp_307(PCB_POINTER) (RVSIP_MONTH_NOV)
#define ag_rp_308(PCB_POINTER) (RVSIP_MONTH_DEC)
#define ag_rp_309(PCB_POINTER, d1, d2) (2000 + 10 * (d1-'0') + (d2-'0'))
#define ag_rp_310(PCB_POINTER, d1, d2, d3) (2000 + 100 * (d1-'0') + 10 * (d2-'0') + (d3-'0'))
#define ag_rp_311(PCB_POINTER, d1, d2, d3, d4) (1000 * (d1-'0') + 100*(d2-'0') + 10*(d3-'0') + (d4-'0'))
static ParserTime ag_rp_312(PCB_DECL, ParserInt32 hour, ParserInt32 min, ParserInt32 second, ParserTimeZone zone) {
/* Line 3518, RV SIP Stack */
        ParserTime t;
        t.hour   = hour;
        t.minute = min;
        t.second = second;
        t.zone   = zone;
        RV_UNUSED_ARG(pcb_pointer);
        return t;        
    
}
#define ag_rp_313(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_314(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_315(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_316(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMT)
#define ag_rp_317(PCB_POINTER) (SIPPARSER_TIME_ZONE_UTC)
#define ag_rp_318(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMST)
static void ag_rp_319(PCB_DECL, ParserMethod method) {
/* Line 3565, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value.buf = NULL;
        otherHeader.value.len = 0;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
        
    
}
static void ag_rp_320(PCB_DECL, ParserMethod method, ParserBasicToken fv) {
/* Line 3590, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value = fv;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_321(PCB_DECL) {
/* Line 4663, RV SIP Stack */
         RvStatus status;
         status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_322(PCB_DECL) {
/* Line 4686, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_323(PCB_DECL) {
/* Line 4713, RV SIP Stack */
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_FALSE;
        PCB.route.eRouteType = PCB.eWhichHeader;
    
}
static void ag_rp_324(PCB_DECL) {
/* Line 4718, RV SIP Stack */
 
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_TRUE;
        PCB.route.eRouteType = PCB.eWhichHeader;
          
         if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
         {
             PCB.route.routeParams = PCB.pExtParams;
         }                
     
}
static void ag_rp_325(PCB_DECL) {
/* Line 4744, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitRetryAfterHeader(PCB.pParserMgr,PCB.pointer,&(PCB.retryAfter),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
        
         ParserCleanExtParams (PCB.pExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RETRY_AFTER, &PCB);
    
}
static void ag_rp_326(PCB_DECL, ParserDeltaSeconds delta, ParserRetryParam param) {
/* Line 4769, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_327(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4779, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_328(PCB_DECL, ParserSipDate date, ParserRetryParam param) {
/* Line 4790, RV SIP Stack */
        PCB.retryAfter.sipDate   = date;
        PCB.retryAfter.isSipDate = RV_TRUE;
        if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
        PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_329(PCB_DECL, ParserSipDate date) {
/* Line 4801, RV SIP Stack */
         PCB.retryAfter.sipDate   = date;
         PCB.retryAfter.isSipDate = RV_TRUE;
         
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_330(PCB_DECL, ParserBasicToken comment) {
/* Line 4816, RV SIP Stack */
        PCB.retryAfter.comment = comment;
        PCB.retryAfter.isComment = RV_TRUE;
    
}
static ParserRetryParam ag_rp_331(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4824, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_TRUE;
        param.deltaSeconds   = delta;
        param.genericParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return param;
    
}
static ParserRetryParam ag_rp_332(PCB_DECL) {
/* Line 4833, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_FALSE;
		param.deltaSeconds.buf = NULL;
		param.deltaSeconds.len = 0;
        param.genericParams = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             param.genericParams=PCB.pExtParams;
        }
        return param;
    
}
static ParserRetryParam ag_rp_333(PCB_DECL, ParserRetryParam params, ParserDeltaSeconds delta) {
/* Line 4847, RV SIP Stack */
        params.isDeltaSeconds = RV_TRUE;
        params.deltaSeconds   = delta;   
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserRetryParam ag_rp_334(PCB_DECL, ParserRetryParam params) {
/* Line 4854, RV SIP Stack */
        params.genericParams  = NULL;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            params.genericParams = PCB.pExtParams;
        }    
        return params;
    
}
#define ag_rp_335(PCB_POINTER, delta) (delta)
static void ag_rp_336(PCB_DECL, ParserRSeq rseq) {
/* Line 4880, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRSeq(PCB.pParserMgr,PCB.pointer,&rseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
#define ag_rp_337(PCB_POINTER, responseNum) (responseNum)
#define ag_rp_338(PCB_POINTER) (CUR_STRING())
static void ag_rp_339(PCB_DECL) {
/* Line 4918, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRack(PCB.pParserMgr,PCB.pointer,&(PCB.rack),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RACK, &PCB);
    
}
static void ag_rp_340(PCB_DECL, ParserResponseNum responseNum, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 4940, RV SIP Stack */
		PCB.rack.method = method;
		PCB.rack.sequenceNumber = sequenceNumber;
        PCB.rack.responseNum = responseNum;
	 
}
#define ag_rp_341(PCB_POINTER, t) (t)
static void ag_rp_342(PCB_DECL, ParserBasicToken tag) {
/* Line 4956, RV SIP Stack */
 
          RvStatus       status; 
          ParserOptionTag option; 
          option.headerType = PCB.eWhichHeader;
          option.optionTag = tag;
          status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
              
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
           
          ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_343(PCB_DECL, ParserBasicToken opTag) {
/* Line 4980, RV SIP Stack */
 
           RvStatus       status;
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag = opTag;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
           }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_344(PCB_DECL) {
/* Line 5005, RV SIP Stack */
 
           RvStatus       status; 
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag.len = 0;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
			  PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
		   }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_345(PCB_DECL) {
/* Line 5064, RV SIP Stack */
         RvStatus status;
         status = ParserInitReferTo(PCB.pParserMgr,PCB.pointer,&(PCB.referTo),PCB.eHeaderType,PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REFER_TO, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_346(PCB_DECL) {
/* Line 5090, RV SIP Stack */
        PCB.referTo.nameAddr.exUri = PCB.exUri;
        PCB.referTo.nameAddr.isDisplayName = RV_FALSE;
        PCB.referTo.isCompact = PCB.isCompactForm;
        PCB.referTo.isExtention = RV_FALSE;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            PCB.referTo.exten = PCB.pExtParams;
            PCB.referTo.isExtention = RV_TRUE;
        }
    
}
static void ag_rp_347(PCB_DECL) {
/* Line 5102, RV SIP Stack */
 
	  PCB.referTo.nameAddr = PCB.nameAddr;
      PCB.referTo.isCompact = PCB.isCompactForm;
      PCB.referTo.isExtention = RV_FALSE;
      
      if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
      {
          PCB.referTo.exten = PCB.pExtParams;
          PCB.referTo.isExtention = RV_TRUE;
      }
	
}
static void ag_rp_348(PCB_DECL) {
/* Line 5135, RV SIP Stack */
         RvStatus status;
         status = ParserInitRefferredBy(PCB.pParserMgr,PCB.pointer,&(PCB.referredBy),PCB.eHeaderType,PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REFERRED_BY, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_349(PCB_DECL) {
/* Line 5161, RV SIP Stack */
        PCB.referredBy.referrerAddrSpec = PCB.nameAddr;
        PCB.referredBy.isCompact = PCB.isCompactForm;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            PCB.referredBy.genericParams = PCB.pExtParams;
        } 
    
}
static void ag_rp_350(PCB_DECL) {
/* Line 5172, RV SIP Stack */
 
        PCB.referredBy.genericParams = NULL;
	
}
static void ag_rp_351(PCB_DECL) {
/* Line 5179, RV SIP Stack */
 
        PCB.nameAddr.isDisplayName = RV_FALSE; 
        PCB.nameAddr.exUri = PCB.exUri;
        PCB.referredBy.genericParams = NULL;
	
}
static void ag_rp_352(PCB_DECL, ParserQuotedString cid) {
/* Line 5192, RV SIP Stack */
 
        PCB.referredBy.isCid = RV_TRUE;
        PCB.referredBy.cidParam = cid;
    
}
static void ag_rp_353(PCB_DECL) {
/* Line 5197, RV SIP Stack */
  
        PCB.referredBy.genericParams = PCB.pExtParams;     
    
}
#define ag_rp_354(PCB_POINTER, cid) (cid)
#define ag_rp_355(PCB_POINTER) (CUR_STRING())
static void ag_rp_356(PCB_DECL) {
/* Line 5231, RV SIP Stack */
        RvStatus status;
        PCB.event.isCompact = PCB.isCompactForm;
        status = ParserInitEvent(PCB.pParserMgr,PCB.pointer,&(PCB.event), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EVENT_HEADER, &PCB);
        
     
}
static void ag_rp_357(PCB_DECL, ParserEventType type) {
/* Line 5255, RV SIP Stack */
        PCB.event.isEventParams = RV_TRUE;
        PCB.event.eventType = type;
    
}
static void ag_rp_358(PCB_DECL, ParserEventType type) {
/* Line 5260, RV SIP Stack */
        PCB.event.isEventParams = RV_FALSE;
        PCB.event.eventType = type;
    
}
static ParserEventType ag_rp_359(PCB_DECL, ParserBasicToken package, ParserBasicToken eventTemplate) {
/* Line 5268, RV SIP Stack */
        ParserEventType evType;
        evType.package = package;
        evType.isTemplate = RV_TRUE;
        evType.templateVal = eventTemplate;
        RV_UNUSED_ARG(pcb_pointer);
        return evType;
    
}
static ParserEventType ag_rp_360(PCB_DECL, ParserBasicToken package) {
/* Line 5277, RV SIP Stack */
        ParserEventType evType;
        evType.package = package;
        evType.isTemplate = RV_FALSE;
		evType.templateVal.buf = NULL;
		evType.templateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return evType;
    
}
#define ag_rp_361(PCB_POINTER, t) (t)
#define ag_rp_362(PCB_POINTER, t) (t)
static void ag_rp_363(PCB_DECL, ParserBasicToken id) {
/* Line 5300, RV SIP Stack */
 
        PCB.event.eventParams.isEventId = RV_TRUE;
        PCB.event.eventParams.eventId = id;
    
}
static void ag_rp_364(PCB_DECL) {
/* Line 5305, RV SIP Stack */
  
        PCB.event.eventParams.isExtention = RV_TRUE;
        PCB.event.eventParams.exten = PCB.pExtParams;
                         
    
}
#define ag_rp_365(PCB_POINTER, idVal) (idVal)
static void ag_rp_366(PCB_DECL, ParserEventType type) {
/* Line 5334, RV SIP Stack */
        ParserAllowEvents allowEvents;
        RvStatus         status;
        allowEvents.eventType = type;
        allowEvents.isCompact = PCB.isCompactForm;
        status = ParserInitAllowEvents(PCB.pParserMgr,&PCB,PCB.pointer,&allowEvents,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        
    
}
static void ag_rp_367(PCB_DECL, ParserEventType type) {
/* Line 5356, RV SIP Stack */
        RvStatus status;
        ParserAllowEvents allowEvents;
        
        allowEvents.eventType = type;
        allowEvents.isCompact = PCB.isCompactForm;
        status = ParserInitAllowEvents(PCB.pParserMgr,&PCB,PCB.pointer,&allowEvents,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        
    
}
static void ag_rp_368(PCB_DECL) {
/* Line 5388, RV SIP Stack */
        RvStatus status;
        status = ParserInitSubsState(PCB.pParserMgr,PCB.pointer,&(PCB.subsState), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
		{
			PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
			SYNTAX_ERROR;
		}
		else if (RV_OK != status)
		{
			
			PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
			PCB.eStat = status;
		}
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SUBS_STATE_HEADER, &PCB);
     
}
static void ag_rp_369(PCB_DECL, ParserSubsStateValue value) {
/* Line 5408, RV SIP Stack */
            PCB.subsState.substateValue = value;
            PCB.subsState.isParams = RV_TRUE;
        
}
static void ag_rp_370(PCB_DECL, ParserSubsStateValue value) {
/* Line 5413, RV SIP Stack */
            PCB.subsState.substateValue = value;
            PCB.subsState.isParams = RV_FALSE;
        
}
static ParserSubsStateValue ag_rp_371(PCB_DECL) {
/* Line 5420, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_ACTIVE;
		val.otherSubstateVal.buf = NULL;
		val.otherSubstateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static ParserSubsStateValue ag_rp_372(PCB_DECL) {
/* Line 5429, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_PENDING;
		val.otherSubstateVal.buf = NULL;
		val.otherSubstateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static ParserSubsStateValue ag_rp_373(PCB_DECL) {
/* Line 5438, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_TERMINATED;
		val.otherSubstateVal.buf = NULL;
		val.otherSubstateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static ParserSubsStateValue ag_rp_374(PCB_DECL, ParserBasicToken t) {
/* Line 5447, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_OTHER;
        val.otherSubstateVal = t;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static void ag_rp_375(PCB_DECL, ParserSubsStateReason reason) {
/* Line 5462, RV SIP Stack */
 
        PCB.subsState.substateParams.isReason    = RV_TRUE;
        PCB.subsState.substateParams.eReasonType = reason.substateReason;
        PCB.subsState.substateParams.otherReason = reason.otherSubstateReason;
    
}
static void ag_rp_376(PCB_DECL, ParserBasicToken retryAfter) {
/* Line 5468, RV SIP Stack */
 
        PCB.subsState.substateParams.isRetryAfter = RV_TRUE;
        PCB.subsState.substateParams.retryAfter = retryAfter;
                
    
}
static void ag_rp_377(PCB_DECL, ParserBasicToken expires) {
/* Line 5474, RV SIP Stack */
 
        PCB.subsState.substateParams.isExpires = RV_TRUE;
        PCB.subsState.substateParams.expires = expires;
    
}
static void ag_rp_378(PCB_DECL) {
/* Line 5479, RV SIP Stack */
  
        PCB.subsState.substateParams.isExtention = RV_TRUE;
        PCB.subsState.substateParams.exten = PCB.pExtParams;
                 
    
}
#define ag_rp_379(PCB_POINTER, retryAfter) (retryAfter)
#define ag_rp_380(PCB_POINTER, expires) (expires)
#define ag_rp_381(PCB_POINTER, reasonVal) (reasonVal)
#define ag_rp_382(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_DEACTIVATED))
#define ag_rp_383(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_PROBATION))
#define ag_rp_384(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_REJECTED))
#define ag_rp_385(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_TIMEOUT))
#define ag_rp_386(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_GIVEUP))
#define ag_rp_387(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_NORESOURCE))
static ParserSubsStateReason ag_rp_388(PCB_DECL, ParserBasicToken t) {
/* Line 5507, RV SIP Stack */
        ParserSubsStateReason reason;
        reason.substateReason = PARSER_SUBS_STATE_REASON_OTHER;
        reason.otherSubstateReason = t;
        RV_UNUSED_ARG(pcb_pointer);
        return reason;
     
}
static void ag_rp_389(PCB_DECL) {
/* Line 5536, RV SIP Stack */
            RvStatus status;
            status = ParserInitContentDisposition(PCB.pParserMgr,PCB.pointer,&(PCB.contentDisposition), PCB.eHeaderType, PCB.pSipObject);
            if(RV_ERROR_ILLEGAL_SYNTAX == status)
			{
				PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
				SYNTAX_ERROR;
			}
			else if (RV_OK != status)
            {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
            }
            ParserCleanExtParams (PCB.pExtParams);
            ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_DISPOSITION, &PCB);
         
}
static void ag_rp_390(PCB_DECL, ParserDisposition type, ParserDispositionParams params) {
/* Line 5556, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams = params;
    
}
static void ag_rp_391(PCB_DECL, ParserDisposition type) {
/* Line 5561, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN;
        PCB.contentDisposition.dispositionParams.isGenericParam = RV_FALSE;
    
}
#define ag_rp_392(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_RENDER))
#define ag_rp_393(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SESSION))
#define ag_rp_394(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ICON))
#define ag_rp_395(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ALERT))
#define ag_rp_396(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SIGNAL))
static ParserDisposition ag_rp_397(PCB_DECL, ParserBasicToken otherType) {
/* Line 5576, RV SIP Stack */
        ParserDisposition disposition;
        disposition.eDispositionType = PARSER_DISPOSITION_TYPE_OTHER;
        disposition.otherDispositionType = otherType;
        RV_UNUSED_ARG(pcb_pointer);
        return disposition;
    
}
static ParserDispositionParams ag_rp_398(PCB_DECL, ParserDispositionParam param) {
/* Line 5587, RV SIP Stack */
        ParserDispositionParams params;
        params.handlingParam    = param;
        params.genericParamList = NULL;
        params.isGenericParam = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParams ag_rp_399(PCB_DECL) {
/* Line 5597, RV SIP Stack */
        ParserDispositionParams params;
		
		params.isGenericParam = RV_TRUE;
		params.genericParamList = NULL;
		params.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.handlingParam.otherHandlingParam.buf = NULL;
		params.handlingParam.otherHandlingParam.len = 0;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             params.genericParamList=PCB.pExtParams;
        }
        
        return params;
    
}
static ParserDispositionParams ag_rp_400(PCB_DECL, ParserDispositionParams ps, ParserDispositionParam p) {
/* Line 5615, RV SIP Stack */
        if (p.eParam != PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN)
        {
            ps.handlingParam = p;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ps;
    
}
static ParserDispositionParams ag_rp_401(PCB_DECL, ParserDispositionParams ps) {
/* Line 5624, RV SIP Stack */
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             ps.genericParamList=PCB.pExtParams;
        }
        ps.isGenericParam = RV_TRUE;
        return ps;
    
}
static ParserDispositionParam ag_rp_402(PCB_DECL) {
/* Line 5637, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OPTIONAL;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_403(PCB_DECL) {
/* Line 5646, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_REQUIRED;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_404(PCB_DECL, ParserBasicToken other) {
/* Line 5655, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.otherHandlingParam = other;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static void ag_rp_405(PCB_DECL, ParserSessionExpiresHeader sessionExpires) {
/* Line 5674, RV SIP Stack */
        RvStatus status;
        sessionExpires.isCompact = PCB.isCompactForm;
        status = ParserInitSessionExpiresHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
												PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserSessionExpiresHeader ag_rp_406(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5696, RV SIP Stack */
 
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
        sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
		RV_UNUSED_ARG(pcb_pointer);
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_407(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5708, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_408(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5723, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_409(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5739, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
#define ag_rp_410(PCB_POINTER, refType) (refType)
#define ag_rp_411(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAC)
#define ag_rp_412(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAS)
static void ag_rp_413(PCB_DECL, ParserMinSEHeader sessionExpires) {
/* Line 5779, RV SIP Stack */
       RvStatus status;
       status = ParserInitMinSEHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
                                      PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
       ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserMinSEHeader ag_rp_414(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5799, RV SIP Stack */
 
        ParserMinSEHeader minSE;
		minSE.deltaSeconds = delta;
        minSE.isExtention = RV_FALSE;
		minSE.exten = NULL;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            minSE.exten = PCB.pExtParams;
            minSE.isExtention = RV_TRUE;
        }
        return minSE;
    
}
static void ag_rp_415(PCB_DECL, ParserCallId callId) {
/* Line 5834, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, &(PCB.replacesParams), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_416(PCB_DECL, ParserCallId callId) {
/* Line 5853, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, NULL, PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_417(PCB_DECL) {
/* Line 5875, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_418(PCB_DECL) {
/* Line 5896, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_419(PCB_DECL, ParserTagParam toTag) {
/* Line 5919, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_TO_TAG; 
	  PCB.replacesParam.paramVal = toTag;
        
    
}
static void ag_rp_420(PCB_DECL, ParserTagParam fromTag) {
/* Line 5925, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_FROM_TAG; 
	  PCB.replacesParam.paramVal = fromTag;
    
}
static void ag_rp_421(PCB_DECL, ParserReplacesEarlyFlagParamType earlyFlag) {
/* Line 5931, RV SIP Stack */
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG; 
      PCB.replacesParam.eEarlyFlagType = earlyFlag;
    
}
static void ag_rp_422(PCB_DECL) {
/* Line 5935, RV SIP Stack */
 
      PCB.replacesParam.paramType  = PARSER_REPLACES_PARAM_TYPE_OTHER; 
      PCB.replacesParam.isOther    = RV_TRUE;
	  PCB.replacesParam.otherParam = PCB.pExtParams;
    
}
#define ag_rp_423(PCB_POINTER, t) (t)
#define ag_rp_424(PCB_POINTER, t) (t)
#define ag_rp_425(PCB_POINTER) (ParserReplacesEarlyFlagParam1)
#define ag_rp_426(PCB_POINTER) (ParserReplacesEarlyFlagParamTrue)
#define ag_rp_427(PCB_POINTER) (ParserReplacesEarlyFlagParamEmpty)
#define READ_COUNTS 
#define WRITE_COUNTS 
#undef V
#define V(i,t) (*(t *) (&(PCB).vs[(PCB).ssx + i]))
#undef VS
#define VS(i) (PCB).vs[(PCB).ssx + i]
#ifndef GET_CONTEXT
#define GET_CONTEXT CONTEXT = (PCB).input_context
#endif
typedef enum {
  ag_action_1,
  ag_action_2,
  ag_action_3,
  ag_action_4,
  ag_action_5,
  ag_action_6,
  ag_action_7,
  ag_action_8,
  ag_action_9,
  ag_action_10,
  ag_action_11,
  ag_action_12
} ag_parser_action;
#ifndef NULL_VALUE_INITIALIZER
#define NULL_VALUE_INITIALIZER = { 0 }
#endif
static SipParser_vs_type const ag_null_value NULL_VALUE_INITIALIZER;
static const unsigned short ag_rpx[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,
    2,  3,  4,  5,  0,  0,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  0,  0,
   16,  0,  0, 17,  0,  0, 18,  0,  0, 19,  0,  0,  0,  0,  0, 20,  0,  0,
    0,  0,  0, 21,  0,  0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
    0,  0, 34, 35, 36, 37, 38, 39, 40, 41, 42,  0, 43, 44, 45, 46, 47, 48,
   49,  0, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
   66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,  0,  0, 77, 78, 79, 80,  0,
    0, 81, 82, 83,  0,  0,  0,  0,  0,  0, 84, 85,  0, 86, 87,  0, 88, 89,
   90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,
  108,109,110,111,112,113,114,  0,115,116,117,118,  0,  0,119,120,121,122,
  123,124,  0,125,126,127,128,129,130,131,132,133,134,  0,  0,135,136,137,
  138,  0,139,140,  0,  0,141,142,  0,  0,143,  0,  0,144,145,146,147,  0,
  148,149,150,151,152,153,154,155,156,157,158,  0,  0,  0,  0,159,160,161,
  162,  0,163,164,  0,165,166,167,168,169,170,171,  0,  0,172,173,  0,  0,
    0,  0,  0,  0,174,175,176,177,178,179,180,  0,  0,181,182,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,
  201,202,203,204,205,206,207,208,  0,  0,  0,  0,209,210,211,212,213,214,
    0,  0,  0,  0,  0,215,216,217,218,219,220,221,  0,  0,222,  0,  0,  0,
    0,  0,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,
  239,240,241,242,243,244,245,246,247,248,249,250,251,252,  0,  0,  0,  0,
    0,253,254,255,256,257,258,259,  0,260,  0,  0,261,262,263,264,265,266,
    0,  0,267,268,269,270,271,  0,  0,272,273,  0,  0,  0,  0,274,275,276,
  277,  0,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,
  294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,
  312,313,314,315,316,317,318,319,320,  0,321,322,323,324,325,  0,  0,326,
  327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,
    0,  0,  0,345,  0,  0,346,347,348,  0,  0,349,350,351,  0,  0,352,353,
  354,355,  0,  0,  0,  0,  0,356,357,358,359,360,361,362,  0,  0,363,364,
  365,  0,366,367,368,369,370,371,372,373,374,  0,  0,375,376,377,378,379,
  380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,
  398,399,400,401,402,403,404,405,406,407,408,409,410,  0,411,412,413,414,
    0,415,416,417,418,419,420,421,422,423,424,425,426,427
};
static const unsigned char ag_key_itt[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0
};
static const unsigned short ag_key_pt[] = {
  0,  2,  0,  6,  0,  8,  0, 10,  0, 12,  0, 14,  0, 16,  0, 18,
  0, 20,  0, 22,  0, 24,  0, 26,  0, 28,  0, 30,  0, 32,  0, 34,
  0, 36,  0, 38,  0, 40,  0, 42,  0, 44,  0, 46,  0, 48,  0, 50,
  0, 52,  0, 56,  0,118,  0,119,  0,120,  0,121,  0,122,  0,123,
  0,124,  0,125,  0,126,  0,142,  0,143,  0,144,  0,145,  0,146,
  0,147,  0,148,  0,149,  0,150,  0,151,  0,152,  0,153,  0,154,
  0,155,  0,156,  0,157,  0,158,  0,159,  0,160,  0,185,  0,187,
  0,188,  0,189,  0,190,  0,204,  0,205,  0,207,  0,211,  0,213,
  0,214,  0,216,  0,217,  0,219,  0,308,  0,309,  0,312,  0,313,
  0,314,  0,315,  0,316,  0,317,  0,318,  0,321,  0,322,  0,342,
  0,343,  0,344,  0,345,  0,346,  0,347,  0,348,  0,349,  0,350,
  0,351,  0,352,  0,353,  0,354,  0,364,  0,369,  0,376,  0,382,
  0,384,  0,385,  0,387,  0,395,  0,396,  0,397,  0,398,  0,399,
  0,400,  0,401,  0,405,  0,406,  0,407,  0,408,  0,409,  0,410,
  0,411,  0,412,  0,413,  0,414,  0,415,  0,416,  0,421,  0,422,
  0,423,  0,431,  0,446,  0,460,  0,465,  0,466,  0,467,  0,472,
  0,473,  0,475,  0,476,  0,477,  0,478,  0,479,  0,480,  0,484,
  0,485,  0,486,  0,487,  0,488,  0,490,  0,491,  0,492,  0,497,
  0,498,  0,499,  0,507,  0,508,  0,509,0
};
static const unsigned char ag_key_ch[] = {
    0, 67, 69, 87,255, 89,255, 65, 68, 73, 76, 79, 83, 84,255, 86, 88,255,
   77, 78,255, 83,255, 84,255, 65, 69,255, 82,255, 70, 71,255, 65, 66, 69,
   72, 75, 80, 81, 84,255, 47, 58, 83,255, 80,255, 69, 73, 80, 83, 85,255,
   82,255, 73,255, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 82,
   83, 84, 85, 86, 88,255, 72, 85,255, 72, 82, 85,255, 79, 86,255, 73,255,
   75, 84,255, 69, 73,255, 80, 82,255, 68, 71,255, 67, 76, 80, 85,255, 65,
   79, 82, 89,255, 65, 73, 79,255, 65, 67,255, 69, 85,255, 65, 88,255, 73,
   79,255, 69, 82,255, 83, 84,255, 73, 77,255, 65, 73,255, 58, 65,255, 67,
   68, 77, 78, 80,255, 76, 78,255, 65, 85,255, 68, 82, 89,255, 83, 84,255,
   65, 69, 79, 85,255, 82, 84, 86,255, 79,255, 67, 80, 82,255, 66, 88,255,
   65, 69, 79,255, 69, 72, 82,255, 69, 82,255, 65, 67, 68, 70, 71, 74, 78,
   81, 84,255, 69, 80,255, 80, 83,255, 67, 78,255, 58, 83,255, 71, 80,255,
   66, 78,255, 65, 67, 69, 73, 85,255, 82, 88,255, 45, 75,255, 65, 67, 69,
   72, 73, 76, 79, 82, 84, 85,255, 67, 83,255, 65, 68, 83, 84,255, 69, 73,
  255, 42, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80,
   81, 82, 83, 84, 85, 86, 87,255, 58, 83,255, 80,255, 73,255, 73, 80, 83,
  255, 75, 84,255, 67, 76, 80, 85,255, 58, 65,255, 67, 77, 78,255, 69, 79,
   85,255, 65, 69,255, 69, 82,255, 70, 71, 78,255, 69,255, 58, 83,255, 71,
   80,255, 66, 78,255, 65, 69, 73, 85,255, 82, 88,255, 69, 72, 85,255, 42,
   65, 66, 67, 70, 73, 77, 78, 80, 82, 83, 84, 86, 87,255, 65, 80, 84,255,
   65, 85,255, 72, 85,255, 70, 77, 83, 84, 87,255, 80, 85,255, 69, 85,255,
   65, 73, 77, 84, 86,255, 69, 73,255, 65, 73, 82, 83,255, 70, 71,255, 69,
  255, 65, 66, 67, 73, 78, 80, 82, 83,255, 83,255, 58, 83,255, 80,255, 73,
  255, 42, 73, 80, 83,255, 58,255, 65, 69,255, 79, 82, 84,255, 67, 76, 77,
   79, 84, 85,255, 83,255, 67,255, 51, 65, 68, 73, 77, 80, 81, 82, 83,255,
   65, 69, 81,255, 80, 85,255, 76, 78,255, 65, 85,255, 82, 89,255, 65,255,
   65, 68, 70, 74, 77, 78, 79, 83,255, 84,255, 65, 84,255, 69,255, 69, 82,
  255, 73,255, 69, 70, 84,255, 82,255, 72,255, 49, 79, 84,255, 68,255, 83,
  255, 73, 80,255, 67, 76,255, 83, 84, 85,255, 65, 79,255, 66, 86,255, 69,
   80,255, 65, 66, 67, 72, 77, 82, 84,255, 49, 84,255, 80, 82,255, 68, 71,
   78, 80, 82, 84,255, 67, 83,255, 65,255, 85,255, 79, 82,255, 83, 84,255,
   77,255, 71, 85,255
};
static const unsigned char ag_key_act[] = {
  0,7,5,5,4,7,4,7,5,5,5,5,5,5,4,5,5,4,3,7,4,5,4,5,4,7,3,4,6,4,7,7,4,5,5,
  2,5,5,5,5,5,4,3,0,3,4,2,4,5,2,5,5,7,4,5,4,5,4,2,6,6,7,2,5,6,5,5,6,7,6,
  2,6,2,5,6,6,5,4,3,3,4,3,3,3,4,7,7,4,2,4,5,2,4,7,7,4,7,5,4,7,5,4,2,2,2,
  2,4,7,7,7,7,4,7,7,7,4,7,5,4,2,7,4,7,7,4,5,7,4,7,2,4,7,5,4,7,2,4,7,7,4,
  0,7,4,7,5,2,7,5,4,5,5,4,7,2,4,7,5,5,4,7,7,4,2,2,7,7,4,7,7,5,4,2,4,7,7,
  7,4,7,7,4,7,3,2,4,7,7,2,4,7,7,4,7,7,7,2,7,7,7,7,7,4,2,7,4,5,7,4,7,7,4,
  0,3,4,2,6,4,7,5,4,7,7,2,2,2,4,7,7,4,7,7,4,7,7,2,7,7,7,2,7,7,7,4,5,5,4,
  2,7,7,7,4,7,7,4,5,3,2,2,2,2,2,2,2,2,2,2,7,2,2,2,2,5,2,2,2,2,2,7,4,0,3,
  4,2,4,2,4,3,3,2,4,5,7,4,2,7,7,7,4,0,7,4,7,2,7,4,7,7,7,4,7,3,4,7,2,4,7,
  7,7,4,2,4,0,3,4,7,6,4,7,5,4,7,7,2,2,4,7,7,4,2,7,7,4,5,2,7,7,7,2,2,7,2,
  2,2,2,7,7,4,7,7,7,4,7,7,4,7,7,4,7,7,2,2,7,4,7,7,4,7,7,4,2,7,2,7,7,4,7,
  7,4,7,7,7,2,4,7,7,4,2,4,7,7,7,7,7,7,2,7,4,7,4,0,3,4,2,4,2,4,5,3,3,2,4,
  3,4,7,7,4,7,7,7,4,7,7,2,7,2,7,4,3,4,7,4,7,7,7,7,7,7,7,7,7,4,7,7,5,4,7,
  7,4,5,5,4,7,2,4,5,5,4,2,4,2,7,7,2,2,7,7,7,4,7,4,7,7,4,2,4,7,2,4,7,4,7,
  7,7,4,7,4,7,4,5,7,7,4,7,4,7,4,7,7,4,7,7,4,7,2,7,4,7,7,4,2,7,4,7,7,4,7,
  7,7,7,7,2,7,4,5,7,4,7,7,4,7,7,7,7,7,7,4,5,5,4,2,4,2,4,7,7,4,7,5,4,2,4,
  2,7,4
};
static const unsigned short ag_key_parm[] = {
    0, 54, 46, 18,  0, 56,  0, 58, 28, 10, 12,  8,  0, 30,  0, 44,  4,  0,
  253, 52,  0, 36,  0, 26,  0, 68,251,  0,  2,  0, 62, 60,  0, 32, 42,  0,
   16, 20, 38, 22, 40,  0,169,246,247,  0,  0,  0, 34,  0, 24, 48, 66,  0,
   50,  0, 14,  0,  0,172,162,  6,  0,168,160,174,182,158, 64,178,  0,170,
    0,166,180,164,176,  0,278,266,  0,278,250,266,  0,190,248,  0,  0,  0,
   54,  0,  0,276,120,  0, 78,218,  0, 74,226,  0,  0,  0,  0,  0,  0,106,
  102,130, 56,  0, 58,244,132,  0,258,234,  0,  0,242,  0,296,196,  0,208,
  294,  0,214,  0,  0,240,236,  0,266,  0,  0,280,118,  0,253, 72,  0,274,
  246,  0, 52,142,  0,224,222,  0,212,  0,  0,126,216,220,  0, 82,144,  0,
    0,  0,200, 80,  0,268, 64,232,  0,  0,  0,230,282,156,  0,260,192,  0,
   68,251,  0,  0,250,140,  0,  0, 62,286,  0,256,128,194,  0, 60,262,270,
  284,254,  0,  0,124,  0,228,272,  0,134,278,  0,246,247,  0,  0,108,  0,
   66,198,  0,210,114,  0,  0,  0,  0,252, 70,  0,292,154,  0,184,112,  0,
  206,264,116,  0,136,122,202,  0,288,290,  0,  0,110,138,238,  0,104, 76,
    0,186,289,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,146,  0,  0,  0,  0,
  188,  0,  0,  0,  0,  0,204,  0,246,247,  0,  0,  0,  0,  0,253,251,  0,
    0, 54,248,  0,  0,276, 78, 74,  0,253, 72,  0,274,  0, 52,  0, 82,200,
   80,  0, 68,251,  0,250,  0,  0, 62, 60,270,  0,  0,  0,246,247,  0,278,
  108,  0, 66,198,  0,210,272,  0,  0,  0,252, 70,  0,  0,206,202,  0,186,
    0, 56, 58,208,  0,  0, 64,  0,  0,  0,  0, 76,204,  0,248,250,252,  0,
  210,198,  0,206,202,  0,208,200,  0,  0,204,  0, 78, 74,  0, 82, 80,  0,
    0, 72,  0, 70, 76,  0,272,278,  0,276,274,270,  0,  0, 62, 60,  0,  0,
    0, 54, 56, 58, 52, 64, 68,  0, 66,  0,108,  0,246,247,  0,  0,  0,  0,
    0,186,253,251,  0,  0,289,  0,126,144,  0,154,136,122,  0,132,146,  0,
  156,  0,138,  0,169,  0,244,  0,100, 94, 96, 88, 92, 84, 90, 98, 86,  0,
  190,196,188,  0,218,226,  0,224,222,  0,212,  0,  0,216,220,  0,  0,  0,
    0,234,214,  0,  0,232,230,228,  0,184,  0,256,254,  0,  0,  0,196,  0,
    0,246,  0,296,294,292,  0,286,  0,280,  0,148,152,150,  0,242,  0,134,
    0,142,140,  0,112,116,  0,114,  0,110,  0,106,102,  0,  0,104,  0,128,
  124,  0,120,130,132,118,126,  0,122,  0,148,150,  0,192,194,  0,258,266,
  268,260,262,264,  0,288,290,  0,  0,  0,  0,  0,282,284,  0,240,236,  0,
    0,  0,  0,238,  0
};
static const unsigned short ag_key_jmp[] = {
    0,  0,  0,  0,  0,  2,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
   11, 13,  0,  0,  0,  0,  0, 24, 27,  0, 25,  0, 30, 33,  0,  0,  0, 30,
    0,  0,  0,  0,  0,  0, 39,  0, 43,  0, 42,  0,  0, 46,  0,  0, 45,  0,
    0,  0,  0,  0,  1,  5,  7,  9, 15,  0, 18,  0,  0, 21, 18, 23, 28, 33,
   48,  0, 54, 56,  0,  0, 53, 58,  0, 67, 72, 79,  0, 90, 92,  0, 85,  0,
    0, 88,  0, 94, 97,  0,100,  0,  0,109,  0,  0, 90, 93, 96, 99,  0,112,
  115,122,127,  0,129,134,136,  0,139,  0,  0,116,148,  0,155,164,  0,  0,
  172,  0,170,125,  0,183,  0,  0,178,131,  0,185,192,  0,  0,200,  0,197,
    0,140,203,  0,  0,  0,  0,  0,208,149,  0,212,  0,  0,  0,215,220,  0,
  155,159,224,226,  0,234,242,  0,  0,167,  0,246,248,255,  0,274,280,  0,
  268,271,177,  0,258,264,180,  0,298,300,  0,282,286,292,188,306,312,318,
  322,328,  0,191,337,  0,  0,346,  0,351,355,  0,  0,358,  0,207,210,  0,
  360,  0,  0,341,343,204,213,216,  0,371,379,  0,391,395,  0,367,369,225,
  381,383,389,228,405,413,415,  0,  0,  0,  0,242,417,419,422,  0,424,430,
    0,  0, 88,102,107,112,119,122,128,134,137,143,152,210,162,171,173,184,
    0,201,219,231,245,250,434,  0,  0,445,  0,278,  0,281,  0,437,440,283,
    0,  0,447,  0,289,451,455,465,  0,  0,484,  0,481,297,487,  0,492,498,
  500,  0,520,523,  0,514,308,  0,526,529,535,  0,314,  0,  0,551,  0,547,
  320,  0,553,  0,  0,539,541,323,326,  0,560,568,  0,334,570,572,  0,  0,
  292,469,472,478,300,304,508,311,318,329,337,574,579,  0,582,588,595,  0,
  611,613,  0,615,617,  0,605,608,360,363,619,  0,622,632,  0,641,647,  0,
  372,636,375,655,659,  0,679,685,  0,664,669,673,384,  0,719,722,  0,392,
    0,690,693,696,702,708,714,395,728,  0,737,  0,  0,748,  0,408,  0,411,
    0,  0,740,743,413,  0,750,  0,758,762,  0,771,782,790,  0,752,756,422,
  767,425,792,  0,796,  0,803,  0,806,818,829,835,839,844,849,853,859,  0,
  862,868,  0,  0,875,877,  0,  0,  0,  0,885,457,  0,  0,  0,  0,463,  0,
  454,879,882,460,466,887,890,893,  0,896,  0,906,910,  0,479,  0,899,482,
    0,919,  0,921,931,939,  0,945,  0,954,  0,  0,962,964,  0,968,  0,976,
    0,983,985,  0,994,996,  0,990,508,998,  0,1001,1004,  0,515,1011,  0,
  1044,1051,  0,1018,1023,1029,1033,1039,521,1055,  0,  0,1058,  0,1062,
  1067,  0,1075,1086,1092,1102,1111,1119,  0,  0,  0,  0,545,  0,548,  0,
  1126,1134,  0,1142,  0,  0,555,  0,558,1144,  0
};
static const unsigned short ag_key_index[] = {
   58,  0, 78, 81, 81,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,253,  0,285,285,  0,341,  0,356,  0,
    0,285,285,  0,  0,  0,366,378,387,  0,  0,  0,  0,397,  0,406,  0,  0,
  415,366,366,285,  0,  0,420,  0,  0,  0,  0,  0,429,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 81,
   81, 78,  0,  0,285,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,420,420,  0,420,  0,  0,  0,  0,  0,429,429,  0,  0,  0,
    0,436,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,285,285,438,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  440,  0,  0,  0,397,  0,  0,  0,  0,406,450,  0,  0,285,468,  0,477,  0,
    0,397,420,  0,420,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,429,  0,  0,  0,  0,  0,  0,  0,484,  0,  0,487,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,285,438,438,  0,  0,489,  0,  0,493,  0,  0,  0,  0,
    0,  0,  0,495,  0,  0,  0,  0,397,  0,  0,  0,  0,  0,406,450,450,  0,
  285,  0,  0,  0,477,477,  0,420,  0,  0,  0,  0,  0,  0,  0,497,  0,  0,
    0,  0,  0,  0,  0,  0,484,484,487,487,  0,  0,  0,  0,  0,438,  0,  0,
  489,489,  0,493,493,  0,  0,  0,501,  0,  0,  0,495,495,  0,  0,397,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,450,  0,  0,  0,  0,477,  0,  0,  0,
    0,503,397,  0,  0,505,511,  0,  0,  0,  0,  0,  0,  0,484,  0,  0,487,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,489,  0,493,  0,  0,501,501,518,
    0,  0,495,  0,  0,524,  0,  0,  0,  0,  0,  0,  0,  0,  0,503,397,  0,
    0,505,511,  0,  0,  0,  0,  0,  0,  0,  0,532,  0,  0,  0,  0,  0,  0,
  501,518,518,  0,  0,  0,524,  0,535,  0,  0,  0,  0,  0,  0,  0,  0,538,
    0,  0,  0,  0,  0,  0,550,  0,  0,  0,  0,  0,  0,  0,  0,518,552,511,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,535,  0,  0,  0,  0,  0,  0,
    0,  0,538,  0,  0,  0,  0,  0,  0,  0,  0,  0,550,  0,  0,  0,  0,  0,
    0,  0,  0,552,511,  0,  0,  0,  0,  0,  0,366,  0,  0,560,  0,  0,  0,
    0,  0,  0,  0,  0,  0,503,  0,  0,420,366,  0,  0,  0,  0,  0,  0,  0,
    0,  0,503,  0,420,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};
static const unsigned char ag_key_ends[] = {
75,0, 69,0, 78,67,69,76,0, 84,0, 58,0, 86,73,84,69,0, 
79,84,73,70,89,0, 67,75,0, 83,58,0, 69,82,0, 73,83,84,69,82,0, 
50,46,48,0, 58,0, 66,83,67,82,73,66,69,0, 79,83,84,58,0, 
83,69,82,73,78,70,79,58,0, 79,83,84,58,0, 86,45,65,66,83,58,0, 
83,69,82,73,78,70,79,58,0, 58,0, 78,0, 69,0, 82,84,0, 65,83,0, 
76,73,67,65,84,73,79,78,0, 73,79,0, 83,69,0, 85,78,68,65,82,89,0, 
65,78,67,72,0, 69,0, 78,67,69,76,0, 68,0, 77,80,0, 
67,84,73,86,65,84,69,68,0, 82,65,84,73,79,78,0, 
82,76,89,45,79,78,76,89,0, 80,73,82,69,83,0, 66,0, 
77,45,84,65,71,0, 86,69,85,80,0, 84,0, 78,68,76,73,78,71,0, 
68,68,69,78,0, 79,78,0, 71,69,0, 86,73,84,69,0, 78,0, 82,0, 
68,82,0, 83,65,71,69,0, 72,79,68,0, 78,0, 76,84,73,80,65,82,84,0, 
69,83,79,85,82,67,69,0, 73,70,89,0, 84,0, 84,73,79,78,65,76,0, 
73,71,0, 78,68,73,78,71,0, 79,78,69,0, 67,75,0, 83,58,0, 
65,84,73,79,78,0, 89,0, 83,79,78,0, 69,73,86,69,68,0, 
73,82,69,67,84,0, 82,0, 69,83,72,69,82,0, 73,83,84,69,82,0, 
69,67,84,69,68,0, 68,69,82,0, 85,73,82,69,68,0, 
82,89,45,65,70,84,69,82,0, 79,82,84,0, 84,0, 84,80,0, 
83,73,79,78,0, 79,77,80,0, 65,76,0, 58,0, 83,67,82,73,66,69,0, 
71,0, 80,0, 77,73,78,65,84,69,68,0, 84,0, 85,0, 
77,69,79,85,84,0, 83,0, 84,65,71,0, 69,78,73,90,69,68,45,66,89,0, 
65,78,83,80,79,82,84,0, 76,0, 69,0, 80,0, 69,82,0, 67,0, 
82,83,73,79,78,0, 68,69,79,0, 69,68,0, 77,58,0, 82,69,83,58,0, 
58,0, 73,86,69,0, 69,82,84,0, 80,76,73,67,65,84,73,79,78,0, 
68,73,79,0, 89,69,0, 65,78,67,69,76,0, 82,73,0, 79,78,0, 
71,69,0, 86,73,84,69,0, 83,83,65,71,69,0, 78,0, 
76,84,73,80,65,82,84,0, 79,84,73,70,89,0, 78,68,73,78,71,0, 
67,75,0, 83,58,0, 69,82,0, 73,83,84,69,82,0, 68,69,82,0, 84,0, 
83,83,73,79,78,0, 78,65,76,0, 58,0, 83,67,82,73,66,69,0, 
77,73,78,65,84,69,68,0, 84,0, 85,0, 69,0, 73,68,69,79,0, 
69,68,0, 67,84,73,86,69,0, 69,78,68,73,78,71,0, 
69,82,77,73,78,65,84,69,68,0, 82,73,0, 79,78,0, 84,0, 78,0, 
85,0, 69,0, 69,68,0, 80,76,73,67,65,84,73,79,78,0, 68,73,79,0, 
77,65,71,69,0, 83,83,65,71,69,0, 76,84,73,80,65,82,84,0, 
69,88,84,0, 73,68,69,79,0, 76,69,82,84,0, 67,79,78,0, 
69,78,68,69,82,0, 83,83,73,79,78,0, 71,78,65,76,0, 67,75,0, 
89,69,0, 65,78,67,69,76,0, 78,86,73,84,69,0, 79,84,73,70,89,0, 
82,65,67,75,0, 69,82,0, 73,83,84,69,82,0, 
85,66,83,67,82,73,66,69,0, 73,80,0, 77,58,0, 82,69,83,58,0, 58,0, 
58,0, 79,77,80,0, 82,0, 68,68,82,0, 84,72,79,68,0, 82,73,71,0, 
75,69,78,73,90,69,68,45,66,89,0, 65,78,83,80,79,82,84,0, 76,0, 
83,69,82,0, 73,80,47,50,46,48,0, 73,68,0, 
71,80,80,45,73,77,83,43,88,77,76,0, 76,84,69,82,78,65,84,73,86,69,0, 
73,71,69,83,84,0, 83,85,80,0, 73,88,69,68,0, 76,65,73,78,0, 
83,73,71,0, 70,67,56,50,50,0, 68,80,0, 67,84,73,79,78,0, 
88,80,73,82,69,83,0, 82,0, 71,0, 69,67,0, 69,66,0, 78,0, 
79,86,0, 67,84,0, 69,80,0, 65,71,0, 88,80,73,82,69,83,0, 
83,79,78,0, 82,89,45,65,70,84,69,82,0, 68,0, 
65,82,76,89,45,79,78,76,89,0, 82,79,77,45,84,65,71,0, 
79,45,84,65,71,0, 69,70,82,69,83,72,69,82,0, 
65,78,68,76,73,78,71,0, 78,0, 82,85,69,0, 85,82,65,84,73,79,78,0, 
73,71,67,79,77,80,0, 80,0, 72,79,78,69,0, 67,84,80,0, 80,0, 
83,0, 68,80,0, 83,69,0, 85,78,68,65,82,89,0, 69,82,83,73,79,78,0, 
76,73,65,83,0, 82,65,78,67,72,0, 79,77,80,0, 73,68,68,69,78,0, 
65,68,68,82,0, 67,69,73,86,69,68,0, 79,82,84,0, 84,76,0, 
82,85,69,0, 82,79,88,89,0, 69,68,73,82,69,67,84,0, 
69,65,67,84,73,86,65,84,69,68,0, 73,86,69,85,80,0, 
79,82,69,83,79,85,82,67,69,0, 82,79,66,65,84,73,79,78,0, 
69,74,69,67,84,69,68,0, 73,77,69,79,85,84,0, 
80,84,73,79,78,65,76,0, 69,81,85,73,82,69,68,0, 84,0, 84,67,0, 
};
#define AG_TCV(x) ag_tcv[(x)]
static const unsigned short ag_tcv[] = {
    5,525,525,525,525,525,525,525,525,511,526,525,525,526,525,525,525,525,
  525,525,525,525,525,525,525,525,525,525,525,525,525,525, 66,512, 90,522,
  523,512,331,512, 86,226,512,513, 68,514, 71, 84,378,381,515,515,515,515,
  515,515,515,515, 62, 80, 88, 75,358, 82, 77,516,516,516,516,516,516,517,
  517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,
  517,283,115,284,524,518,519,516,516,516,516,516,516,517,517,517,517,517,
  517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,520,524,520,
  512,525,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,
  524,521,521,524,524,524,524,524,521,524,524,524,524,524,524,524,524,524,
  524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,
  524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,
  524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,
  524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,
  524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,
  524,524,524,524
};
#ifndef SYNTAX_ERROR
#define SYNTAX_ERROR fprintf(stderr,"%s, line %d, column %d\n", \
  (PCB).error_message, (PCB).line, (PCB).column)
#endif
#ifndef FIRST_LINE
#define FIRST_LINE 1
#endif
#ifndef FIRST_COLUMN
#define FIRST_COLUMN 1
#endif
#ifndef PARSER_STACK_OVERFLOW
#define PARSER_STACK_OVERFLOW {fprintf(stderr, \
   "\nParser stack overflow, line %d, column %d\n",\
   (PCB).line, (PCB).column);}
#endif
#ifndef REDUCTION_TOKEN_ERROR
#define REDUCTION_TOKEN_ERROR {fprintf(stderr, \
    "\nReduction token error, line %d, column %d\n", \
    (PCB).line, (PCB).column);}
#endif
#ifndef INPUT_CODE
#define INPUT_CODE(T) (T)
#endif
typedef enum
  {ag_accept_key, ag_set_key, ag_jmp_key, ag_end_key, ag_no_match_key,
   ag_cf_accept_key, ag_cf_set_key, ag_cf_end_key} key_words;
static void ag_get_key_word(PCB_DECL, int ag_k) {
  int ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
  const  unsigned char *ag_p;
  int ag_ch;
  while (1) {
    switch (ag_key_act[ag_k]) {
    case ag_cf_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          int ag_k1 = ag_key_parm[ag_k];
          int ag_k2 = ag_key_pt[ag_k1];
          if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) goto ag_fail;
          (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1 + 1];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
      goto ag_fail;
    }
    case ag_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
    }
    case ag_no_match_key:
ag_fail:
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    case ag_cf_set_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      ag_k = ag_key_jmp[ag_k];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) break;
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      break;
    }
    case ag_set_key:
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
    case ag_jmp_key:
      ag_k = ag_key_jmp[ag_k];
      break;
    case ag_accept_key:
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
      return;
    case ag_cf_accept_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)])
        (PCB).la_ptr = (PCB).pointer + ag_save;
      else (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      return;
    }
    }
    ag_ch = CONVERT_CASE(*(PCB).la_ptr++);
    ag_p = &ag_key_ch[ag_k];
    while (*ag_p < ag_ch) ag_p++;
    if (*ag_p != ag_ch) {
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    }
    ag_k = (int) (ag_p - ag_key_ch);
  }
}
#ifndef AG_NEWLINE
#define AG_NEWLINE 10
#endif
#ifndef AG_RETURN
#define AG_RETURN 13
#endif
#ifndef AG_FORMFEED
#define AG_FORMFEED 12
#endif
#ifndef AG_TABCHAR
#define AG_TABCHAR 9
#endif
static void ag_track(PCB_DECL) {
  int ag_k = (int) ((PCB).la_ptr - (PCB).pointer);
  while (ag_k--) {
    switch (*(PCB).pointer++) {
    case AG_NEWLINE:
      (PCB).column = 1, (PCB).line++;
    case AG_RETURN:
    case AG_FORMFEED:
      break;
    case AG_TABCHAR:
      (PCB).column += (TAB_SPACING) - ((PCB).column - 1) % (TAB_SPACING);
      break;
    default:
      (PCB).column++;
    }
  }
}
static const int ag_rtt[] = {
  222,224,  0,222,224,  0,222,224,  0
};
static const unsigned short ag_tstt[] = {
519,518,517,516,515,514,513,512,381,378,354,353,352,351,350,349,348,347,346,
  345,344,343,342,253,251,247,246,169,126,125,124,123,122,121,120,119,118,
  71,56,52,50,48,46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,
  8,6,2,0,1,54,55,58,59,60,61,91,93,117,165,241,242,243,244,248,252,340,
  341,
519,518,517,516,515,514,513,512,381,378,71,0,
278,266,0,245,254,257,263,277,
278,266,250,0,245,249,254,257,263,277,
278,266,250,0,245,249,254,257,263,277,
511,66,62,0,63,64,65,73,
66,0,65,166,
5,0,
5,0,
5,0,
5,0,
62,0,3,
5,0,
5,0,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
62,0,3,
517,516,515,381,378,283,0,192,203,265,279,
523,522,518,517,516,515,514,513,512,381,378,331,226,86,84,82,80,77,75,71,68,
  0,76,264,267,269,271,
511,358,82,80,66,5,0,79,255,296,
511,358,82,80,66,5,0,79,255,296,
517,516,515,514,513,381,378,71,0,229,230,233,
517,516,515,514,513,381,378,71,0,229,230,233,
511,66,0,
62,0,78,
517,516,515,514,513,511,381,378,253,251,247,246,71,66,62,0,
517,516,515,514,513,381,378,253,251,247,246,71,0,227,228,229,230,233,241,
  242,243,244,248,252,
515,381,378,66,0,65,167,170,
524,523,522,521,520,519,518,517,516,515,514,513,512,511,488,487,486,485,484,
  467,466,465,401,400,399,398,397,396,395,381,378,369,358,331,284,283,253,
  251,247,246,226,185,148,147,146,145,144,143,142,126,125,124,123,122,121,
  120,119,118,115,90,88,86,84,82,71,66,62,5,0,63,64,73,
517,516,515,514,513,381,378,71,0,57,229,230,233,
519,518,517,516,515,514,513,512,467,466,465,381,378,71,0,53,91,93,462,463,
519,518,517,516,515,514,513,512,381,378,0,51,100,101,102,454,456,461,
519,518,517,516,515,514,513,512,381,378,0,49,100,101,102,453,454,456,
519,518,517,516,515,514,513,512,381,378,253,251,247,246,90,88,71,0,47,87,
  109,234,235,244,248,252,258,259,260,261,262,356,359,440,441,
519,518,517,516,515,514,513,512,381,378,253,251,247,246,90,88,71,0,45,87,
  109,234,235,244,248,252,258,259,260,261,262,356,359,438,
521,520,519,518,517,516,515,514,513,512,381,378,358,284,283,226,115,90,88,
  86,84,82,71,62,0,43,94,96,132,501,
515,381,378,0,41,130,389,500,
515,381,378,0,39,130,389,493,
515,401,400,399,398,397,396,395,381,378,0,37,130,389,390,394,426,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,148,147,146,145,
  144,143,142,71,0,35,97,99,133,134,
519,518,517,516,515,514,513,512,488,487,486,485,484,381,378,71,0,33,91,93,
  481,482,
519,518,517,516,515,514,513,512,381,378,71,0,31,91,93,435,436,
519,518,517,516,515,514,513,512,381,378,71,5,0,29,91,93,435,436,437,
515,381,378,0,27,130,432,433,
515,381,378,0,25,130,433,434,
519,518,517,516,515,514,513,512,381,378,126,125,124,123,122,121,120,119,118,
  71,0,23,91,93,117,175,
519,518,517,516,515,514,513,512,381,378,90,88,71,0,21,87,109,235,356,359,
  424,425,
519,518,517,516,515,514,513,512,381,378,185,71,0,19,91,93,176,177,178,182,
515,381,378,0,17,130,131,
521,520,519,518,517,516,515,514,513,512,381,378,358,284,283,226,115,90,88,
  86,84,82,71,62,0,15,94,96,132,
519,518,517,516,515,514,513,512,381,378,369,253,251,247,246,90,88,71,0,13,
  87,109,234,235,244,248,252,258,259,260,261,262,356,359,366,367,368,370,
515,401,400,399,398,397,396,395,381,378,0,11,390,391,392,394,402,
515,401,400,399,398,397,396,395,381,378,0,9,130,386,389,390,394,
519,518,517,516,515,514,513,512,381,378,253,251,247,246,90,88,71,0,7,87,109,
  234,235,244,248,252,258,259,260,261,262,355,356,359,
515,381,378,0,4,127,128,130,
518,517,516,515,514,381,378,71,0,282,
516,515,381,378,289,0,220,287,288,291,
62,0,78,
517,516,515,381,378,283,0,192,203,265,279,
523,522,518,517,516,515,514,513,512,381,378,331,226,86,84,82,80,75,71,68,0,
62,0,78,
77,0,76,
523,518,517,516,515,514,513,512,511,381,378,331,322,321,315,314,309,308,284,
  283,226,217,213,207,86,84,71,66,62,0,63,64,73,
80,0,79,
511,358,82,66,5,0,81,256,329,
511,358,82,66,5,0,81,256,329,
517,516,515,514,513,381,378,71,0,
62,0,78,
525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,331,
  284,283,226,115,90,88,86,84,82,80,77,75,71,68,66,62,5,0,63,64,73,
66,0,65,166,
515,381,378,0,
66,0,65,
5,0,
511,80,66,5,0,63,64,73,
5,0,
519,518,517,516,515,514,513,512,381,378,0,101,
71,0,70,
511,68,66,5,0,63,64,73,
68,0,69,
5,0,
511,80,66,5,0,63,64,73,
5,0,
519,518,517,516,515,514,513,512,511,381,378,88,71,66,62,0,360,361,362,
525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,331,
  284,283,226,115,90,88,86,84,82,80,77,75,71,68,66,62,5,0,110,111,112,113,
62,0,78,
278,266,250,0,249,254,257,263,277,
278,266,250,0,249,254,257,263,277,
278,266,0,254,257,263,277,
519,518,517,516,515,514,513,512,381,378,71,0,
511,88,66,62,0,63,64,73,
517,516,515,514,513,511,381,378,253,251,247,246,71,66,0,63,64,73,
88,0,87,
511,80,66,5,0,63,64,73,
80,5,0,79,442,443,
5,0,
511,80,66,5,0,63,64,73,
80,5,0,79,162,439,
5,0,
521,520,519,518,517,516,515,514,513,512,381,378,358,284,283,226,115,90,88,
  86,84,82,71,62,0,
77,0,76,
511,80,66,5,0,63,64,73,
5,0,
515,381,378,0,
511,80,66,5,0,63,64,73,
5,0,
511,80,66,5,0,63,64,73,
5,0,
511,68,66,0,63,64,73,
511,86,80,66,5,0,63,64,73,
511,86,80,66,5,0,63,64,73,
5,0,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,71,0,
84,0,83,
5,0,
511,80,66,5,0,63,64,73,
5,0,
511,68,66,5,0,63,64,73,
68,0,69,
5,0,
68,0,69,
5,0,
515,381,378,0,
511,66,5,0,63,64,73,
5,0,
511,66,0,63,73,
511,66,5,0,63,64,73,
5,0,
511,68,66,5,0,63,64,73,
68,0,69,
5,0,
88,0,87,
511,80,68,66,5,0,63,64,73,
68,0,69,
5,0,
511,84,66,0,63,64,73,
511,66,0,63,73,
68,0,69,
5,0,
515,381,378,0,
511,66,5,0,63,64,73,
5,0,
511,66,5,0,63,64,73,
5,0,
80,0,79,371,
511,80,68,66,5,0,63,64,73,
68,0,69,
5,0,
515,381,378,0,
511,66,0,63,73,
511,66,0,63,73,
511,66,5,0,63,64,73,
5,0,
511,66,5,0,63,64,73,
5,0,
80,0,79,357,
511,80,66,5,0,63,64,73,
5,0,
515,381,378,0,
511,66,0,63,73,
511,66,5,0,63,64,73,
5,0,
518,517,516,515,514,381,378,71,0,
516,515,381,378,0,
511,289,284,80,71,68,66,62,5,0,292,293,294,
516,515,511,381,378,284,80,71,68,66,5,0,288,290,291,
289,0,
71,0,
284,0,
515,381,378,0,130,191,
523,518,517,516,515,514,513,512,381,378,331,226,86,77,75,71,68,0,268,272,
  274,275,276,
517,516,515,381,378,283,0,192,203,265,279,
523,518,517,516,515,514,513,512,381,378,331,322,321,315,314,309,308,284,283,
  226,217,213,207,86,84,71,62,0,297,298,299,300,301,302,303,304,305,306,
  307,323,
523,518,517,516,515,514,513,512,511,381,378,331,322,321,315,314,309,308,284,
  283,226,217,213,207,86,84,71,66,62,0,63,64,73,
523,518,517,516,515,514,513,512,381,378,284,283,226,86,84,82,71,62,0,330,
  332,335,
331,0,
523,522,518,517,516,515,514,513,512,511,381,378,331,284,283,226,86,84,82,80,
  77,75,71,68,66,62,0,63,64,73,
525,524,523,522,521,520,519,518,517,516,515,514,513,512,381,378,358,331,284,
  283,226,115,90,88,86,84,82,80,77,75,71,68,62,0,103,
169,66,0,65,165,
515,381,378,0,
524,523,522,521,520,519,518,517,516,515,514,513,512,381,378,358,331,284,283,
  226,115,90,88,86,84,82,80,77,75,71,68,66,62,5,0,168,172,173,174,
80,0,79,464,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,457,
519,518,517,516,515,514,513,512,511,381,378,66,0,63,64,73,
80,0,79,455,
511,66,0,360,
525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,331,
  284,283,226,115,90,88,86,84,82,80,77,75,71,68,66,62,5,0,
525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,331,
  284,283,226,115,88,86,84,82,80,77,75,71,68,66,62,5,0,110,111,
90,0,
523,522,518,517,516,515,514,513,512,381,378,331,284,283,226,86,84,77,75,71,
  62,0,238,240,
519,518,517,516,515,514,513,512,381,378,90,71,0,109,234,235,262,359,
511,82,80,68,66,5,0,63,64,73,
511,82,80,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,90,71,0,109,234,235,262,359,
511,82,80,68,66,5,0,63,64,73,
511,82,80,68,66,5,0,63,64,73,
511,82,80,68,66,5,0,63,64,73,
511,82,80,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,88,71,66,62,0,360,361,362,
517,516,515,514,513,381,378,253,251,247,246,71,0,228,229,230,233,241,242,
  243,244,248,252,
517,516,515,514,513,511,381,378,253,251,247,246,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,446,381,378,71,66,0,63,64,73,
80,0,79,
80,5,0,79,162,439,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
80,0,79,
521,520,519,518,517,516,515,514,513,512,381,378,358,284,283,226,115,90,88,
  86,84,82,71,62,0,94,96,
80,0,79,502,
80,5,0,79,162,439,
80,0,79,162,494,
68,0,67,
86,80,5,0,85,221,427,428,
86,80,5,0,85,221,427,428,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,157,156,155,154,
  153,152,151,150,149,71,0,97,99,135,
80,0,79,483,489,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
515,381,378,0,128,130,
519,518,517,516,515,514,513,512,511,381,378,126,125,124,123,122,121,120,119,
  118,71,66,0,63,64,73,
80,0,79,162,
519,518,517,516,515,514,513,512,511,381,378,90,88,71,66,0,63,64,73,
84,0,83,
517,516,515,381,378,283,0,179,192,203,279,
519,518,517,516,515,514,513,512,511,381,378,185,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,387,382,381,378,376,71,66,0,63,64,73,
80,0,79,
80,0,79,371,
519,518,517,516,515,514,513,512,511,381,378,253,251,247,246,90,88,71,66,0,
  63,64,73,
416,415,414,413,412,411,410,409,408,407,406,405,0,403,
515,381,378,0,393,417,
519,518,517,516,515,514,513,512,511,381,378,364,71,66,0,63,64,73,
80,0,79,
80,0,79,357,
519,518,517,516,515,514,513,512,381,378,126,125,124,123,122,121,120,119,118,
  71,0,91,93,117,
516,515,381,378,0,
516,515,381,378,0,291,
62,0,292,
516,515,511,381,378,284,80,71,68,66,5,0,288,290,291,
515,381,378,0,285,286,
515,381,378,0,
523,518,517,516,515,514,513,512,381,378,331,226,86,75,71,68,0,274,
523,518,517,516,515,514,513,512,511,381,378,358,331,284,283,226,86,84,82,80,
  75,71,66,62,5,0,326,327,328,
75,0,74,324,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,358,82,80,75,71,66,5,0,74,319,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
523,518,517,516,515,514,513,512,381,378,331,322,321,315,314,309,308,284,283,
  226,217,213,207,86,84,71,62,0,297,298,299,300,301,302,303,304,305,306,
  307,323,
523,518,517,516,515,514,513,512,381,378,284,283,226,86,84,82,71,62,0,
75,0,
523,518,517,516,515,514,513,512,381,378,284,283,226,86,84,82,71,62,0,330,
  332,335,
523,522,518,517,516,515,514,513,512,381,378,331,284,283,226,86,84,82,80,77,
  75,71,68,62,0,231,237,
525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,331,
  284,283,226,115,90,88,86,84,82,80,77,75,71,68,66,62,5,0,106,107,108,
511,66,5,0,63,64,73,
524,523,522,521,520,519,518,517,516,515,514,513,512,381,378,358,331,284,283,
  226,115,90,88,86,84,82,80,77,75,71,68,66,62,0,172,
519,518,517,516,515,514,513,512,511,473,472,387,381,378,71,66,0,63,64,73,
80,0,79,
519,518,517,516,515,514,513,512,381,378,0,100,101,102,454,456,
519,518,517,516,515,514,513,512,511,460,381,378,71,66,0,63,64,73,
80,0,79,
523,522,518,517,516,515,514,513,512,381,378,331,284,283,226,86,84,77,75,71,
  62,0,
511,80,68,66,5,0,63,64,73,
82,80,68,5,0,81,256,329,
82,80,68,5,0,81,256,329,
82,80,68,5,0,81,256,329,
82,80,68,5,0,81,256,329,
82,80,68,5,0,81,256,329,
82,80,68,5,0,81,256,329,
511,358,66,0,63,64,73,
517,516,515,514,513,381,378,253,251,247,246,71,0,228,229,230,233,241,242,
  243,244,248,252,
519,518,517,516,515,514,513,512,446,381,378,71,0,91,93,202,444,445,
519,518,517,516,515,514,513,512,511,446,381,378,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,163,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,509,508,507,381,378,71,66,0,63,64,73,
80,0,79,
80,0,79,494,
519,518,517,516,515,514,513,512,511,497,381,378,71,66,0,63,64,73,
511,80,66,5,0,63,64,73,
515,511,381,378,66,0,63,64,73,
526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,
  331,284,283,226,115,90,88,86,84,82,80,77,75,71,68,66,62,0,222,223,
511,80,66,5,0,63,64,73,
80,0,79,429,
80,0,79,429,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,511,490,381,378,71,66,0,63,64,73,
511,80,66,5,0,63,64,73,
80,0,79,489,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,435,
511,66,0,63,73,
519,518,517,516,515,514,513,512,381,378,126,125,124,123,122,121,120,119,118,
  71,0,91,93,117,
80,0,79,
519,518,517,516,515,514,513,512,381,378,90,88,71,0,87,109,235,356,359,425,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
511,80,68,66,62,5,0,63,64,73,
80,68,5,0,180,
519,518,517,516,515,514,513,512,381,378,185,71,0,91,93,177,178,182,
519,518,517,516,515,514,513,512,387,382,381,378,376,71,0,91,93,202,372,373,
  374,375,
519,518,517,516,515,514,513,512,511,387,382,381,378,376,71,66,0,63,64,73,
80,0,79,
519,518,517,516,515,514,513,512,381,378,253,251,247,246,90,88,71,0,87,109,
  234,235,244,248,252,258,259,260,261,262,356,359,370,
511,66,0,63,73,
515,381,378,0,
62,0,78,
519,518,517,516,515,514,513,512,381,378,364,71,0,91,93,202,363,365,
519,518,517,516,515,514,513,512,511,381,378,364,71,66,0,63,64,73,
80,0,79,
516,515,381,378,0,
515,381,378,0,
71,0,
523,518,517,516,515,514,513,512,381,378,331,284,283,226,86,84,71,62,0,326,
523,518,517,516,515,514,513,512,511,381,378,331,284,283,226,86,84,71,66,62,
  0,63,64,73,
75,0,74,
75,0,74,
519,518,517,516,515,514,513,512,511,381,378,358,82,80,71,66,5,0,91,93,320,
318,317,316,0,
75,0,74,
75,0,74,
75,0,74,
75,0,74,
75,0,74,
523,518,517,516,515,514,513,512,511,381,378,358,331,284,283,226,86,84,82,80,
  77,71,68,66,62,5,0,333,337,338,339,
523,522,518,517,516,515,514,513,512,381,378,331,284,283,226,86,84,82,80,77,
  75,71,68,62,0,
525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,331,
  284,283,226,115,90,88,86,84,82,80,77,75,71,68,66,62,0,106,
519,518,517,516,515,514,513,512,473,472,387,381,378,71,0,91,93,202,468,469,
  470,471,
519,518,517,516,515,514,513,512,511,473,472,387,381,378,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,460,381,378,71,0,91,93,202,458,459,
519,518,517,516,515,514,513,512,511,460,381,378,71,66,0,63,64,73,
358,0,
511,358,66,0,63,64,73,
511,80,75,68,66,5,0,63,64,73,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,446,381,378,71,0,91,93,202,444,445,
511,80,75,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,163,
519,518,517,516,515,514,513,512,509,508,507,381,378,71,0,91,93,201,202,503,
  504,505,506,
519,518,517,516,515,514,513,512,511,509,508,507,381,378,71,66,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,511,497,381,378,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,497,381,378,71,0,91,93,163,495,
80,5,0,79,162,439,
515,381,378,0,392,402,
526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,381,378,358,
  331,284,283,226,115,90,88,86,84,82,80,77,75,71,68,66,62,0,222,224,
519,518,517,516,515,514,513,512,511,431,381,378,71,66,0,63,64,73,
80,0,79,
80,0,79,
80,5,0,79,136,137,
519,518,517,516,515,514,513,512,490,381,378,71,0,91,93,163,
519,518,517,516,515,514,513,512,511,490,381,378,71,66,0,63,64,73,
511,80,66,5,0,63,64,73,
511,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,126,125,124,123,122,121,120,119,118,
  71,0,91,93,117,
511,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,183,
62,0,78,
80,0,79,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,387,382,381,378,376,71,0,91,93,202,372,373,
  374,375,
515,381,378,0,404,
515,381,378,0,418,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,364,71,0,91,93,202,363,365,
515,381,378,0,
515,381,378,0,286,
523,518,517,516,515,514,513,512,381,378,331,284,283,226,86,84,71,62,0,323,
517,516,515,511,381,378,283,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,219,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,126,125,124,123,122,121,120,119,
  118,71,66,0,63,64,73,
517,516,515,511,381,378,283,66,0,63,64,73,
515,511,381,378,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,313,312,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,190,189,188,187,71,66,0,63,64,
  73,
523,518,517,516,515,514,513,512,381,378,284,283,226,86,84,82,77,71,62,0,337,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
511,80,66,5,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,473,472,387,381,378,71,0,91,93,202,468,469,
  470,471,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,460,381,378,71,0,91,93,202,458,459,
358,0,
75,0,74,
75,0,74,
75,0,74,164,
519,518,517,516,515,514,513,512,511,381,378,80,75,71,66,5,0,74,319,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
511,80,66,5,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,509,508,507,381,378,71,0,91,93,201,202,503,
  504,505,506,
80,5,0,79,162,439,
519,518,517,516,515,514,513,512,497,381,378,71,0,91,93,163,495,
511,75,66,0,63,64,73,
511,66,0,63,73,
519,518,517,516,515,514,513,512,431,381,378,71,0,91,93,163,430,
519,518,517,516,515,514,513,512,511,431,381,378,71,66,0,63,64,73,
524,523,522,521,519,518,517,516,515,514,513,512,511,381,378,331,160,159,158,
  71,66,0,63,64,73,
80,0,79,
511,75,66,0,63,64,73,
519,518,517,516,515,514,513,512,490,381,378,71,0,91,93,163,
511,84,66,0,63,64,73,
515,511,381,378,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,217,216,214,213,211,207,205,204,
  71,66,0,63,64,73,
75,0,74,
75,0,74,
75,0,74,
515,381,378,0,
515,381,378,0,
62,0,78,
75,0,74,
71,0,
517,516,515,381,378,283,0,192,203,279,
519,518,517,516,515,514,513,512,381,378,219,71,0,91,93,218,
519,518,517,516,515,514,513,512,381,378,126,125,124,123,122,121,120,119,118,
  71,0,91,93,117,
517,516,515,381,378,283,0,192,203,279,
515,381,378,0,208,
519,518,517,516,515,514,513,512,381,378,313,312,71,0,91,93,310,311,
519,518,517,516,515,514,513,512,381,378,190,189,188,187,71,0,91,93,186,
75,0,74,
75,0,74,
75,0,74,
75,0,74,
519,518,517,516,515,514,513,512,511,381,378,283,90,71,66,0,63,64,73,
511,90,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,90,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,80,71,66,5,0,91,93,320,
317,316,0,
75,0,74,
75,0,74,
75,0,74,
515,381,378,0,393,417,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,431,381,378,71,0,91,93,163,430,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,160,159,158,71,
  0,97,99,138,139,140,141,
524,523,522,521,519,518,517,516,515,514,513,512,511,381,378,331,160,159,158,
  71,66,0,63,64,73,
75,0,74,
84,0,83,
515,381,378,0,130,191,
519,518,517,516,515,514,513,512,381,378,217,216,214,213,211,207,205,204,71,
  0,91,93,181,193,194,195,196,197,198,199,200,201,202,206,209,212,
515,511,381,378,90,66,0,63,64,73,
511,385,384,66,0,63,64,73,
511,381,378,66,0,63,64,73,
515,381,378,0,
515,381,378,0,419,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
515,381,378,0,286,
515,381,378,0,
515,511,381,378,66,0,63,64,73,
515,511,381,378,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,480,479,478,477,476,475,381,378,71,66,0,
  63,64,73,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,283,90,71,0,91,93,109,203,
90,0,447,
519,518,517,516,515,514,513,512,381,378,90,71,0,91,93,109,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
511,499,498,66,0,63,64,73,
75,0,74,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
511,75,66,0,63,64,73,
511,80,66,5,0,63,64,73,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,160,159,158,71,
  0,97,99,138,139,140,141,
519,518,517,516,515,514,513,512,511,492,491,381,378,71,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,190,189,188,187,71,66,0,63,64,
  73,
511,80,68,66,5,0,63,64,73,
511,80,75,68,66,5,0,63,64,73,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
80,75,68,5,0,74,210,
511,75,66,0,63,64,73,
511,75,66,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
515,381,378,90,0,89,130,388,389,
385,384,0,383,
381,378,0,377,
515,381,378,0,
515,381,378,0,
511,66,0,63,73,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,
515,381,378,0,
515,381,378,0,130,389,
515,381,378,0,130,389,
519,518,517,516,515,514,513,512,480,479,478,477,476,475,381,378,71,0,91,93,
  474,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,0,448,449,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,
499,498,0,496,
515,511,381,378,66,0,63,64,73,
75,0,74,161,
75,0,74,
75,0,74,
75,0,74,
511,80,66,5,0,63,64,73,
511,80,66,5,0,63,64,73,
511,80,66,5,0,63,64,73,
519,518,517,516,515,514,513,512,492,491,381,378,71,0,91,93,
519,518,517,516,515,514,513,512,381,378,190,189,188,187,71,0,91,93,184,186,
75,0,74,
75,0,74,
75,0,74,
515,511,381,378,66,0,63,64,73,
75,0,74,
75,0,74,
511,401,400,399,398,397,396,395,66,0,63,64,73,
511,80,71,68,66,5,0,380,
511,80,71,68,66,5,0,380,
423,422,421,0,420,
519,518,517,516,515,514,513,512,381,378,90,77,71,0,451,452,
77,0,
515,381,378,0,130,389,
524,523,522,521,519,518,517,516,515,514,513,512,511,381,378,331,90,71,66,0,
  63,64,73,
524,523,522,521,519,518,517,516,515,514,513,512,511,381,378,331,90,71,66,0,
  63,64,73,
524,523,522,521,519,518,517,516,515,514,513,512,511,381,378,331,90,71,66,0,
  63,64,73,
524,523,522,521,519,518,517,516,515,514,513,512,511,381,378,331,90,71,66,0,
  63,64,73,
517,516,515,511,381,378,283,66,0,63,64,73,
515,511,381,378,66,0,63,64,73,
519,518,517,516,515,514,513,512,511,381,378,219,71,66,0,63,64,73,
515,381,378,0,130,191,
519,518,517,516,515,514,513,512,511,381,378,71,66,0,63,64,73,
516,515,511,381,378,289,66,0,63,64,73,
401,400,399,398,397,396,395,0,390,394,
515,511,381,378,80,68,66,5,0,379,
519,518,517,516,515,514,513,512,381,378,71,0,
519,518,517,516,515,514,513,512,381,378,0,448,449,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,90,71,0,97,99,
  109,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,90,71,0,97,99,
  109,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,90,71,0,97,99,
  109,
524,523,522,521,519,518,517,516,515,514,513,512,381,378,331,90,71,0,97,99,
  109,
517,516,515,381,378,283,0,192,203,279,
515,381,378,0,208,
519,518,517,516,515,514,513,512,381,378,219,71,0,91,93,218,
519,518,517,516,515,514,513,512,381,378,71,0,91,93,
516,515,381,378,289,0,215,220,287,288,291,
511,90,66,0,63,64,73,
515,381,378,0,
90,0,
511,80,66,5,0,63,64,73,
511,80,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
511,80,68,66,5,0,63,64,73,
90,0,
515,381,378,0,
};
static unsigned const char ag_astt[6396] = {
  1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,0,1,1,1,1,1,1,2,1,
  2,1,2,2,2,1,1,1,2,1,9,9,9,9,9,9,9,9,9,9,9,4,2,2,7,3,1,1,1,1,2,2,2,7,2,1,1,
  1,1,1,2,2,2,7,2,1,1,1,1,1,1,1,8,7,1,1,1,1,2,7,1,1,3,7,3,7,3,7,3,7,1,7,1,3,
  7,3,7,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,
  7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,
  1,1,7,1,1,1,1,1,1,1,7,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,7,
  1,1,1,2,1,4,4,4,2,4,4,7,1,1,1,4,4,4,2,4,4,7,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,
  1,1,1,1,1,1,1,1,7,2,1,1,9,9,4,2,7,1,4,4,4,4,4,5,4,4,4,4,4,4,4,5,5,7,1,1,1,
  1,1,1,1,2,2,2,2,1,7,1,1,2,1,1,2,2,2,1,1,1,1,1,1,2,7,3,1,1,5,5,5,5,5,5,5,5,
  5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,7,2,2,1,1,1,1,1,1,1,1,1,7,1,
  2,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,7,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,
  2,1,7,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,2,1,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,7,1,1,1,1,1,1,1,1,7,1,1,1,2,1,1,1,7,1,1,1,2,1,2,2,2,2,2,2,2,1,1,7,
  1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,7,1,2,1,2,1,1,1,
  1,1,1,1,1,1,2,2,2,2,2,1,1,1,7,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,4,7,1,2,1,1,1,1,1,1,1,7,1,1,1,2,1,1,1,7,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
  7,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,7,1,2,1,1,2,1,1,1,1,1,7,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,2,2,2,2,2,1,2,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,2,2,2,2,2,2,
  1,1,7,1,2,1,1,1,1,1,2,2,2,2,2,2,2,1,1,7,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,
  2,2,2,1,2,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,
  1,1,4,1,1,1,1,1,1,7,1,1,1,1,2,4,1,1,1,1,1,1,1,7,1,2,2,2,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,4,2,4,1,2,7,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,1,8,7,1,1,1,2,4,1,4,4,2,4,4,7,1,2,1,4,4,2,4,4,7,1,2,1,9,9,
  9,9,9,9,9,9,4,2,7,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,1,8,5,7,1,1,1,2,7,1,1,1,1,1,7,2,4,1,3,7,1,8,1,5,7,1,1,1,3,7,9,
  9,9,9,9,9,9,9,9,9,4,3,2,4,1,1,5,1,5,7,2,2,1,2,5,1,3,7,1,8,1,5,7,1,1,1,3,7,
  5,5,5,5,5,5,5,5,1,5,5,5,5,1,5,7,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,2,7,1,2,2,2,7,1,1,1,1,1,2,2,
  2,7,1,1,1,1,1,2,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,5,1,5,7,2,2,1,8,8,8,
  8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,1,5,1,5,7,2,2,1,2,5,7,1,1,2,3,7,1,8,1,
  5,7,1,1,1,2,5,7,1,1,2,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  4,2,4,1,1,8,1,5,7,1,1,1,3,7,9,9,9,4,1,8,1,5,7,1,1,1,3,7,1,8,1,5,7,1,1,1,3,
  7,1,8,1,7,1,1,1,1,8,5,1,5,7,1,1,1,1,8,5,1,5,7,1,1,1,3,7,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,4,2,7,1,3,7,1,8,1,5,7,1,1,1,3,7,1,5,1,5,7,2,2,1,2,5,1,3,7,2,
  5,1,3,7,9,9,9,4,1,1,5,7,2,2,1,3,7,1,1,7,1,1,1,1,5,7,2,2,1,3,7,1,5,1,5,7,2,
  2,1,2,5,1,3,7,2,7,1,1,8,5,1,5,7,1,1,1,2,5,1,3,7,1,8,1,7,1,1,1,1,1,7,1,1,2,
  5,1,3,7,9,9,9,4,1,1,5,7,2,2,1,3,7,1,1,5,7,2,2,1,3,7,2,4,1,1,1,8,5,1,5,7,1,
  1,1,2,5,1,3,7,2,2,2,4,1,1,7,1,1,1,1,7,1,1,1,1,5,7,2,2,1,3,7,1,1,5,7,2,2,1,
  3,7,2,4,1,1,1,8,1,5,7,1,1,1,3,7,9,9,9,4,1,1,7,1,1,1,1,5,7,2,2,1,3,7,9,9,9,
  9,9,9,9,9,4,1,1,1,1,5,5,5,5,5,5,5,5,1,5,7,1,1,3,1,1,5,1,1,5,5,5,5,5,5,7,3,
  3,1,1,5,1,5,2,7,1,1,1,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,7,2,2,1,1,2,
  1,1,1,1,1,1,7,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,2,2,2,2,2,2,2,2,2,2,2,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,1,8,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,4,8,8,8,
  8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,7,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,2,2,2,7,3,1,2,2,2,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,7,2,1,1,2,2,
  4,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,8,8,8,8,8,8,8,8,1,8,8,1,7,1,1,1,2,4,1,
  1,9,9,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,9,9,9,9,9,9,9,
  9,9,9,5,3,3,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,1,8,5,
  5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,5,5,5,5,5,5,5,5,1,5,5,5,5,1,5,7,1,1,2,1,
  1,1,1,1,1,1,2,2,2,2,1,7,1,2,1,1,2,2,2,1,1,1,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,
  1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,2,5,1,2,5,7,1,1,2,8,8,8,8,8,8,8,
  8,1,8,8,8,1,7,1,1,1,2,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  7,2,1,2,4,1,1,2,5,7,1,1,2,2,4,1,1,1,2,7,1,2,8,5,7,1,1,1,1,2,8,5,7,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,7,2,1,1,2,4,1,1,1,8,8,8,
  8,8,8,8,8,1,8,8,8,1,7,1,1,1,1,1,1,7,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,
  8,8,8,8,1,7,1,1,1,2,4,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,2,7,1,1,1,
  1,1,1,1,7,1,1,2,2,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,
  8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,
  1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,7,1,1,1,1,7,2,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,
  7,1,1,1,2,4,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,7,2,1,2,1,1,
  1,1,5,1,1,1,1,7,3,1,5,3,1,1,5,1,1,5,5,5,5,5,5,7,3,3,1,1,1,1,7,3,1,9,9,9,4,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,1,1,1,1,1,1,1,1,5,1,1,5,1,1,1,1,1,1,5,
  5,5,1,5,1,5,7,1,1,2,2,4,1,2,1,8,1,7,1,1,1,1,8,1,7,1,1,1,8,8,8,8,8,8,8,8,5,
  8,8,5,5,5,2,8,5,5,7,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,
  1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  7,2,2,2,2,2,2,2,2,2,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,5,7,1,1,2,1,1,5,7,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,
  2,4,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,2,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,
  2,4,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,1,5,5,1,5,7,2,2,1,2,4,4,
  4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,
  2,4,4,4,7,1,2,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,7,1,2,1,1,2,2,2,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,8,8,8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,8,8,8,8,8,
  8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,
  1,1,1,1,8,1,5,7,1,1,1,8,1,8,8,1,7,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,1,1,1,5,1,5,7,2,2,1,2,4,1,1,2,4,1,
  1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,5,1,5,7,2,2,1,2,4,
  1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,
  2,2,2,2,1,7,2,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,2,1,7,1,1,1,1,1,2,8,8,8,8,8,
  8,8,8,1,8,8,8,1,7,1,1,1,1,5,5,1,8,5,7,1,1,1,4,4,4,7,1,1,1,1,1,1,1,1,1,1,1,
  2,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,8,8,8,8,8,8,8,
  8,1,8,8,8,8,8,8,1,7,1,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,2,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,2,1,1,7,1,1,2,2,2,7,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,7,
  1,1,2,1,2,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,2,4,1,3,3,3,3,5,1,1,1,5,1,7,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,
  8,1,8,7,1,1,1,2,7,1,2,7,1,1,1,1,1,1,1,1,1,5,1,1,5,5,5,1,5,5,7,2,1,2,2,2,2,
  5,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,1,1,1,1,1,1,1,1,5,1,1,5,5,1,1,1,1,1,1,5,1,
  1,5,5,1,5,7,2,1,1,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,1,7,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,
  1,1,2,7,1,8,1,7,1,1,1,1,5,8,5,1,5,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,5,8,5,1,5,7,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,2,1,1,1,8,8,8,8,8,8,8,8,1,
  8,8,8,8,8,8,1,7,1,1,1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,1,2,5,7,1,1,2,1,1,1,7,1,1,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,3,2,8,8,8,8,8,8,
  8,8,1,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,2,4,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,7,
  1,1,2,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,
  1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,7,2,1,2,1,5,1,5,7,2,2,1,1,1,1,1,1,
  1,1,1,1,1,1,7,2,1,1,2,4,1,2,4,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,
  1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,7,1,1,2,3,1,1,1,1,1,1,7,2,1,1,1,7,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,1,2,3,3,3,5,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,7,2,8,8,8,1,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,
  1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,1,8,8,8,1,
  7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,
  8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,
  1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,
  1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,1,8,1,7,1,1,1,
  1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,2,7,2,4,1,2,7,1,2,4,1,
  2,8,8,8,8,8,8,8,8,5,8,8,5,2,8,5,5,7,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,
  5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,
  1,2,2,2,1,1,1,2,5,7,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,1,1,8,1,7,1,1,1,
  1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,
  1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,2,5,1,1,8,1,7,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,1,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,
  8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,2,7,1,2,7,1,1,1,1,7,2,2,2,
  7,2,7,1,2,7,1,1,7,1,1,1,1,1,1,7,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,7,2,1,2,1,1,
  1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,7,2,1,2,1,1,1,1,1,1,7,2,2,2,1,1,1,7,2,
  1,1,1,1,1,1,1,1,1,1,2,2,1,7,2,1,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,7,2,1,2,
  2,7,1,2,7,1,2,7,1,2,7,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,1,8,1,7,1,1,
  1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,5,1,1,5,1,5,5,7,2,1,
  2,2,2,5,2,7,1,2,7,1,2,7,1,1,1,1,7,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,
  1,1,1,1,1,1,1,1,1,7,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,
  1,1,2,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,2,7,1,1,1,1,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,2,2,2,2,2,2,2,2,2,2,
  1,2,8,1,8,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,1,1,4,1,1,1,7,1,
  8,8,8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,1,1,1,7,3,1,1,1,4,8,1,8,8,1,7,1,1,1,8,1,
  8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,
  8,1,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,7,2,1,1,1,1,1,1,
  1,1,1,1,1,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,
  8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,2,7,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,
  2,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,3,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,
  7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,5,
  5,1,5,7,3,3,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,4,2,4,4,7,1,2,1,8,
  1,7,1,1,1,1,8,1,7,1,1,1,1,5,5,1,5,7,3,3,1,1,5,5,1,5,7,3,3,1,1,1,1,2,7,1,1,
  3,2,2,2,7,2,1,1,7,2,2,2,2,4,2,2,2,7,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,
  2,2,2,4,1,1,1,7,1,2,1,1,1,7,1,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,7,2,1,2,
  1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,
  7,2,2,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,1,
  1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,2,7,2,8,1,8,8,1,7,1,
  1,1,2,7,1,2,2,7,1,2,7,1,2,7,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,
  2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,7,2,1,2,
  2,2,7,1,2,7,1,2,7,1,8,1,8,8,1,7,1,1,1,2,7,1,2,7,1,1,8,8,8,8,8,8,8,1,7,1,1,
  1,5,5,1,5,5,5,7,2,5,5,1,5,5,5,7,2,2,2,2,7,2,1,1,1,1,1,1,1,1,1,1,5,5,1,7,1,
  3,1,7,1,1,1,7,1,2,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,
  8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,
  7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,8,8,1,8,8,8,1,7,1,
  1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,1,1,7,1,2,8,8,
  8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,8,8,1,8,8,8,1,7,1,1,1,2,2,2,2,2,2,2,7,1,1,1,
  5,1,1,5,5,5,5,7,3,9,9,9,9,9,9,9,9,9,9,9,5,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,
  1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,2,1,2,1,1,1,1,1,1,7,1,2,2,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,2,1,7,2,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,2,1,1,1,1,8,1,7,1,1,1,1,1,1,5,
  2,7,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,
  5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,2,7,3,3,3,5
};
static const unsigned short ag_pstt[] = {
1,1,1,1,1,1,1,1,1,1,377,376,375,374,373,372,371,370,369,368,367,366,365,242,
  239,235,234,147,86,85,84,83,82,81,80,79,78,1,11,14,15,16,17,18,19,20,21,
  22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,0,0,13,12,10,9,8,7,
  87,1,378,6,230,231,232,2,4,3,363,5,
53,53,53,53,53,53,53,53,53,53,53,54,
275,260,2,233,42,41,40,39,
275,260,238,3,241,43,42,41,40,39,
275,260,238,4,237,44,42,41,40,39,
45,47,46,5,46,46,48,45,
36,6,49,49,
32,7,
31,8,
30,9,
29,10,
50,11,51,
27,12,
26,13,
50,14,52,
50,15,53,
50,16,54,
50,17,55,
50,18,56,
50,19,57,
50,20,58,
50,21,59,
50,22,60,
50,23,61,
50,24,62,
50,25,63,
50,26,64,
50,27,65,
50,28,66,
50,29,67,
50,30,68,
50,31,69,
50,32,70,
50,33,71,
50,34,72,
50,35,73,
50,36,74,
50,37,75,
50,38,76,
77,77,77,77,77,78,39,79,279,274,278,
81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,44,81,81,81,40,80,83,82,
  263,81,
306,306,306,46,306,306,41,84,86,85,
306,306,306,46,306,306,42,84,87,85,
88,88,88,88,88,88,88,88,43,240,89,88,
88,88,88,88,88,88,88,88,44,236,89,88,
41,41,42,
45,46,90,
36,36,36,36,36,40,36,36,36,36,36,36,36,40,40,47,
88,88,88,88,88,88,88,242,239,235,234,88,48,91,91,382,89,88,379,380,381,2,4,
  3,
92,92,92,36,49,144,93,93,
33,33,33,33,33,33,33,33,33,33,33,33,33,45,33,33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,45,33,33,50,35,35,45,
88,88,88,88,88,88,88,88,51,94,218,89,88,
1,1,1,1,1,1,1,1,549,548,547,1,1,1,52,96,550,1,544,95,
97,97,97,97,97,97,97,97,97,97,53,101,534,97,97,99,98,100,
97,97,97,97,97,97,97,97,97,97,54,103,534,97,97,529,102,98,
104,104,104,104,104,104,104,104,104,104,242,239,235,234,105,50,104,55,116,
  112,111,106,113,109,108,107,517,517,517,517,517,114,110,512,115,
104,104,104,104,104,104,104,104,104,104,242,239,235,234,105,50,104,56,119,
  112,111,106,113,109,108,107,118,118,118,118,118,117,110,507,
120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,
  120,120,120,120,120,57,123,121,120,122,123,
124,124,124,58,126,124,125,592,
124,124,124,59,128,124,127,583,
124,449,448,447,446,445,444,443,124,124,60,132,124,131,130,129,482,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,116,115,114,113,
  112,111,110,133,61,135,117,133,98,134,
1,1,1,1,1,1,1,1,574,573,572,571,570,1,1,1,62,137,575,1,567,136,
1,1,1,1,1,1,1,1,1,1,1,63,140,500,1,138,139,
1,1,1,1,1,1,1,1,1,1,1,503,64,142,500,1,138,141,142,
143,143,143,65,145,143,144,496,
143,143,143,66,148,143,146,147,
1,1,1,1,1,1,1,1,1,1,86,85,84,83,82,81,80,79,78,1,67,151,87,1,149,150,
104,104,104,104,104,104,104,104,104,104,105,50,104,68,155,112,111,152,153,
  110,154,478,
1,1,1,1,1,1,1,1,1,1,167,1,69,159,166,1,158,160,157,156,
160,160,160,70,162,160,161,
120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,
  120,120,120,120,120,71,164,121,120,163,
104,104,104,104,104,104,104,104,104,104,405,242,239,235,234,105,50,104,72,
  168,112,111,106,113,109,108,107,165,165,165,165,165,166,110,168,405,167,
  408,
169,449,448,447,446,445,444,443,169,169,73,173,441,172,171,129,170,
124,449,448,447,446,445,444,443,124,124,74,175,124,174,436,437,129,
104,104,104,104,104,104,104,104,104,104,242,239,235,234,105,50,104,75,178,
  112,111,106,113,109,108,107,176,176,176,176,176,383,177,110,
179,179,179,76,182,181,180,179,
183,183,183,183,183,183,183,183,280,183,
184,184,184,184,186,78,189,188,187,185,
45,276,190,
77,77,77,77,77,78,80,79,279,259,278,
265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,
  265,266,
45,261,191,
44,83,192,
193,193,193,193,193,193,193,193,45,193,193,193,193,193,193,193,193,193,193,
  193,193,193,193,193,193,193,193,45,193,84,193,193,45,
46,307,194,
349,349,47,349,349,86,195,244,196,
349,349,47,349,349,87,195,243,196,
221,221,221,221,221,221,221,221,222,
45,89,197,
198,198,198,198,198,198,198,198,198,198,198,198,198,198,45,198,198,198,198,
  198,198,198,198,198,198,198,198,198,198,198,198,198,198,45,198,33,90,
  198,198,45,
36,91,199,199,
200,200,200,92,
36,146,201,
28,94,
45,202,45,33,95,202,202,45,
25,96,
62,62,62,62,62,62,62,62,62,62,63,62,
39,533,203,
45,33,45,33,99,542,542,45,
38,541,204,
24,101,
45,205,45,33,102,205,205,45,
23,103,
395,395,395,395,395,395,395,395,206,395,395,395,395,206,395,104,206,206,398,
208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,
  208,208,208,207,209,208,208,208,208,208,208,208,208,208,208,208,208,105,
  208,208,208,209,
45,106,210,
275,260,238,107,211,213,212,40,39,
275,260,238,108,214,216,215,40,39,
275,260,109,218,217,40,39,
219,219,219,219,219,219,219,219,219,219,219,391,
45,33,45,33,111,390,390,45,
220,220,220,220,220,45,220,220,220,220,220,220,220,45,112,220,220,45,
50,223,221,
45,33,45,33,114,516,516,45,
46,513,115,222,223,515,
22,116,
45,224,45,33,117,224,224,45,
46,508,118,225,226,510,
21,119,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,
44,96,227,
45,228,45,33,122,228,228,45,
20,123,
91,91,91,438,
45,229,45,33,125,229,229,45,
19,126,
45,230,45,33,127,230,230,45,
18,128,
45,231,45,129,231,231,45,
45,232,33,45,33,130,232,232,45,
45,233,33,45,33,131,233,233,45,
17,132,
59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,
48,134,234,
16,135,
45,235,45,33,136,235,235,45,
15,137,
45,33,45,33,138,501,501,45,
38,504,236,
14,140,
38,506,236,
13,142,
91,91,91,497,
45,45,33,144,495,495,45,
12,145,
45,45,146,237,45,
45,45,33,147,498,498,45,
11,148,
45,33,45,33,149,157,157,45,
38,156,238,
10,151,
50,152,221,
45,239,33,45,33,153,239,239,45,
38,477,240,
9,155,
45,241,45,156,241,241,45,
45,45,157,242,45,
38,159,243,
8,159,
91,91,91,94,
45,45,33,161,93,93,45,
7,162,
45,45,33,163,95,95,45,
6,164,
46,412,244,245,
45,246,33,45,33,166,246,246,45,
38,406,247,
5,168,
452,452,452,451,
45,45,170,248,45,
45,45,171,249,45,
45,45,33,172,439,439,45,
4,173,
45,45,33,174,432,432,45,
3,175,
46,386,250,251,
45,252,45,33,177,252,252,45,
2,178,
91,91,91,92,
45,45,180,253,45,
45,45,33,181,88,88,45,
1,182,
282,282,282,282,282,282,282,282,283,
254,254,254,254,302,
299,299,299,299,299,299,299,255,299,185,256,256,301,
184,184,292,184,184,292,292,292,292,292,292,186,295,295,185,
257,291,
258,289,
284,189,
259,259,259,190,259,277,
260,260,260,260,260,260,260,260,260,260,260,260,260,271,260,260,260,191,262,
  267,260,260,267,
77,77,77,77,77,78,192,79,279,258,278,
261,261,261,261,261,261,261,261,261,261,261,339,263,265,266,269,270,261,261,
  261,264,267,268,261,261,261,261,193,308,310,311,312,313,314,315,316,317,
  318,319,262,
271,271,271,271,271,271,271,271,45,271,271,271,271,271,271,271,271,271,271,
  271,271,271,271,271,271,271,271,45,271,194,271,271,45,
272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,195,
  351,273,272,
274,350,
275,275,275,275,275,275,275,275,275,45,275,275,275,275,275,275,275,275,275,
  275,275,275,275,275,45,275,197,275,275,45,
276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,
  276,276,276,276,276,276,276,276,276,276,276,276,276,276,475,476,
147,36,199,144,277,
155,155,155,200,
278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,
  278,278,278,278,278,278,278,278,278,278,278,278,278,278,152,201,145,278,
  278,154,
46,546,279,280,
1,1,1,1,1,1,1,1,1,1,1,203,535,1,532,
281,281,281,281,281,281,281,281,45,281,281,45,204,281,281,45,
46,531,282,283,
394,394,396,394,
77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,
  77,77,77,77,77,77,77,77,77,77,77,207,
72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,207,72,72,
  72,72,72,72,72,72,72,72,72,72,74,72,72,
75,209,
284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,
  284,284,210,285,284,
104,104,104,104,104,104,104,104,104,104,105,104,211,111,106,223,256,110,
45,286,33,33,45,33,212,286,286,45,
45,287,33,33,45,33,213,287,287,45,
104,104,104,104,104,104,104,104,104,104,105,104,214,111,106,223,253,110,
45,288,33,33,45,33,215,288,288,45,
45,289,33,33,45,33,216,289,289,45,
45,290,33,33,45,33,217,290,290,45,
45,291,33,33,45,33,218,291,291,45,
395,395,395,395,395,395,395,395,206,395,395,395,395,206,395,219,206,206,397,
88,88,88,88,88,88,88,242,239,235,234,88,220,292,382,89,88,379,380,381,2,4,3,
293,293,293,293,293,45,293,293,293,293,293,293,293,45,221,293,293,45,
294,294,294,294,294,294,294,294,45,294,294,294,294,45,222,294,294,45,
46,514,295,
46,508,224,225,226,511,
296,296,296,296,296,296,296,296,45,296,296,296,45,225,296,296,45,
46,509,297,
120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,
  120,120,120,120,120,227,97,120,
46,596,298,299,
46,508,229,225,226,593,
46,584,301,300,302,
37,231,303,
49,306,483,232,304,305,306,306,
49,307,483,233,304,305,307,307,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,126,125,124,123,
  122,121,120,119,118,133,234,127,133,308,
46,569,309,311,310,
312,312,312,312,312,312,312,312,45,312,312,312,45,236,312,312,45,
179,179,179,237,313,179,
314,314,314,314,314,314,314,314,45,314,314,314,314,314,314,314,314,314,314,
  314,314,45,238,314,314,45,
46,480,225,315,
316,316,316,316,316,316,316,316,45,316,316,316,316,316,45,240,316,316,45,
48,241,317,
77,77,77,77,77,78,242,319,318,279,278,
320,320,320,320,320,320,320,320,45,320,320,320,320,45,243,320,320,45,
321,321,321,321,321,321,321,321,45,321,321,321,321,321,321,45,244,321,321,
  45,
46,413,322,
46,410,244,323,
324,324,324,324,324,324,324,324,45,324,324,324,324,324,324,324,324,324,45,
  247,324,324,45,
464,463,462,461,460,459,458,457,456,455,454,453,248,325,
326,326,326,249,440,327,
328,328,328,328,328,328,328,328,45,328,328,328,328,45,250,328,328,45,
46,387,329,
46,384,250,330,
1,1,1,1,1,1,1,1,1,1,86,85,84,83,82,81,80,79,78,1,253,87,1,89,
331,331,331,331,303,
184,184,184,184,255,296,
255,300,298,
184,184,292,184,184,292,292,292,292,292,292,257,294,294,185,
332,332,332,258,290,333,
91,91,91,175,
270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,272,270,
334,334,334,334,334,334,334,334,345,334,334,345,334,334,334,334,334,334,345,
  345,345,334,345,334,345,261,334,334,347,
43,340,335,341,
45,336,45,263,336,336,45,
45,337,45,264,337,337,45,
338,338,338,338,338,338,338,338,332,338,338,332,332,332,43,338,332,332,265,
  339,338,
45,340,45,266,340,340,45,
45,341,45,267,341,341,45,
45,342,45,268,342,342,45,
45,343,45,269,343,343,45,
45,344,45,270,344,344,45,
261,261,261,261,261,261,261,261,261,261,261,339,263,265,266,269,270,261,261,
  261,264,267,268,261,261,261,261,271,309,310,311,312,313,314,315,316,317,
  318,319,262,
355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,355,356,
345,273,
272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,274,
  352,273,272,
346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,
  346,346,346,346,346,275,219,346,
347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,
  347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,67,276,
  347,347,69,
45,45,33,277,364,364,45,
151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,
  151,151,151,151,151,151,151,151,151,151,151,151,151,151,153,151,
348,348,348,348,348,348,348,348,45,348,348,348,348,348,348,45,279,348,348,
  45,
46,545,349,
97,97,97,97,97,97,97,97,97,97,281,534,97,97,543,98,
350,350,350,350,350,350,350,350,45,350,350,350,350,45,282,350,350,45,
46,530,351,
228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,
  228,228,229,
45,33,33,45,33,285,257,257,45,
47,349,349,349,286,195,255,196,
47,349,349,349,287,195,254,196,
47,349,349,349,288,195,252,196,
47,349,349,349,289,195,251,196,
47,349,349,349,290,195,250,196,
47,349,349,349,291,195,249,196,
45,352,45,292,352,352,45,
88,88,88,88,88,88,88,242,239,235,234,88,293,353,382,89,88,379,380,381,2,4,3,
1,1,1,1,1,1,1,1,355,1,1,1,294,354,1,521,518,356,
357,357,357,357,357,357,357,357,45,357,357,357,357,45,295,357,357,45,
1,1,1,1,1,1,1,1,1,1,1,296,358,1,137,
359,359,359,359,359,359,359,359,45,359,359,359,45,297,359,359,45,
360,360,360,360,360,360,360,360,45,360,360,360,360,360,360,45,298,360,360,
  45,
46,595,361,
46,586,363,362,
364,364,364,364,364,364,364,364,45,364,364,364,364,45,301,364,364,45,
45,365,45,33,302,365,365,45,
366,45,366,366,45,303,366,366,45,
214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,
  214,214,214,216,214,214,214,215,214,214,214,214,214,214,214,214,214,304,
  367,367,
45,33,45,33,305,489,489,45,
46,488,368,369,
46,486,368,370,
45,371,45,33,308,371,371,45,
372,372,372,372,372,372,372,372,45,372,372,372,372,45,309,372,372,45,
45,33,45,33,310,576,576,45,
46,568,373,374,
1,1,1,1,1,1,1,1,1,1,1,312,500,1,375,
45,45,313,376,45,
1,1,1,1,1,1,1,1,1,1,86,85,84,83,82,81,80,79,78,1,314,87,1,377,
46,481,297,
104,104,104,104,104,104,104,104,104,104,105,50,104,316,112,111,152,153,110,
  479,
378,378,378,378,378,378,378,378,45,378,378,378,45,317,378,378,45,
45,33,33,45,379,33,318,379,379,45,
163,163,163,319,380,
1,1,1,1,1,1,1,1,1,1,167,1,320,166,1,161,157,156,
1,1,1,1,1,1,1,1,381,382,1,1,383,1,321,354,1,419,414,386,385,384,
387,387,387,387,387,387,387,387,45,387,387,387,387,387,387,45,322,387,387,
  45,
46,411,322,
104,104,104,104,104,104,104,104,104,104,242,239,235,234,105,50,104,324,112,
  111,106,113,109,108,107,165,165,165,165,165,166,110,409,
45,45,325,388,45,
469,469,469,326,
45,327,389,
1,1,1,1,1,1,1,1,1,1,390,1,328,354,1,403,391,400,
392,392,392,392,392,392,392,392,45,392,392,392,392,45,329,392,392,45,
46,385,329,
305,305,305,305,304,
393,393,393,286,
394,333,
344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,344,346,
  344,
395,395,395,395,395,395,395,395,45,395,395,395,395,395,395,395,395,395,45,
  395,335,395,395,45,
43,336,396,
43,337,397,
1,1,1,1,1,1,1,1,334,1,1,334,334,334,1,334,334,338,336,1,336,
331,330,329,333,
43,340,398,
43,341,399,
43,342,400,
43,343,401,
43,344,402,
403,403,403,403,403,403,403,403,360,403,403,360,360,403,403,403,403,403,403,
  360,403,403,360,360,403,360,345,353,403,403,362,
225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,
  225,225,225,225,225,226,
66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
  66,66,66,66,66,66,66,66,66,66,68,66,
1,1,1,1,1,1,1,1,406,405,404,1,1,1,348,354,1,556,551,409,408,407,
410,410,410,410,410,410,410,410,45,410,410,410,410,410,410,45,349,410,410,
  45,
1,1,1,1,1,1,1,1,411,1,1,1,350,354,1,539,536,412,
413,413,413,413,413,413,413,413,45,413,413,413,413,45,351,413,413,45,
389,352,
45,414,45,353,414,414,45,
45,33,415,33,45,33,354,415,415,45,
45,416,45,355,416,416,45,
45,33,45,33,356,520,520,45,
1,1,1,1,1,1,1,1,355,1,1,1,357,354,1,521,519,356,
45,33,417,33,45,33,358,417,417,45,
1,1,1,1,1,1,1,1,1,1,1,359,358,1,138,
1,1,1,1,1,1,1,1,418,419,420,1,1,1,360,354,1,602,602,597,423,422,421,
424,424,424,424,424,424,424,424,45,424,424,424,424,424,424,45,361,424,424,
  45,
45,425,45,33,362,425,425,45,
426,426,426,426,426,426,426,426,45,426,426,426,426,45,363,426,426,45,
1,1,1,1,1,1,1,1,427,1,1,1,364,358,1,137,427,
46,508,365,225,226,585,
169,169,169,366,428,170,
214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,
  214,214,214,216,214,214,214,215,214,214,214,214,214,214,214,214,214,367,
  212,213,
429,429,429,429,429,429,429,429,45,429,429,429,429,45,368,429,429,45,
46,487,430,
46,485,430,
46,100,371,431,99,432,
1,1,1,1,1,1,1,1,433,1,1,1,372,358,1,577,
434,434,434,434,434,434,434,434,45,434,434,434,434,45,373,434,434,45,
45,33,45,33,374,578,578,45,
45,33,45,33,375,502,502,45,
1,1,1,1,1,1,1,1,1,1,86,85,84,83,82,81,80,79,78,1,376,87,1,499,
45,33,45,33,377,158,158,45,
1,1,1,1,1,1,1,1,1,1,1,378,168,1,435,
45,176,436,
46,162,437,
45,438,45,381,438,438,45,
45,439,45,382,439,439,45,
45,440,45,383,440,440,45,
45,33,33,45,33,384,418,418,45,
45,33,33,45,33,385,417,417,45,
45,33,33,45,33,386,416,416,45,
1,1,1,1,1,1,1,1,381,382,1,1,383,1,387,354,1,419,415,386,385,384,
441,441,441,388,450,
442,442,442,389,443,
45,444,45,390,444,444,45,
45,33,45,33,391,402,402,45,
1,1,1,1,1,1,1,1,1,1,390,1,392,354,1,403,391,401,
288,288,288,287,
332,332,332,394,445,
261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,395,
  348,
446,446,446,45,446,446,446,45,396,446,446,45,
447,447,447,447,447,447,447,447,45,447,447,447,447,45,397,447,447,45,
448,448,448,448,448,448,448,448,45,448,448,448,448,448,448,448,448,448,448,
  448,448,45,398,448,448,45,
449,449,449,45,449,449,449,45,399,449,449,45,
450,45,450,450,45,400,450,450,45,
451,451,451,451,451,451,451,451,45,451,451,451,451,451,45,401,451,451,45,
452,452,452,452,452,452,452,452,45,452,452,452,452,452,452,452,45,402,452,
  452,45,
359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,
  361,359,
45,453,45,404,453,453,45,
45,454,45,405,454,454,45,
45,455,45,406,455,455,45,
45,33,45,33,407,555,555,45,
45,33,45,33,408,554,554,45,
45,33,45,33,409,553,553,45,
1,1,1,1,1,1,1,1,406,405,404,1,1,1,410,354,1,556,552,409,408,407,
45,456,45,411,456,456,45,
45,33,45,33,412,538,538,45,
1,1,1,1,1,1,1,1,411,1,1,1,413,354,1,539,537,412,
388,414,
43,188,457,
43,416,458,
43,139,459,140,
460,460,460,460,460,460,460,460,332,460,460,332,43,460,332,332,418,461,460,
45,462,45,419,462,462,45,
45,463,45,420,463,463,45,
45,33,45,33,421,601,601,45,
45,33,45,33,422,600,600,45,
45,33,45,33,423,599,599,45,
1,1,1,1,1,1,1,1,418,419,420,1,1,1,424,354,1,602,602,598,423,422,421,
46,508,425,225,226,587,
1,1,1,1,1,1,1,1,427,1,1,1,426,358,1,138,427,
45,464,45,427,464,464,45,
45,45,428,465,45,
1,1,1,1,1,1,1,1,466,1,1,1,429,358,1,491,467,
468,468,468,468,468,468,468,468,45,468,468,468,468,45,430,468,468,45,
469,469,469,469,469,469,469,469,469,469,469,469,45,469,469,469,469,469,469,
  469,45,431,469,469,45,
46,101,470,
45,471,45,433,471,471,45,
1,1,1,1,1,1,1,1,433,1,1,1,434,358,1,579,
45,472,45,435,472,472,45,
473,45,473,473,45,436,473,473,45,
474,474,474,474,474,474,474,474,45,474,474,474,474,474,474,474,474,474,474,
  474,45,437,474,474,45,
43,438,475,
43,439,476,
43,440,477,
478,478,478,441,
470,470,470,442,
45,443,479,
43,444,480,
481,445,
77,77,77,77,77,78,446,338,279,278,
1,1,1,1,1,1,1,1,1,1,208,1,447,209,1,337,
1,1,1,1,1,1,1,1,1,1,86,85,84,83,82,81,80,79,78,1,448,87,1,328,
77,77,77,77,77,78,449,327,279,278,
482,482,482,450,326,
1,1,1,1,1,1,1,1,1,1,324,323,1,451,325,1,321,322,
1,1,1,1,1,1,1,1,1,1,173,172,171,170,1,452,174,1,320,
43,453,483,
43,454,484,
43,455,485,
43,456,486,
487,487,487,487,487,487,487,487,45,487,487,487,487,487,45,457,487,487,45,
45,488,45,458,488,488,45,
489,489,489,489,489,489,489,489,45,489,489,489,489,45,459,489,489,45,
1,1,1,1,1,1,1,1,334,1,1,334,1,334,334,460,607,1,607,
606,605,333,
43,462,490,
43,463,491,
43,464,492,
326,326,326,465,442,327,
45,493,45,466,493,493,45,
45,33,45,33,467,490,490,45,
1,1,1,1,1,1,1,1,466,1,1,1,468,358,1,493,492,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,495,497,499,133,
  469,494,133,500,498,496,105,
501,501,501,501,501,501,501,501,501,501,501,501,45,501,501,501,501,501,501,
  501,45,470,501,501,45,
43,471,502,
48,472,503,
259,259,259,473,259,504,
1,1,1,1,1,1,1,1,1,1,508,510,511,506,505,507,512,513,1,474,354,1,164,178,179,
  180,181,182,183,184,185,186,186,194,509,203,
514,45,514,514,514,45,475,514,514,45,
45,515,515,45,476,515,515,45,
45,516,516,45,477,516,516,45,
517,517,517,465,
518,518,518,479,519,
520,520,520,520,520,520,520,520,45,520,520,520,45,480,520,520,45,
332,332,332,481,285,
521,521,521,196,
522,45,522,522,45,483,522,522,45,
523,45,523,523,45,484,523,523,45,
524,524,524,524,524,524,524,524,45,524,524,524,524,524,524,524,524,524,45,
  485,524,524,45,
525,525,525,525,525,525,525,525,45,525,525,525,45,486,525,525,45,
1,1,1,1,1,1,1,1,1,1,78,105,1,487,528,1,527,526,
529,488,522,
1,1,1,1,1,1,1,1,1,1,105,1,489,531,1,530,
532,532,532,532,532,532,532,532,45,532,532,532,45,490,532,532,45,
533,533,533,533,533,533,533,533,45,533,533,533,45,491,533,533,45,
45,534,534,45,492,534,534,45,
43,493,535,
45,536,45,494,536,536,45,
45,537,45,495,537,537,45,
45,33,45,33,496,104,104,45,
45,538,45,497,538,538,45,
45,33,45,33,498,103,103,45,
45,539,45,499,539,539,45,
45,33,45,33,500,102,102,45,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,495,497,499,133,
  501,494,133,542,541,540,109,
543,543,543,543,543,543,543,543,45,543,543,543,543,543,45,502,543,543,45,
544,544,544,544,544,544,544,544,45,544,544,544,544,544,544,544,45,503,544,
  544,45,
45,33,33,45,33,504,177,177,45,
45,33,33,33,45,33,505,200,200,45,
45,545,45,506,545,545,45,
45,546,45,507,546,546,45,
45,547,45,508,547,547,45,
201,43,201,201,509,548,199,
45,549,45,510,549,549,45,
45,550,45,511,550,550,45,
45,33,33,45,33,512,193,193,45,
45,33,33,45,33,513,192,192,45,
124,124,124,51,514,551,124,433,434,
431,430,515,429,
552,553,516,420,
467,467,467,466,
471,471,471,518,
45,45,519,554,45,
1,1,1,1,1,1,1,1,1,1,1,520,399,1,
198,198,198,197,
124,124,124,522,124,558,
124,124,124,523,124,557,
1,1,1,1,1,1,1,1,565,564,563,562,561,560,1,1,1,524,566,1,559,
1,1,1,1,1,1,1,1,1,1,1,525,540,1,
45,33,33,45,33,526,191,191,45,
45,33,33,45,33,527,190,190,45,
45,33,33,45,33,528,189,189,45,
555,555,555,555,555,555,555,555,555,555,529,556,555,
45,33,33,45,33,530,142,142,45,
45,33,33,45,33,531,141,141,45,
1,1,1,1,1,1,1,1,1,1,1,532,604,1,
1,1,1,1,1,1,1,1,1,1,1,533,603,1,
591,590,534,588,
557,45,557,557,45,535,557,557,45,
43,536,558,134,
43,537,559,
43,538,560,
43,539,561,
45,33,45,33,540,108,108,45,
45,33,45,33,541,107,107,45,
45,33,45,33,542,106,106,45,
1,1,1,1,1,1,1,1,581,580,1,1,1,543,582,1,
1,1,1,1,1,1,1,1,1,1,173,172,171,170,1,544,174,1,165,169,
43,545,562,
43,546,563,
43,547,564,
565,45,565,565,45,548,565,565,45,
43,549,566,
43,550,567,
45,568,568,568,568,568,568,568,45,551,568,568,45,
421,421,569,421,421,421,552,424,
421,421,569,421,421,421,553,423,
474,473,472,554,468,
570,570,570,570,570,570,570,570,570,570,526,526,570,555,570,528,
571,556,
124,124,124,557,124,494,
572,572,572,572,572,572,572,572,572,572,572,572,45,572,572,572,572,572,45,
  558,572,572,45,
573,573,573,573,573,573,573,573,573,573,573,573,45,573,573,573,573,573,45,
  559,573,573,45,
574,574,574,574,574,574,574,574,574,574,574,574,45,574,574,574,574,574,45,
  560,574,574,45,
575,575,575,575,575,575,575,575,575,575,575,575,45,575,575,575,575,575,45,
  561,575,575,45,
576,576,576,45,576,576,576,45,562,576,576,45,
577,45,577,577,45,563,577,577,45,
578,578,578,578,578,578,578,578,45,578,578,578,578,45,564,578,578,45,
259,259,259,565,259,202,
579,579,579,579,579,579,579,579,45,579,579,579,45,566,579,579,45,
580,580,45,580,580,580,45,567,580,580,45,
449,448,447,446,445,444,443,568,581,129,
582,425,582,582,425,425,425,425,569,422,
525,525,525,525,525,525,525,525,525,525,525,527,
555,555,555,555,555,555,555,555,555,555,571,583,555,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,105,133,572,585,
  133,584,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,105,133,573,132,
  133,133,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,105,133,574,130,
  133,131,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,105,133,575,128,
  133,129,
77,77,77,77,77,78,576,586,279,278,
482,482,482,577,587,
1,1,1,1,1,1,1,1,1,1,208,1,578,209,1,588,
1,1,1,1,1,1,1,1,1,1,1,579,589,1,
184,184,184,184,186,580,590,210,188,187,185,
45,591,45,581,591,591,45,
592,592,592,426,
523,583,
45,33,45,33,584,136,136,45,
45,33,45,33,585,135,135,45,
45,33,33,45,33,586,204,204,45,
45,33,33,45,33,587,195,195,45,
45,33,33,45,33,588,207,207,45,
45,33,33,45,33,589,206,206,45,
45,33,33,45,33,590,205,205,45,
435,591,
428,428,428,427,
};
static const unsigned short ag_sbt[] = {
     0,  84,  96, 104, 114, 124, 132, 136, 138, 140, 142, 144, 147, 149,
   151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190,
   193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 237, 264,
   274, 284, 296, 308, 311, 314, 330, 354, 362, 434, 447, 467, 485, 503,
   538, 572, 602, 610, 618, 635, 664, 686, 703, 722, 730, 738, 764, 786,
   806, 813, 842, 880, 897, 914, 948, 956, 966, 976, 979, 990,1011,1014,
  1017,1050,1053,1062,1071,1080,1083,1123,1127,1131,1134,1136,1144,1146,
  1158,1161,1169,1172,1174,1182,1184,1203,1244,1247,1256,1265,1272,1284,
  1292,1310,1313,1321,1327,1329,1337,1343,1345,1370,1373,1381,1383,1387,
  1395,1397,1405,1407,1414,1423,1432,1434,1451,1454,1456,1464,1466,1474,
  1477,1479,1482,1484,1488,1495,1497,1502,1509,1511,1519,1522,1524,1527,
  1536,1539,1541,1548,1553,1556,1558,1562,1569,1571,1578,1580,1584,1593,
  1596,1598,1602,1607,1612,1619,1621,1628,1630,1634,1642,1644,1648,1653,
  1660,1662,1671,1676,1689,1704,1706,1708,1710,1716,1739,1750,1790,1823,
  1845,1847,1877,1912,1917,1921,1960,1964,1979,1995,1999,2003,2040,2078,
  2080,2104,2122,2132,2142,2160,2170,2180,2190,2200,2219,2242,2260,2278,
  2281,2287,2304,2307,2334,2338,2344,2349,2352,2360,2368,2397,2402,2419,
  2425,2451,2455,2474,2477,2488,2506,2526,2529,2533,2556,2570,2576,2594,
  2597,2601,2625,2630,2636,2639,2654,2660,2664,2682,2711,2715,2722,2729,
  2750,2757,2764,2771,2778,2785,2825,2844,2846,2868,2895,2935,2942,2977,
  2997,3000,3016,3034,3037,3059,3068,3076,3084,3092,3100,3108,3116,3123,
  3146,3164,3182,3197,3214,3234,3237,3241,3259,3267,3276,3315,3323,3327,
  3331,3339,3357,3365,3369,3384,3389,3413,3416,3436,3453,3463,3468,3486,
  3508,3528,3531,3564,3569,3573,3576,3594,3612,3615,3620,3624,3626,3646,
  3670,3673,3676,3697,3701,3704,3707,3710,3713,3716,3747,3772,3809,3831,
  3851,3869,3887,3889,3896,3906,3913,3921,3939,3949,3964,3987,4007,4015,
  4033,4050,4056,4062,4101,4119,4122,4125,4131,4147,4165,4173,4181,4205,
  4213,4228,4231,4234,4241,4248,4255,4264,4273,4282,4304,4309,4314,4321,
  4329,4347,4351,4356,4376,4388,4406,4432,4444,4453,4472,4493,4514,4521,
  4528,4535,4543,4551,4559,4581,4588,4596,4614,4616,4619,4622,4626,4645,
  4652,4659,4667,4675,4683,4706,4712,4729,4736,4741,4758,4776,4801,4804,
  4811,4827,4834,4843,4868,4871,4874,4877,4881,4885,4888,4891,4893,4903,
  4919,4943,4953,4958,4976,4995,4998,5001,5004,5007,5026,5033,5051,5070,
  5073,5076,5079,5082,5088,5095,5103,5120,5146,5171,5174,5177,5183,5219,
  5229,5237,5245,5249,5254,5271,5276,5280,5289,5298,5321,5338,5356,5359,
  5375,5392,5409,5417,5420,5427,5434,5442,5449,5457,5464,5472,5498,5517,
  5538,5547,5557,5564,5571,5578,5585,5592,5599,5608,5617,5626,5630,5634,
  5638,5642,5647,5661,5665,5671,5677,5698,5712,5721,5730,5739,5752,5761,
  5770,5784,5798,5802,5811,5815,5818,5821,5824,5832,5840,5848,5864,5884,
  5887,5890,5893,5902,5905,5908,5921,5929,5937,5942,5958,5960,5966,5989,
  6012,6035,6058,6070,6079,6097,6103,6120,6131,6141,6151,6163,6176,6197,
  6218,6239,6260,6270,6275,6291,6305,6316,6323,6327,6329,6337,6345,6354,
  6363,6372,6381,6390,6392,6396
};
static const unsigned short ag_sbe[] = {
    64,  95,  98, 107, 117, 127, 133, 137, 139, 141, 143, 145, 148, 150,
   152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191,
   194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 232, 258, 270,
   280, 292, 304, 310, 312, 329, 342, 358, 430, 442, 461, 477, 495, 520,
   555, 596, 605, 613, 628, 658, 680, 697, 715, 725, 733, 758, 777, 798,
   809, 837, 860, 890, 907, 931, 951, 964, 971, 977, 985,1010,1012,1015,
  1046,1051,1058,1067,1079,1081,1119,1124,1130,1132,1135,1140,1145,1156,
  1159,1165,1170,1173,1178,1183,1199,1239,1245,1250,1259,1267,1283,1288,
  1306,1311,1317,1323,1328,1333,1339,1344,1369,1371,1377,1382,1386,1391,
  1396,1401,1406,1410,1419,1428,1433,1450,1452,1455,1460,1465,1470,1475,
  1478,1480,1483,1487,1491,1496,1499,1505,1510,1515,1520,1523,1525,1532,
  1537,1540,1544,1550,1554,1557,1561,1565,1570,1574,1579,1581,1589,1594,
  1597,1601,1604,1609,1615,1620,1624,1629,1631,1638,1643,1647,1650,1656,
  1661,1670,1675,1685,1700,1705,1707,1709,1713,1733,1745,1777,1819,1841,
  1846,1873,1910,1914,1920,1955,1961,1975,1991,1996,2001,2039,2075,2079,
  2101,2116,2128,2138,2154,2166,2176,2186,2196,2215,2231,2256,2274,2279,
  2283,2300,2305,2331,2335,2340,2345,2350,2355,2363,2393,2398,2415,2422,
  2447,2452,2470,2475,2483,2502,2522,2527,2530,2552,2568,2573,2590,2595,
  2598,2621,2629,2634,2637,2650,2657,2663,2680,2707,2712,2718,2725,2747,
  2753,2760,2767,2774,2781,2812,2843,2845,2864,2892,2931,2938,2975,2993,
  2998,3010,3030,3035,3058,3064,3072,3080,3088,3096,3104,3112,3119,3135,
  3158,3178,3193,3210,3230,3235,3238,3255,3263,3272,3312,3319,3324,3328,
  3335,3353,3361,3366,3380,3386,3409,3414,3429,3449,3459,3466,3480,3500,
  3524,3529,3548,3566,3572,3574,3588,3608,3613,3619,3623,3625,3644,3666,
  3671,3674,3693,3700,3702,3705,3708,3711,3714,3742,3771,3807,3823,3847,
  3863,3883,3888,3892,3902,3909,3917,3933,3945,3960,3978,4003,4011,4029,
  4045,4052,4059,4098,4115,4120,4123,4127,4143,4161,4169,4177,4201,4209,
  4224,4229,4232,4237,4244,4251,4260,4269,4278,4296,4307,4312,4317,4325,
  4341,4350,4354,4374,4384,4402,4428,4440,4449,4468,4489,4512,4517,4524,
  4531,4539,4547,4555,4573,4584,4592,4608,4615,4617,4620,4623,4642,4648,
  4655,4663,4671,4679,4697,4708,4724,4732,4738,4753,4772,4797,4802,4807,
  4823,4830,4839,4864,4869,4872,4875,4880,4884,4886,4889,4892,4899,4915,
  4939,4949,4956,4971,4991,4996,4999,5002,5005,5022,5029,5047,5066,5072,
  5074,5077,5080,5085,5091,5099,5115,5139,5167,5172,5175,5180,5202,5225,
  5233,5241,5248,5252,5267,5274,5279,5285,5294,5317,5334,5351,5357,5371,
  5388,5405,5413,5418,5423,5430,5438,5445,5453,5460,5468,5491,5513,5534,
  5543,5553,5560,5567,5574,5582,5588,5595,5604,5613,5621,5628,5632,5637,
  5641,5644,5658,5664,5668,5674,5694,5709,5717,5726,5735,5749,5757,5766,
  5781,5795,5800,5807,5812,5816,5819,5822,5828,5836,5844,5861,5879,5885,
  5888,5891,5898,5903,5906,5917,5927,5935,5940,5955,5959,5963,5985,6008,
  6031,6054,6066,6075,6093,6100,6116,6127,6138,6149,6162,6173,6193,6214,
  6235,6256,6266,6273,6287,6302,6310,6319,6326,6328,6333,6341,6350,6359,
  6368,6377,6386,6391,6395,6396
};
static const unsigned char ag_fl[] = {
  1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,4,2,2,2,2,0,1,
  2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,0,1,2,
  1,1,2,0,1,3,1,2,1,1,1,1,1,1,1,1,1,1,2,3,1,2,1,2,1,2,1,3,1,5,0,1,4,4,4,
  3,5,5,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,3,4,4,3,4,2,
  3,4,4,1,2,5,3,1,1,1,1,2,0,1,1,3,1,2,5,1,1,4,4,0,4,9,1,1,1,1,1,1,1,1,1,
  1,2,6,1,1,1,1,1,1,1,1,1,1,2,6,6,6,2,2,1,6,1,2,3,2,2,0,3,1,6,6,6,6,1,1,
  1,1,2,3,1,1,1,1,1,4,1,2,1,1,1,2,1,1,2,1,1,1,1,2,1,1,3,2,1,1,3,2,1,3,3,
  1,1,1,1,4,4,4,4,3,4,4,3,4,4,3,1,1,3,1,1,2,1,1,1,1,2,0,1,1,2,1,1,3,1,1,
  1,1,2,2,3,5,1,2,3,1,3,1,0,1,3,2,2,1,2,0,1,2,1,2,3,4,0,1,3,4,1,1,1,1,1,
  1,1,1,1,1,5,5,5,1,1,1,5,5,5,3,3,3,0,1,0,1,3,5,5,1,1,2,1,1,2,0,1,2,3,0,
  1,2,3,3,1,2,1,1,1,2,0,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
  3,1,2,6,5,2,1,1,1,2,0,1,3,2,5,3,4,2,1,1,1,1,1,1,4,2,3,1,2,3,4,2,2,2,1,
  5,0,2,2,2,0,1,2,3,5,1,1,2,5,1,5,1,1,1,2,3,1,7,1,1,1,1,1,1,1,5,1,2,1,1,
  1,1,1,1,1,1,1,1,1,1,2,3,4,7,2,2,2,1,1,1,4,5,1,1,4,2,3,1,0,1,4,3,4,3,2,
  4,3,4,4,5,2,1,1,2,5,1,2,5,0,1,1,1,1,0,1,2,3,1,0,1,2,2,1,3,4,2,1,5,5,1,
  2,0,1,2,1,3,2,3,1,1,1,3,4,2,1,5,1,2,4,1,3,2,1,1,1,1,3,4,2,2,2,1,5,5,5,
  1,1,1,1,1,1,1,1,3,2,1,1,1,1,1,1,2,3,3,4,7,7,7,1,2,5,3,6,7,1,1,1,1,3,1,
  3,2,3,4,2,2,2,1,5,5,3,3,3,1,1
};
static const unsigned short ag_ptt[] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 64, 64,  3,
   65, 67, 69, 70, 73, 73, 63, 74, 76, 78, 79, 81, 83, 85, 87, 89, 93, 93,
   91, 96, 96, 94, 99, 99, 97,102,102,100,106,107,107,108,108,103,111,112,
  112,113,113,109,110,110,117,117,117,117,117,117,117,117,117,117,  4,127,
  130,130,128, 17,131, 15,132,132, 35,133,136,136,137,137,137,137,137,137,
  137,137,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,
  135,135,138,138,139,139,140,140,141,161,161,162,162,163,163,164,164,166,
  166, 54, 54,165,167,172,173,173,174,174,168,170, 23,175,175, 19,176,176,
  177,180,180,178,182,182,183,184,186,186,186,186,186,191,179,179,181,181,
  181,181,181,181,181,181,181,201,202,202,202,202,193,194,195,206,208,208,
  208,199,209,210,210,196,212,197,198,200,218,218,215,223,223,221,222,222,
  222,227, 57,229,233,233,230,234,237,237,231,240,240,238, 60, 58, 59,241,
  244,244,242,242,249,248,243,243,252,245,245,258,258,258,258,259,259,260,
  260,260,261,261,261,262,254,254,263,264,264,267,271,271,269,268,274,275,
  275,276,276,272,257,277,265,265,192,192,279,282,282,279,203,285,286,286,
  286,220,220,287,290,290,287,287,292,293,293,294,294,288,291,291,291,291,
  255,255,296,296,297,297,297,297,297,297,297,297,297,297,298,299,299,310,
  310,311,300,301,302,303,303,303,319,319,320,320,303,304,305,306,307,307,
  326,327,327,328,328,323,324,256,256,329,329,330,335,335,332,337,338,338,
  339,339,333, 55,340,341,341,341,341,341,341,341,341,341,341,341,341,341,
  341,228,228,228,228,  7,355,355,355,355,356,356,235,235,360,361,361,362,
  362,359,359,363,357,357,365,365, 13,366,366,367,368,368,370,370,370,370,
  371,371,372,372,372,372,373,380,380,377,377,379,379,379,379,374,383,383,
    9,375,388,388,386,386,389, 11,391,391,390,394,394,394,394,394,394,394,
  392,402,402,403,403,403,403,403,403,403,403,403,403,403,403,404,404,404,
  393,417,418,419,420,420,420, 61, 61, 21,424,424,425,425, 37,428,428,426,
  426,426,426,427,429,429,429,429,430, 27,432,433, 25,434,435,436,436,437,
   31, 29, 29, 45,439,439,438,438, 47,443,443,440,441,441,442,442,444,444,
  445,447,451,451,452,452,448, 49,453,453,454,454,456,457,455,455,458,458,
  459, 51,461,461, 53,462,462,463,463,463,463,464,464,468,468,468,468,470,
  471,469,474,474,474,474,474,474,474, 33,481,481,482,482,482,482,482,482,
  483,483,483,483,489,489,489, 39,493,493,493,493,494,495,496,496, 41,500,
   43,501,501,502,502,503,503,503,503,504,505,506,506,506,101,449
};
static const unsigned short  *ag_valid(PCB_DECL, int ag_k) {
  const unsigned short  *ag_tp = &ag_tstt[ag_sbt[(PCB).sn+1]];
  while (*--ag_tp != (const unsigned short) ag_k) if (*ag_tp == 0) return NULL;
  return ag_tp;
}
int SipParser_change_reduction(PCB_DECL, SipParser_token_type ag_k) {
  if (!ag_valid(PCB_POINTER, ag_k)) return 0;
  (PCB).reduction_token = ag_k;
  return 1;
}
static void ag_default(PCB_DECL, const  int *ag_tp) {
  (PCB).ag_dsn = (PCB).sn;
  (PCB).ag_dtl = ag_tp;
  while (!ag_valid(PCB_POINTER, (SipParser_token_type) *ag_tp)) ag_tp++;
  (PCB).reduction_token = (SipParser_token_type) *ag_tp;
}
static void ag_ra(PCB_DECL)
{
  switch(ag_rpx[(PCB).ag_ap]) {
    case 1: ag_rp_1(PCB_POINTER); break;
    case 2: ag_rp_2(PCB_POINTER); break;
    case 3: ag_rp_3(PCB_POINTER); break;
    case 4: ag_rp_4(PCB_POINTER); break;
    case 5: ag_rp_5(PCB_POINTER); break;
    case 6: ag_rp_6(PCB_POINTER); break;
    case 7: ag_rp_7(PCB_POINTER); break;
    case 8: ag_rp_8(PCB_POINTER); break;
    case 9: ag_rp_9(PCB_POINTER); break;
    case 10: ag_rp_10(PCB_POINTER); break;
    case 11: ag_rp_11(PCB_POINTER); break;
    case 12: ag_rp_12(PCB_POINTER); break;
    case 13: ag_rp_13(PCB_POINTER); break;
    case 14: ag_rp_14(PCB_POINTER); break;
    case 15: ag_rp_15(PCB_POINTER); break;
    case 16: V(0,ParserBasicToken) = ag_rp_16(PCB_POINTER); break;
    case 17: V(0,ParserBasicToken) = ag_rp_17(PCB_POINTER); break;
    case 18: V(0,ParserBasicToken) = ag_rp_18(PCB_POINTER); break;
    case 19: V(0,ParserBasicToken) = ag_rp_19(PCB_POINTER); break;
    case 20: V(0,ParserBasicToken) = ag_rp_20(PCB_POINTER); break;
    case 21: V(0,ParserQuotedString) = ag_rp_21(PCB_POINTER); break;
    case 22: V(0,ParserMethod) = ag_rp_22(PCB_POINTER); break;
    case 23: V(0,ParserMethod) = ag_rp_23(PCB_POINTER); break;
    case 24: V(0,ParserMethod) = ag_rp_24(PCB_POINTER); break;
    case 25: V(0,ParserMethod) = ag_rp_25(PCB_POINTER); break;
    case 26: V(0,ParserMethod) = ag_rp_26(PCB_POINTER); break;
    case 27: V(0,ParserMethod) = ag_rp_27(PCB_POINTER); break;
    case 28: V(0,ParserMethod) = ag_rp_28(PCB_POINTER); break;
    case 29: V(0,ParserMethod) = ag_rp_29(PCB_POINTER); break;
    case 30: V(0,ParserMethod) = ag_rp_30(PCB_POINTER); break;
    case 31: V(0,ParserMethod) = ag_rp_31(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 32: ag_rp_32(PCB_POINTER, V(0,ParserCSeq)); break;
    case 33: V(0,ParserCSeq) = ag_rp_33(PCB_POINTER, V(0,ParserSequenceNumber), V(2,ParserMethod)); break;
    case 34: V(0,ParserSequenceNumber) = ag_rp_34(PCB_POINTER); break;
    case 35: ag_rp_35(PCB_POINTER, V(0,ParserContentLength)); break;
    case 36: V(0,ParserContentLength) = ag_rp_36(PCB_POINTER); break;
    case 37: ag_rp_37(PCB_POINTER, V(0,ParserCallId)); break;
    case 38: V(0,ParserCallId) = ag_rp_38(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 39: V(0,ParserCallId) = ag_rp_39(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 40: ag_rp_40(PCB_POINTER); break;
    case 41: ag_rp_41(PCB_POINTER, V(0,ParserMediaType), V(2,ParserMediaSubType)); break;
    case 42: ag_rp_42(PCB_POINTER); break;
    case 43: ag_rp_43(PCB_POINTER, V(2,ParserBoundary)); break;
    case 44: ag_rp_44(PCB_POINTER, V(2,ParserBase)); break;
    case 45: ag_rp_45(PCB_POINTER, V(2,ParserBase)); break;
    case 46: ag_rp_46(PCB_POINTER); break;
    case 47: ag_rp_47(PCB_POINTER, V(3,ParserBoundary)); break;
    case 48: ag_rp_48(PCB_POINTER, V(3,ParserBase)); break;
    case 49: ag_rp_49(PCB_POINTER, V(3,ParserBase)); break;
    case 50: V(0,ParserMediaType) = ag_rp_50(PCB_POINTER); break;
    case 51: V(0,ParserMediaType) = ag_rp_51(PCB_POINTER); break;
    case 52: V(0,ParserMediaType) = ag_rp_52(PCB_POINTER); break;
    case 53: V(0,ParserMediaType) = ag_rp_53(PCB_POINTER); break;
    case 54: V(0,ParserMediaType) = ag_rp_54(PCB_POINTER); break;
    case 55: V(0,ParserMediaType) = ag_rp_55(PCB_POINTER); break;
    case 56: V(0,ParserMediaType) = ag_rp_56(PCB_POINTER); break;
    case 57: V(0,ParserMediaType) = ag_rp_57(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 58: V(0,ParserMediaSubType) = ag_rp_58(PCB_POINTER); break;
    case 59: V(0,ParserMediaSubType) = ag_rp_59(PCB_POINTER); break;
    case 60: V(0,ParserMediaSubType) = ag_rp_60(PCB_POINTER); break;
    case 61: V(0,ParserMediaSubType) = ag_rp_61(PCB_POINTER); break;
    case 62: V(0,ParserMediaSubType) = ag_rp_62(PCB_POINTER); break;
    case 63: V(0,ParserMediaSubType) = ag_rp_63(PCB_POINTER); break;
    case 64: V(0,ParserMediaSubType) = ag_rp_64(PCB_POINTER); break;
    case 65: V(0,ParserMediaSubType) = ag_rp_65(PCB_POINTER); break;
    case 66: V(0,ParserMediaSubType) = ag_rp_66(PCB_POINTER); break;
    case 67: V(0,ParserMediaSubType) = ag_rp_67(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 68: V(0,ParserBoundary) = ag_rp_68(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 69: V(0,ParserBoundary) = ag_rp_69(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 70: V(0,ParserBase) = ag_rp_70(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 71: V(0,ParserBase) = ag_rp_71(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 72: V(0,ParserBase) = ag_rp_72(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 73: V(0,ParserBase) = ag_rp_73(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 74: ag_rp_74(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 75: V(0,ParserGenericParamDataVal) = ag_rp_75(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 76: V(0,ParserGenericParamDataVal) = ag_rp_76(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 77: ag_rp_77(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 78: ag_rp_78(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 79: V(0,ParserGenericParamDataVal) = ag_rp_79(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 80: V(0,ParserGenericParamDataVal) = ag_rp_80(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 81: ag_rp_81(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode), V(4,ParserReasonPhrase)); break;
    case 82: ag_rp_82(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode)); break;
    case 83: V(0,ParserSipVersion) = ag_rp_83(PCB_POINTER); break;
    case 84: V(0,ParserReasonPhrase) = ag_rp_84(PCB_POINTER); break;
    case 85: V(0,ParserStatusCode) = ag_rp_85(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 86: ag_rp_86(PCB_POINTER, V(0,ParserMethod)); break;
    case 87: ag_rp_87(PCB_POINTER, V(3,ParserMethod)); break;
    case 88: ag_rp_88(PCB_POINTER); break;
    case 89: ag_rp_89(PCB_POINTER); break;
    case 90: ag_rp_90(PCB_POINTER); break;
    case 91: ag_rp_91(PCB_POINTER); break;
    case 92: ag_rp_92(PCB_POINTER, V(3,ParserViaParam)); break;
    case 93: ag_rp_93(PCB_POINTER, V(0,ParserProtocolName), V(4,ParserProtocolVersion), V(8,ParserTransport)); break;
    case 94: V(0,ParserProtocolName) = ag_rp_94(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 95: V(0,ParserProtocolName) = ag_rp_95(PCB_POINTER); break;
    case 96: V(0,ParserProtocolVersion) = ag_rp_96(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 97: V(0,ParserTransport) = ag_rp_97(PCB_POINTER, V(0,ParserTransport)); break;
    case 98: V(0,ParserTransport) = ag_rp_98(PCB_POINTER); break;
    case 99: V(0,ParserTransport) = ag_rp_99(PCB_POINTER); break;
    case 100: V(0,ParserTransport) = ag_rp_100(PCB_POINTER); break;
    case 101: V(0,ParserTransport) = ag_rp_101(PCB_POINTER); break;
    case 102: V(0,ParserTransport) = ag_rp_102(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 103: V(0,ParserPort) = ag_rp_103(PCB_POINTER); break;
    case 104: ag_rp_104(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 105: ag_rp_105(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserPort)); break;
    case 106: V(0,ParserViaParam) = ag_rp_106(PCB_POINTER); break;
    case 107: V(0,ParserViaParam) = ag_rp_107(PCB_POINTER); break;
    case 108: V(0,ParserViaParam) = ag_rp_108(PCB_POINTER, V(0,ParserTTLParam)); break;
    case 109: V(0,ParserViaParam) = ag_rp_109(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 110: V(0,ParserViaParam) = ag_rp_110(PCB_POINTER, V(0,ParserReceived)); break;
    case 111: V(0,ParserViaParam) = ag_rp_111(PCB_POINTER, V(0,ParserBranch)); break;
    case 112: V(0,ParserViaParam) = ag_rp_112(PCB_POINTER, V(0,ParserPort)); break;
    case 113: V(0,ParserViaParam) = ag_rp_113(PCB_POINTER, V(0,ParserCompParam)); break;
    case 114: V(0,ParserViaParam) = ag_rp_114(PCB_POINTER); break;
    case 115: ag_rp_115(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 116: ag_rp_116(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 117: ag_rp_117(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserQuotedString)); break;
    case 118: ag_rp_118(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 119: V(0,ParserTTLParam) = ag_rp_119(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 120: V(0,ParserTtlParam) = ag_rp_120(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 121: V(0,ParserBasicToken) = ag_rp_121(PCB_POINTER); break;
    case 122: V(0,ParserBasicToken) = ag_rp_122(PCB_POINTER); break;
    case 123: V(0,ParserBasicToken) = ag_rp_123(PCB_POINTER); break;
    case 124: V(0,ParserPort) = ag_rp_124(PCB_POINTER, V(1,ParserPort)); break;
    case 125: V(0,ParserPort) = ag_rp_125(PCB_POINTER); break;
    case 126: V(0,ParserPort) = ag_rp_126(PCB_POINTER, V(2,ParserPort)); break;
    case 127: V(0,ParserMaddrParam) = ag_rp_127(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 128: V(0,ParserMaddrParam) = ag_rp_128(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 129: V(0,ParserReceived) = ag_rp_129(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 130: V(0,ParserBranch) = ag_rp_130(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 131: V(0,ParserCompParam) = ag_rp_131(PCB_POINTER, V(4,ParserCompParam)); break;
    case 132: V(0,ParserCompParam) = ag_rp_132(PCB_POINTER); break;
    case 133: V(0,ParserCompParam) = ag_rp_133(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 134: V(0,ParserBasicToken) = ag_rp_134(PCB_POINTER); break;
    case 135: V(0,ParserBasicToken) = ag_rp_135(PCB_POINTER); break;
    case 136: ag_default(PCB_POINTER, &ag_rtt[0]); ag_rp_136(PCB_POINTER); break;
    case 137: ag_default(PCB_POINTER, &ag_rtt[3]); ag_rp_137(PCB_POINTER); break;
    case 138: ag_default(PCB_POINTER, &ag_rtt[6]); ag_rp_138(PCB_POINTER); break;
    case 139: ag_rp_139(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 140: V(0,ParserAbsoluteUri) = ag_rp_140(PCB_POINTER, V(0,ParserBasicToken), V(3,ParserBasicToken)); break;
    case 141: V(0,ParserBasicToken) = ag_rp_141(PCB_POINTER); break;
    case 142: V(0,ParserDisplayName) = ag_rp_142(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 143: V(0,ParserBasicToken) = ag_rp_143(PCB_POINTER); break;
    case 144: V(0,ParserBasicToken) = ag_rp_144(PCB_POINTER); break;
    case 145: ag_rp_145(PCB_POINTER); break;
    case 146: ag_rp_146(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 147: ag_rp_147(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 148: ag_rp_148(PCB_POINTER); break;
    case 149: ag_rp_149(PCB_POINTER); break;
    case 150: V(0,ParserAbsoluteUri) = ag_rp_150(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 151: V(0,ParserAbsoluteUri) = ag_rp_151(PCB_POINTER); break;
    case 152: ag_rp_152(PCB_POINTER); break;
    case 153: ag_rp_153(PCB_POINTER); break;
    case 154: V(0,ParserAbsoluteUri) = ag_rp_154(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 155: V(0,ParserAbsoluteUri) = ag_rp_155(PCB_POINTER); break;
    case 156: ag_rp_156(PCB_POINTER); break;
    case 157: ag_rp_157(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 158: ag_rp_158(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 159: ag_rp_159(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 160: ag_rp_160(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 161: ag_rp_161(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 162: ag_rp_162(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 163: ag_rp_163(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 164: ag_rp_164(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 165: ag_rp_165(PCB_POINTER, V(0,ParserDisplayName), V(2,ParserBasicToken)); break;
    case 166: ag_rp_166(PCB_POINTER); break;
    case 167: ag_rp_167(PCB_POINTER); break;
    case 168: ag_rp_168(PCB_POINTER); break;
    case 169: ag_rp_169(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 170: ag_rp_170(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 171: V(0,ParserBasicToken) = ag_rp_171(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 172: V(0,ParserBasicToken) = ag_rp_172(PCB_POINTER); break;
    case 173: V(0,ParserBasicToken) = ag_rp_173(PCB_POINTER); break;
    case 174: ag_rp_174(PCB_POINTER); break;
    case 175: ag_rp_175(PCB_POINTER); break;
    case 176: ag_rp_176(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 177: ag_rp_177(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserPort)); break;
    case 178: V(0,ParserBasicToken) = ag_rp_178(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 179: V(0,ParserBasicToken) = ag_rp_179(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 180: V(0,ParserBasicToken) = ag_rp_180(PCB_POINTER); break;
    case 181: V(0,ParserBasicToken) = ag_rp_181(PCB_POINTER); break;
    case 182: V(0,ParserBasicToken) = ag_rp_182(PCB_POINTER); break;
    case 183: ag_rp_183(PCB_POINTER); break;
    case 184: ag_rp_184(PCB_POINTER); break;
    case 185: ag_rp_185(PCB_POINTER); break;
    case 186: ag_rp_186(PCB_POINTER); break;
    case 187: ag_rp_187(PCB_POINTER, V(0,ParserTransport)); break;
    case 188: ag_rp_188(PCB_POINTER, V(0,ParserUserParam)); break;
    case 189: ag_rp_189(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 190: ag_rp_190(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 191: ag_rp_191(PCB_POINTER, V(0,ParserMethod)); break;
    case 192: ag_rp_192(PCB_POINTER, V(0,ParserLrParamType)); break;
    case 193: ag_rp_193(PCB_POINTER, V(0,ParserCompParam)); break;
    case 194: ag_rp_194(PCB_POINTER, V(0,ParserTokenizedByParam)); break;
    case 195: ag_rp_195(PCB_POINTER, V(0,RvBool)); break;
    case 196: ag_rp_196(PCB_POINTER); break;
    case 197: V(0,ParserTransport) = ag_rp_197(PCB_POINTER, V(4,ParserTransport)); break;
    case 198: V(0,ParserUserParam) = ag_rp_198(PCB_POINTER, V(4,RvSipUserParam)); break;
    case 199: V(0,ParserUserParam) = ag_rp_199(PCB_POINTER, V(4,ParserOtherUser)); break;
    case 200: V(0,RvSipUserParam) = ag_rp_200(PCB_POINTER); break;
    case 201: V(0,RvSipUserParam) = ag_rp_201(PCB_POINTER); break;
    case 202: V(0,ParserOtherUser) = ag_rp_202(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 203: V(0,ParserTtlParam) = ag_rp_203(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 204: V(0,ParserMaddrParam) = ag_rp_204(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 205: V(0,ParserMethod) = ag_rp_205(PCB_POINTER, V(4,ParserMethod)); break;
    case 206: V(0,ParserLrParamType) = ag_rp_206(PCB_POINTER); break;
    case 207: V(0,ParserLrParamType) = ag_rp_207(PCB_POINTER); break;
    case 208: V(0,ParserLrParamType) = ag_rp_208(PCB_POINTER); break;
    case 209: V(0,ParserLrParamType) = ag_rp_209(PCB_POINTER); break;
    case 210: V(0,ParserCompParam) = ag_rp_210(PCB_POINTER, V(4,ParserCompParam)); break;
    case 211: V(0,ParserTokenizedByParam) = ag_rp_211(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 212: V(0,RvBool) = ag_rp_212(PCB_POINTER); break;
    case 213: ag_rp_213(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 214: ag_rp_214(PCB_POINTER, V(0,ParserBasicToken), V(1,ParserBasicToken)); break;
    case 215: V(0,ParserBasicToken) = ag_rp_215(PCB_POINTER); break;
    case 216: V(0,ParserBasicToken) = ag_rp_216(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 217: V(0,ParserOptionalHeaders) = ag_rp_217(PCB_POINTER); break;
    case 218: V(0,ParserOptionalHeaders) = ag_rp_218(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 219: V(0,ParserBasicToken) = ag_rp_219(PCB_POINTER); break;
    case 220: V(0,ParserBasicToken) = ag_rp_220(PCB_POINTER); break;
    case 221: V(0,ParserBasicToken) = ag_rp_221(PCB_POINTER); break;
    case 222: V(0,ParserBasicToken) = ag_rp_222(PCB_POINTER); break;
    case 223: V(0,ParserBasicToken) = ag_rp_223(PCB_POINTER); break;
    case 224: ag_rp_224(PCB_POINTER); break;
    case 225: ag_rp_225(PCB_POINTER, V(0,ParserMethod), V(4,ParserSipVersion)); break;
    case 226: V(0,ParserMethod) = ag_rp_226(PCB_POINTER); break;
    case 227: V(0,ParserMethod) = ag_rp_227(PCB_POINTER); break;
    case 228: V(0,ParserMethod) = ag_rp_228(PCB_POINTER); break;
    case 229: V(0,ParserMethod) = ag_rp_229(PCB_POINTER); break;
    case 230: V(0,ParserMethod) = ag_rp_230(PCB_POINTER); break;
    case 231: V(0,ParserMethod) = ag_rp_231(PCB_POINTER); break;
    case 232: V(0,ParserMethod) = ag_rp_232(PCB_POINTER); break;
    case 233: V(0,ParserMethod) = ag_rp_233(PCB_POINTER); break;
    case 234: V(0,ParserMethod) = ag_rp_234(PCB_POINTER); break;
    case 235: V(0,ParserMethod) = ag_rp_235(PCB_POINTER); break;
    case 236: V(0,ParserMethod) = ag_rp_236(PCB_POINTER); break;
    case 237: V(0,ParserMethod) = ag_rp_237(PCB_POINTER); break;
    case 238: V(0,ParserMethod) = ag_rp_238(PCB_POINTER); break;
    case 239: V(0,ParserMethod) = ag_rp_239(PCB_POINTER, V(0,ParserMethod)); break;
    case 240: ag_rp_240(PCB_POINTER); break;
    case 241: ag_rp_241(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 242: ag_rp_242(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 243: ag_rp_243(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 244: ag_rp_244(PCB_POINTER); break;
    case 245: ag_rp_245(PCB_POINTER); break;
    case 246: ag_rp_246(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 247: ag_rp_247(PCB_POINTER); break;
    case 248: ag_rp_248(PCB_POINTER, V(1,ParserPartyParams)); break;
    case 249: ag_rp_249(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 250: ag_rp_250(PCB_POINTER); break;
    case 251: V(0,ParserDisplayName) = ag_rp_251(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 252: V(0,ParserDisplayName) = ag_rp_252(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 253: V(0,ParserBasicToken) = ag_rp_253(PCB_POINTER); break;
    case 254: V(0,ParserBasicToken) = ag_rp_254(PCB_POINTER); break;
    case 255: V(0,ParserTagParam) = ag_rp_255(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 256: V(0,ParserPartyParams) = ag_rp_256(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 257: V(0,ParserPartyParams) = ag_rp_257(PCB_POINTER, V(0,ParserPartyParams), V(3,ParserPartyParams)); break;
    case 258: V(0,ParserPartyParams) = ag_rp_258(PCB_POINTER, V(0,ParserTagParam)); break;
    case 259: V(0,ParserPartyParams) = ag_rp_259(PCB_POINTER); break;
    case 260: ag_rp_260(PCB_POINTER); break;
    case 261: ag_rp_261(PCB_POINTER); break;
    case 262: ag_rp_262(PCB_POINTER); break;
    case 263: ag_rp_263(PCB_POINTER); break;
    case 264: ag_rp_264(PCB_POINTER); break;
    case 265: ag_rp_265(PCB_POINTER); break;
    case 266: ag_rp_266(PCB_POINTER); break;
    case 267: ag_rp_267(PCB_POINTER, V(0,ParserQVal)); break;
    case 268: ag_rp_268(PCB_POINTER, V(0,ParserContactActionType)); break;
    case 269: ag_rp_269(PCB_POINTER); break;
    case 270: ag_rp_270(PCB_POINTER); break;
    case 271: V(0,ParserQVal) = ag_rp_271(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 272: V(0,ParserBasicToken) = ag_rp_272(PCB_POINTER); break;
    case 273: V(0,ParserBasicToken) = ag_rp_273(PCB_POINTER); break;
    case 274: V(0,ParserContactActionType) = ag_rp_274(PCB_POINTER, V(4,ParserContactActionType)); break;
    case 275: V(0,ParserContactActionType) = ag_rp_275(PCB_POINTER); break;
    case 276: V(0,ParserContactActionType) = ag_rp_276(PCB_POINTER); break;
    case 277: ag_rp_277(PCB_POINTER); break;
    case 278: ag_rp_278(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 279: ag_rp_279(PCB_POINTER, V(2,ParserSipDate)); break;
    case 280: ag_rp_280(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 281: ag_rp_281(PCB_POINTER, V(0,ParserSipDate)); break;
    case 282: V(0,ParserDeltaSeconds) = ag_rp_282(PCB_POINTER); break;
    case 283: ag_rp_283(PCB_POINTER, V(0,ParserSipDate)); break;
    case 284: V(0,ParserSipDate) = ag_rp_284(PCB_POINTER, V(0,ParserDDMMYY), V(2,ParserTime)); break;
    case 285: V(0,ParserSipDate) = ag_rp_285(PCB_POINTER, V(0,ParserSipDate)); break;
    case 286: V(0,ParserSipDate) = ag_rp_286(PCB_POINTER, V(0,RvSipDateWeekDay), V(4,ParserDDMMYY), V(6,ParserTime)); break;
    case 287: V(0,RvSipDateWeekDay) = ag_rp_287(PCB_POINTER); break;
    case 288: V(0,RvSipDateWeekDay) = ag_rp_288(PCB_POINTER); break;
    case 289: V(0,RvSipDateWeekDay) = ag_rp_289(PCB_POINTER); break;
    case 290: V(0,RvSipDateWeekDay) = ag_rp_290(PCB_POINTER); break;
    case 291: V(0,RvSipDateWeekDay) = ag_rp_291(PCB_POINTER); break;
    case 292: V(0,RvSipDateWeekDay) = ag_rp_292(PCB_POINTER); break;
    case 293: V(0,RvSipDateWeekDay) = ag_rp_293(PCB_POINTER); break;
    case 294: V(0,ParserDDMMYY) = ag_rp_294(PCB_POINTER, V(0,ParserInt32), V(2,RvSipDateMonth), V(4,ParserInt32)); break;
    case 295: V(0,ParserInt32) = ag_rp_295(PCB_POINTER, V(0,int)); break;
    case 296: V(0,ParserInt32) = ag_rp_296(PCB_POINTER, V(0,int), V(1,int)); break;
    case 297: V(0,RvSipDateMonth) = ag_rp_297(PCB_POINTER); break;
    case 298: V(0,RvSipDateMonth) = ag_rp_298(PCB_POINTER); break;
    case 299: V(0,RvSipDateMonth) = ag_rp_299(PCB_POINTER); break;
    case 300: V(0,RvSipDateMonth) = ag_rp_300(PCB_POINTER); break;
    case 301: V(0,RvSipDateMonth) = ag_rp_301(PCB_POINTER); break;
    case 302: V(0,RvSipDateMonth) = ag_rp_302(PCB_POINTER); break;
    case 303: V(0,RvSipDateMonth) = ag_rp_303(PCB_POINTER); break;
    case 304: V(0,RvSipDateMonth) = ag_rp_304(PCB_POINTER); break;
    case 305: V(0,RvSipDateMonth) = ag_rp_305(PCB_POINTER); break;
    case 306: V(0,RvSipDateMonth) = ag_rp_306(PCB_POINTER); break;
    case 307: V(0,RvSipDateMonth) = ag_rp_307(PCB_POINTER); break;
    case 308: V(0,RvSipDateMonth) = ag_rp_308(PCB_POINTER); break;
    case 309: V(0,ParserInt32) = ag_rp_309(PCB_POINTER, V(0,int), V(1,int)); break;
    case 310: V(0,ParserInt32) = ag_rp_310(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 311: V(0,ParserInt32) = ag_rp_311(PCB_POINTER, V(0,int), V(1,int), V(2,int), V(3,int)); break;
    case 312: V(0,ParserTime) = ag_rp_312(PCB_POINTER, V(0,ParserInt32), V(2,ParserInt32), V(4,ParserInt32), V(6,ParserTimeZone)); break;
    case 313: V(0,ParserInt32) = ag_rp_313(PCB_POINTER, V(0,int), V(1,int)); break;
    case 314: V(0,ParserInt32) = ag_rp_314(PCB_POINTER, V(0,int), V(1,int)); break;
    case 315: V(0,ParserInt32) = ag_rp_315(PCB_POINTER, V(0,int), V(1,int)); break;
    case 316: V(0,ParserTimeZone) = ag_rp_316(PCB_POINTER); break;
    case 317: V(0,ParserTimeZone) = ag_rp_317(PCB_POINTER); break;
    case 318: V(0,ParserTimeZone) = ag_rp_318(PCB_POINTER); break;
    case 319: ag_rp_319(PCB_POINTER, V(0,ParserMethod)); break;
    case 320: ag_rp_320(PCB_POINTER, V(0,ParserMethod), V(4,ParserBasicToken)); break;
    case 321: ag_rp_321(PCB_POINTER); break;
    case 322: ag_rp_322(PCB_POINTER); break;
    case 323: ag_rp_323(PCB_POINTER); break;
    case 324: ag_rp_324(PCB_POINTER); break;
    case 325: ag_rp_325(PCB_POINTER); break;
    case 326: ag_rp_326(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,ParserRetryParam)); break;
    case 327: ag_rp_327(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 328: ag_rp_328(PCB_POINTER, V(0,ParserSipDate), V(3,ParserRetryParam)); break;
    case 329: ag_rp_329(PCB_POINTER, V(0,ParserSipDate)); break;
    case 330: ag_rp_330(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 331: V(0,ParserRetryParam) = ag_rp_331(PCB_POINTER, V(2,ParserDeltaSeconds)); break;
    case 332: V(0,ParserRetryParam) = ag_rp_332(PCB_POINTER); break;
    case 333: V(0,ParserRetryParam) = ag_rp_333(PCB_POINTER, V(0,ParserRetryParam), V(3,ParserDeltaSeconds)); break;
    case 334: V(0,ParserRetryParam) = ag_rp_334(PCB_POINTER, V(0,ParserRetryParam)); break;
    case 335: V(0,ParserDeltaSeconds) = ag_rp_335(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 336: ag_rp_336(PCB_POINTER, V(0,ParserRSeq)); break;
    case 337: V(0,ParserRSeq) = ag_rp_337(PCB_POINTER, V(0,ParserResponseNum)); break;
    case 338: V(0,ParserResponseNum) = ag_rp_338(PCB_POINTER); break;
    case 339: ag_rp_339(PCB_POINTER); break;
    case 340: ag_rp_340(PCB_POINTER, V(0,ParserResponseNum), V(2,ParserSequenceNumber), V(4,ParserMethod)); break;
    case 341: V(0,ParserBasicToken) = ag_rp_341(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 342: ag_rp_342(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 343: ag_rp_343(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 344: ag_rp_344(PCB_POINTER); break;
    case 345: ag_rp_345(PCB_POINTER); break;
    case 346: ag_rp_346(PCB_POINTER); break;
    case 347: ag_rp_347(PCB_POINTER); break;
    case 348: ag_rp_348(PCB_POINTER); break;
    case 349: ag_rp_349(PCB_POINTER); break;
    case 350: ag_rp_350(PCB_POINTER); break;
    case 351: ag_rp_351(PCB_POINTER); break;
    case 352: ag_rp_352(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 353: ag_rp_353(PCB_POINTER); break;
    case 354: V(0,ParserQuotedString) = ag_rp_354(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 355: V(0,ParserQuotedString) = ag_rp_355(PCB_POINTER); break;
    case 356: ag_rp_356(PCB_POINTER); break;
    case 357: ag_rp_357(PCB_POINTER, V(0,ParserEventType)); break;
    case 358: ag_rp_358(PCB_POINTER, V(0,ParserEventType)); break;
    case 359: V(0,ParserEventType) = ag_rp_359(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 360: V(0,ParserEventType) = ag_rp_360(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 361: V(0,ParserBasicToken) = ag_rp_361(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 362: V(0,ParserBasicToken) = ag_rp_362(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 363: ag_rp_363(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 364: ag_rp_364(PCB_POINTER); break;
    case 365: V(0,ParserBasicToken) = ag_rp_365(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 366: ag_rp_366(PCB_POINTER, V(0,ParserEventType)); break;
    case 367: ag_rp_367(PCB_POINTER, V(3,ParserEventType)); break;
    case 368: ag_rp_368(PCB_POINTER); break;
    case 369: ag_rp_369(PCB_POINTER, V(0,ParserSubsStateValue)); break;
    case 370: ag_rp_370(PCB_POINTER, V(0,ParserSubsStateValue)); break;
    case 371: V(0,ParserSubsStateValue) = ag_rp_371(PCB_POINTER); break;
    case 372: V(0,ParserSubsStateValue) = ag_rp_372(PCB_POINTER); break;
    case 373: V(0,ParserSubsStateValue) = ag_rp_373(PCB_POINTER); break;
    case 374: V(0,ParserSubsStateValue) = ag_rp_374(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 375: ag_rp_375(PCB_POINTER, V(0,ParserSubsStateReason)); break;
    case 376: ag_rp_376(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 377: ag_rp_377(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 378: ag_rp_378(PCB_POINTER); break;
    case 379: V(0,ParserBasicToken) = ag_rp_379(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 380: V(0,ParserBasicToken) = ag_rp_380(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 381: V(0,ParserSubsStateReason) = ag_rp_381(PCB_POINTER, V(4,ParserSubsStateReason)); break;
    case 382: V(0,ParserSubsStateReason) = ag_rp_382(PCB_POINTER); break;
    case 383: V(0,ParserSubsStateReason) = ag_rp_383(PCB_POINTER); break;
    case 384: V(0,ParserSubsStateReason) = ag_rp_384(PCB_POINTER); break;
    case 385: V(0,ParserSubsStateReason) = ag_rp_385(PCB_POINTER); break;
    case 386: V(0,ParserSubsStateReason) = ag_rp_386(PCB_POINTER); break;
    case 387: V(0,ParserSubsStateReason) = ag_rp_387(PCB_POINTER); break;
    case 388: V(0,ParserSubsStateReason) = ag_rp_388(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 389: ag_rp_389(PCB_POINTER); break;
    case 390: ag_rp_390(PCB_POINTER, V(0,ParserDisposition), V(2,ParserDispositionParams)); break;
    case 391: ag_rp_391(PCB_POINTER, V(0,ParserDisposition)); break;
    case 392: V(0,ParserDisposition) = ag_rp_392(PCB_POINTER); break;
    case 393: V(0,ParserDisposition) = ag_rp_393(PCB_POINTER); break;
    case 394: V(0,ParserDisposition) = ag_rp_394(PCB_POINTER); break;
    case 395: V(0,ParserDisposition) = ag_rp_395(PCB_POINTER); break;
    case 396: V(0,ParserDisposition) = ag_rp_396(PCB_POINTER); break;
    case 397: V(0,ParserDisposition) = ag_rp_397(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 398: V(0,ParserDispositionParams) = ag_rp_398(PCB_POINTER, V(0,ParserDispositionParam)); break;
    case 399: V(0,ParserDispositionParams) = ag_rp_399(PCB_POINTER); break;
    case 400: V(0,ParserDispositionParams) = ag_rp_400(PCB_POINTER, V(0,ParserDispositionParams), V(1,ParserDispositionParam)); break;
    case 401: V(0,ParserDispositionParams) = ag_rp_401(PCB_POINTER, V(0,ParserDispositionParams)); break;
    case 402: V(0,ParserDispositionParam) = ag_rp_402(PCB_POINTER); break;
    case 403: V(0,ParserDispositionParam) = ag_rp_403(PCB_POINTER); break;
    case 404: V(0,ParserDispositionParam) = ag_rp_404(PCB_POINTER, V(6,ParserBasicToken)); break;
    case 405: ag_rp_405(PCB_POINTER, V(0,ParserSessionExpiresHeader)); break;
    case 406: V(0,ParserSessionExpiresHeader) = ag_rp_406(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 407: V(0,ParserSessionExpiresHeader) = ag_rp_407(PCB_POINTER, V(0,ParserDeltaSeconds), V(2,RvSipSessionExpiresRefresherType)); break;
    case 408: V(0,ParserSessionExpiresHeader) = ag_rp_408(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 409: V(0,ParserSessionExpiresHeader) = ag_rp_409(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,RvSipSessionExpiresRefresherType)); break;
    case 410: V(0,RvSipSessionExpiresRefresherType) = ag_rp_410(PCB_POINTER, V(6,RvSipSessionExpiresRefresherType)); break;
    case 411: V(0,RvSipSessionExpiresRefresherType) = ag_rp_411(PCB_POINTER); break;
    case 412: V(0,RvSipSessionExpiresRefresherType) = ag_rp_412(PCB_POINTER); break;
    case 413: ag_rp_413(PCB_POINTER, V(0,ParserMinSEHeader)); break;
    case 414: V(0,ParserMinSEHeader) = ag_rp_414(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 415: ag_rp_415(PCB_POINTER, V(0,ParserCallId)); break;
    case 416: ag_rp_416(PCB_POINTER, V(0,ParserCallId)); break;
    case 417: ag_rp_417(PCB_POINTER); break;
    case 418: ag_rp_418(PCB_POINTER); break;
    case 419: ag_rp_419(PCB_POINTER, V(0,ParserTagParam)); break;
    case 420: ag_rp_420(PCB_POINTER, V(0,ParserTagParam)); break;
    case 421: ag_rp_421(PCB_POINTER, V(0,ParserReplacesEarlyFlagParamType)); break;
    case 422: ag_rp_422(PCB_POINTER); break;
    case 423: V(0,ParserTagParam) = ag_rp_423(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 424: V(0,ParserTagParam) = ag_rp_424(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 425: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_425(PCB_POINTER); break;
    case 426: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_426(PCB_POINTER); break;
    case 427: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_427(PCB_POINTER); break;
  }
  (PCB).la_ptr = (PCB).pointer;
}
static int ag_action_1_r_proc(PCB_DECL);
static int ag_action_2_r_proc(PCB_DECL);
static int ag_action_3_r_proc(PCB_DECL);
static int ag_action_4_r_proc(PCB_DECL);
static int ag_action_1_s_proc(PCB_DECL);
static int ag_action_3_s_proc(PCB_DECL);
static int ag_action_1_proc(PCB_DECL);
static int ag_action_2_proc(PCB_DECL);
static int ag_action_3_proc(PCB_DECL);
static int ag_action_4_proc(PCB_DECL);
static int ag_action_5_proc(PCB_DECL);
static int ag_action_6_proc(PCB_DECL);
static int ag_action_7_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int ag_action_9_proc(PCB_DECL);
static int ag_action_10_proc(PCB_DECL);
static int ag_action_11_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int (*const  ag_r_procs_scan[])(PCB_DECL) = {
  ag_action_1_r_proc,
  ag_action_2_r_proc,
  ag_action_3_r_proc,
  ag_action_4_r_proc
};
static int (*const  ag_s_procs_scan[])(PCB_DECL) = {
  ag_action_1_s_proc,
  ag_action_2_r_proc,
  ag_action_3_s_proc,
  ag_action_4_r_proc
};
static int (*const  ag_gt_procs_scan[])(PCB_DECL) = {
  ag_action_1_proc,
  ag_action_2_proc,
  ag_action_3_proc,
  ag_action_4_proc,
  ag_action_5_proc,
  ag_action_6_proc,
  ag_action_7_proc,
  ag_action_8_proc,
  ag_action_9_proc,
  ag_action_10_proc,
  ag_action_11_proc,
  ag_action_8_proc
};
static int ag_action_10_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    ag_track(PCB_POINTER);
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  } while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_11_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
    (PCB).ssx--;
    ag_track(PCB_POINTER);
    ag_ra(PCB_POINTER);
    if ((PCB).exit_flag != AG_RUNNING_CODE) return 0;
    (PCB).ssx++;
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  }
  while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_3_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_3_s_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;;
}
static int ag_action_4_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  return 1;
}
static int ag_action_2_proc(PCB_DECL) {
  if ((PCB).ssx >= 28) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  ag_track(PCB_POINTER);
  return 0;
}
static int ag_action_9_proc(PCB_DECL) {
  if ((PCB).ssx >= 28) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (PCB).vs[(PCB).ssx] = ag_null_value;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  (PCB).la_ptr =  (PCB).pointer;
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_2_r_proc(PCB_DECL) {
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  return 0;
}
static int ag_action_7_proc(PCB_DECL) {
  --(PCB).ssx;
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_proc(PCB_DECL) {
  ag_track(PCB_POINTER);
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_r_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_s_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_4_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_3_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_8_proc(PCB_DECL) {
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SYNTAX_ERROR_CODE;
  SYNTAX_ERROR;
  {(PCB).la_ptr = (PCB).pointer + 1; ag_track(PCB_POINTER);}
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_5_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else {
    if ((PCB).ssx >= 28) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_6_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  if (ag_sd) {
    (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  }
  else {
    if ((PCB).ssx >= 28) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).vs[(PCB).ssx] = ag_null_value;
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
void init_SipParser(SipParser_pcb_type *PCB_POINTER) {
  (PCB).la_ptr = (PCB).pointer;
  (PCB).error_message = "Syntax Error";
  (PCB).ss[0] = (PCB).sn = (PCB).ssx = 0;
  (PCB).exit_flag = AG_RUNNING_CODE;
  (PCB).line = FIRST_LINE;
  (PCB).column = FIRST_COLUMN;
}
void SipParser(SipParser_pcb_type *PCB_POINTER) {
  init_SipParser(PCB_POINTER);
  (PCB).exit_flag = AG_RUNNING_CODE;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbt[(PCB).sn];
    if (ag_tstt[ag_t1]) {
      unsigned ag_t2 = ag_sbe[(PCB).sn] - 1;
      (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
      (PCB).la_ptr++;
      if (ag_key_index[(PCB).sn]) {
        unsigned ag_k = ag_key_index[(PCB).sn];
        int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
        while (ag_key_ch[ag_k] < ag_ch) ag_k++;
        if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
      }
      do {
        unsigned ag_tx = (ag_t1 + ag_t2)/2;
        if (ag_tstt[ag_tx] > (const unsigned short)(PCB).token_number)
          ag_t1 = ag_tx + 1;
        else ag_t2 = ag_tx;
      } while (ag_t1 < ag_t2);
      if (ag_tstt[ag_t1] != (const unsigned short)(PCB).token_number)
        ag_t1 = ag_sbe[(PCB).sn];
    }
    (PCB).ag_ap = ag_pstt[ag_t1];
    (ag_gt_procs_scan[ag_astt[ag_t1]])((PCB_TYPE *)PCB_POINTER);
  }
}
#elif !defined(RV_SIP_IMS_DCS_HEADER_SUPPORT) && !defined(RV_SIP_IMS_HEADER_SUPPORT) && !defined(RV_SIP_EXTENDED_HEADER_SUPPORT) && !defined(RV_SIP_JSR32_SUPPORT) && !defined(RV_SIP_LIGHT) && !defined(RV_SIP_TEL_URI_SUPPORT) && !defined(RV_SIP_PRIMITIVES) && defined(RV_SIP_AUTH_ON) && !defined(RV_SIP_SUBS_ON)
/*
 AnaGram Parsing Engine
 Copyright (c) 1993-1999, Parsifal Software.
 All Rights Reserved.
 Serial number 2P20671
 Registered to:
   Meir Fuchs
   RADVision Ltd.
*/
#ifndef PARSERENGINECLASSIC_H_1165245782
#include ".\ParserEngineClassic.h"
#endif
#ifndef PARSERENGINECLASSIC_H_1165245782
#error Mismatched header file
#endif
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define RULE_CONTEXT (&((PCB).cs[(PCB).ssx]))
#define ERROR_CONTEXT ((PCB).cs[(PCB).error_frame_ssx])
#define CONTEXT ((PCB).cs[(PCB).ssx])
#ifndef PCB_TYPE
#define PCB_TYPE SipParser_pcb_type
#endif
#define PCB (*pcb_pointer)
#define PCB_DECL PCB_TYPE *pcb_pointer
#define PCB_POINTER pcb_pointer
#define CHANGE_REDUCTION(x) SipParser_change_reduction(PCB_POINTER, SipParser_##x##_token)
int SipParser_change_reduction(PCB_DECL, SipParser_token_type);
#ifndef CONVERT_CASE
static const char agCaseTable[31] = {
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,    0,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
};
static int agConvertCase(int c) {
  if (c >= 'a' && c <= 'z') return c ^= 0x20;
  if (c >= 0xe0 && c < 0xff) c ^= agCaseTable[c-0xe0];
  return c;
}
#define CONVERT_CASE(c) agConvertCase(c)
#endif
#ifndef TAB_SPACING
#define TAB_SPACING 8
#endif
#define ag_rp_1(PCB_POINTER) (SET_HEADER_VALUE())
#define ag_rp_2(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_3(PCB_POINTER) (SIP_BEGIN_TOKEN())
static void ag_rp_4(PCB_DECL) {
/* Line 300, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        REMOVE_COMMA_BETWEEN_HEADERS();
    
}
#define ag_rp_5(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_6(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_7(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_8(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_9(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_10(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_11(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_12(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_13(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_14(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_15(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_16(PCB_POINTER) (CUR_STRING())
#define ag_rp_17(PCB_POINTER) (CUR_STRING())
#define ag_rp_18(PCB_POINTER) (CUR_STRING())
#define ag_rp_19(PCB_POINTER) (CUR_STRING())
#define ag_rp_20(PCB_POINTER) (CUR_STRING())
#define ag_rp_21(PCB_POINTER) (CUR_STRING())
#define ag_rp_22(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_INVITE))
#define ag_rp_23(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_ACK))
#define ag_rp_24(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_BYE))
#define ag_rp_25(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_CANCEL))
#define ag_rp_26(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_REGISTER))
#define ag_rp_27(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_PRACK))
static ParserMethod ag_rp_28(PCB_DECL, ParserBasicToken t) {
/* Line 490, RV SIP Stack */
 ParserMethod method;
                            method.type = PARSER_METHOD_TYPE_OTHER;
                            method.other = t;
                            RV_UNUSED_ARG(pcb_pointer);
                            return method;
                          
}
static void ag_rp_29(PCB_DECL, ParserCSeq cseq) {
/* Line 506, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitCSeq(PCB.pParserMgr, PCB.pointer,&cseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
static ParserCSeq ag_rp_30(PCB_DECL, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 527, RV SIP Stack */
        ParserCSeq cseq;
        cseq.method = method;
		cseq.sequenceNumber = sequenceNumber;
        RV_UNUSED_ARG(pcb_pointer);
        return(cseq);
	 
}
#define ag_rp_31(PCB_POINTER) (CUR_STRING())
static void ag_rp_32(PCB_DECL, ParserContentLength contentLength) {
/* Line 549, RV SIP Stack */
          RvStatus status;
          contentLength.isCompact = PCB.isCompactForm;
          status = ParserInitContentLength(PCB.pParserMgr,PCB.pointer,&contentLength,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
     
}
static ParserContentLength ag_rp_33(PCB_DECL) {
/* Line 572, RV SIP Stack */
        ParserContentLength contentLength;
        contentLength.contentLenVal = CUR_STRING();
        return contentLength;
    
}
static void ag_rp_34(PCB_DECL, ParserCallId callId) {
/* Line 587, RV SIP Stack */
  
          RvStatus status;
          callId.isCompact = PCB.isCompactForm;
          status = ParserInitCallId(PCB.pParserMgr,PCB.pointer,&callId,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if(RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
    
}
static ParserCallId ag_rp_35(PCB_DECL, ParserBasicToken token) {
/* Line 609, RV SIP Stack */
         ParserCallId callId;
         callId.callIdVal = token;
         callId.isCompact = PCB.isCompactForm;
         return callId;
    
}
static ParserCallId ag_rp_36(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 616, RV SIP Stack */
        ParserCallId callId;
        token.len = (token2.len +token.len + 1);
        callId.callIdVal = token;
        callId.isCompact = PCB.isCompactForm;
        return callId;
    
}
static void ag_rp_37(PCB_DECL) {
/* Line 634, RV SIP Stack */
        RvStatus status;
        PCB.contentType.isCompactForm = PCB.isCompactForm;
        status = ParserInitContentType(PCB.pParserMgr,PCB.pointer,&(PCB.contentType),PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status) 
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_TYPE, &PCB);
     
}
static void ag_rp_38(PCB_DECL, ParserMediaType t, ParserMediaSubType st) {
/* Line 663, RV SIP Stack */
 
        PCB.contentType.mediaType    = t;
        PCB.contentType.mediaSubType = st;
        PCB.contentType.genericParamList = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             PCB.contentType.genericParamList=PCB.pExtParams;
        }
    
}
static void ag_rp_39(PCB_DECL) {
/* Line 676, RV SIP Stack */
 
	           PCB.contentType.params.isBoundary  = RV_FALSE;
  	           PCB.contentType.params.isVersion   = RV_FALSE;
               PCB.contentType.params.isBase      = RV_FALSE;
            
}
static void ag_rp_40(PCB_DECL, ParserBoundary b) {
/* Line 694, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_41(PCB_DECL, ParserBase v) {
/* Line 701, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_42(PCB_DECL, ParserBase b) {
/* Line 708, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
static void ag_rp_43(PCB_DECL) {
/* Line 716, RV SIP Stack */
        
        
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
    
}
static void ag_rp_44(PCB_DECL, ParserBoundary b) {
/* Line 731, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_45(PCB_DECL, ParserBase v) {
/* Line 736, RV SIP Stack */
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_46(PCB_DECL, ParserBase b) {
/* Line 741, RV SIP Stack */
        PCB.contentType.params.isBase = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
#define ag_rp_47(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_TEXT))
#define ag_rp_48(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_IMAGE))
#define ag_rp_49(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_AUDIO))
#define ag_rp_50(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_VIDEO))
#define ag_rp_51(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_APPLICATION))
#define ag_rp_52(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MULTIPART))
#define ag_rp_53(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MESSAGE))
static ParserMediaType ag_rp_54(PCB_DECL, ParserBasicToken t) {
/* Line 761, RV SIP Stack */
		ParserMediaType mediaType;
		mediaType.type = RVSIP_MEDIATYPE_OTHER;
		mediaType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaType;
	
}
#define ag_rp_55(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_PLAIN))
#define ag_rp_56(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_SDP))
#define ag_rp_57(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ISUP))
#define ag_rp_58(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_QSIG))
#define ag_rp_59(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_MIXED))
#define ag_rp_60(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ALTERNATIVE))
#define ag_rp_61(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_DIGEST))
#define ag_rp_62(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_RFC822))
#define ag_rp_63(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_3GPP_IMS_XML))
static ParserMediaSubType ag_rp_64(PCB_DECL, ParserBasicToken t) {
/* Line 787, RV SIP Stack */
		ParserMediaSubType mediaSubType;
		mediaSubType.type = RVSIP_MEDIASUBTYPE_OTHER;
		mediaSubType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaSubType;
	
}
#define ag_rp_65(PCB_POINTER, t) (t)
#define ag_rp_66(PCB_POINTER, t) (t)
#define ag_rp_67(PCB_POINTER, t) (t)
#define ag_rp_68(PCB_POINTER, t) (t)
#define ag_rp_69(PCB_POINTER, t) (t)
#define ag_rp_70(PCB_POINTER, t) (t)
static void ag_rp_71(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 820, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
      else
      {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
   
}
#define ag_rp_72(PCB_POINTER, token) (token)
#define ag_rp_73(PCB_POINTER, qs) (qs)
static void ag_rp_74(PCB_DECL, ParserBasicToken token) {
/* Line 858, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token.buf,token.len, PCB.pExtParams);
      }
      else
      {      
          
          APPEND_DATA(token.buf,token.len,PCB.pExtParams);
      }
    
}
static void ag_rp_75(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 872, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
        else
        {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
    
}
#define ag_rp_76(PCB_POINTER, token) (token)
#define ag_rp_77(PCB_POINTER, qs) (qs)
static void ag_rp_78(PCB_DECL, ParserSipVersion ver, ParserStatusCode status, ParserReasonPhrase reason) {
/* Line 906, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;
        statusLine.reasonPhrase = reason;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if (RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
static void ag_rp_79(PCB_DECL, ParserSipVersion ver, ParserStatusCode status) {
/* Line 926, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;       
        statusLine.reasonPhrase.buf=NULL;
        statusLine.reasonPhrase.len=0;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
#define ag_rp_80(PCB_POINTER) (CUR_STRING())
#define ag_rp_81(PCB_POINTER) (CUR_STRING())
static ParserStatusCode ag_rp_82(PCB_DECL, int D100, int D10, int D1) {
/* Line 964, RV SIP Stack */
        RvUint16 code;
        RV_UNUSED_ARG(pcb_pointer);
        code =  (RvUint16)((D100 - '0')*100 + (D10 - '0')*10 + (D1 - '0'));
        return code;
    
}
static void ag_rp_83(PCB_DECL, ParserMethod met) {
/* Line 983, RV SIP Stack */
 
        RvStatus   status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_84(PCB_DECL, ParserMethod met) {
/* Line 1000, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_85(PCB_DECL) {
/* Line 1028, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr, &PCB, PCB.pointer, &(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
           
       }
       
    
}
static void ag_rp_86(PCB_DECL) {
/* Line 1056, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr,&PCB, PCB.pointer,&(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
       }
    
}
static void ag_rp_87(PCB_DECL) {
/* Line 1083, RV SIP Stack */
 
        PCB.singleVia.sentProtocol = PCB.sentProtocol;
        PCB.singleVia.sentBy       = PCB.viaSentBy;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            if (PCB.singleVia.params.isOtherParams==RV_FALSE)
            {
                PCB.singleVia.params.isOtherParams = RV_TRUE;
                PCB.singleVia.params.otherParam = PCB.pExtParams;
            }
        }                
    
}
static void ag_rp_88(PCB_DECL) {
/* Line 1100, RV SIP Stack */
 
        PCB.singleVia.params.hidden     = RV_FALSE;
        PCB.singleVia.params.alias     = RV_FALSE;
        PCB.singleVia.params.isTtl      = RV_FALSE;
        PCB.singleVia.params.isMaddr    = RV_FALSE;
	    PCB.singleVia.params.isReceived = RV_FALSE;
        PCB.singleVia.params.isBranch   = RV_FALSE;
        PCB.singleVia.params.isOtherParams=RV_FALSE;  
        PCB.singleVia.params.isRport	= RV_FALSE;
        PCB.singleVia.params.isComp     = RV_FALSE;
    
}
static void ag_rp_89(PCB_DECL, ParserViaParam p) {
/* Line 1114, RV SIP Stack */
        switch( p.paramType )
        {
            case PARSER_PARAM_TYPE_HIDDEN :
                PCB.singleVia.params.hidden = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_ALIAS:
                PCB.singleVia.params.alias = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_TTL :
                PCB.singleVia.params.isTtl = RV_TRUE;
                PCB.singleVia.params.ttl   = p.param.ttl;
                break;
            
            case PARSER_PARAM_TYPE_MADDR :
                PCB.singleVia.params.isMaddr = RV_TRUE;
                PCB.singleVia.params.maddr   = p.param.maddr;
                break;
            
            case PARSER_PARAM_TYPE_RECEIVED :
                PCB.singleVia.params.isReceived = RV_TRUE;
                PCB.singleVia.params.received   = p.param.received;
                break;
            
            case PARSER_PARAM_TYPE_BRANCH :
                PCB.singleVia.params.isBranch = RV_TRUE;
                PCB.singleVia.params.branch   = p.param.branch;
                break;
            case PARSER_PARAM_TYPE_RPORT:
                PCB.singleVia.params.isRport = RV_TRUE;
                PCB.singleVia.params.rPort   = p.param.rport;
                break;
                 
            case PARSER_PARAM_TYPE_COMP :
                PCB.singleVia.params.isComp  = RV_TRUE;
                PCB.singleVia.params.comp    = p.param.comp;
                break;   
            default:
                if (p.isOther == RV_TRUE)
                {
                     PCB.singleVia.params.isOtherParams = RV_TRUE;
                     PCB.singleVia.params.otherParam   = p.otherParam;
                }                   
                break;
        }       
    
}
static void ag_rp_90(PCB_DECL, ParserProtocolName pn, ParserProtocolVersion pv, ParserTransport t) {
/* Line 1166, RV SIP Stack */
 
        PCB.sentProtocol.protocolName    = pn;
        PCB.sentProtocol.protocolVersion = pv;
        PCB.sentProtocol.transport       = t;
    
}
#define ag_rp_91(PCB_POINTER, t) (t)
#define ag_rp_92(PCB_POINTER) (CUR_STRING())
#define ag_rp_93(PCB_POINTER, t) (t)
#define ag_rp_94(PCB_POINTER, t) (t)
static ParserTransport ag_rp_95(PCB_DECL) {
/* Line 1193, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_UDP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_96(PCB_DECL) {
/* Line 1200, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TCP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_97(PCB_DECL) {
/* Line 1207, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_SCTP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_98(PCB_DECL) {
/* Line 1214, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TLS;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_99(PCB_DECL, ParserBasicToken token) {
/* Line 1221, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_OTHER;
        t.strTransport = token;
        RV_UNUSED_ARG(pcb_pointer);
        return t;
    
}
#define ag_rp_100(PCB_POINTER) (CUR_STRING())
static void ag_rp_101(PCB_DECL, ParserBasicToken host) {
/* Line 1240, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_FALSE;
        PCB.viaSentBy.hostName = host;
     
}
static void ag_rp_102(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 1246, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_TRUE;
        PCB.viaSentBy.hostName = host;
        PCB.viaSentBy.port     = port;
      
}
static ParserViaParam ag_rp_103(PCB_DECL) {
/* Line 1260, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_HIDDEN;                   
          viaParam.param.hidden = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_104(PCB_DECL) {
/* Line 1269, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_ALIAS;                   
          viaParam.param.alias = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_105(PCB_DECL, ParserTTLParam t) {
/* Line 1278, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_TTL;                   
          viaParam.param.ttl = t;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_106(PCB_DECL, ParserMaddrParam ma) {
/* Line 1287, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_MADDR;                   
          viaParam.param.maddr = ma;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_107(PCB_DECL, ParserReceived r) {
/* Line 1296, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RECEIVED;                   
          viaParam.param.received = r;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_108(PCB_DECL, ParserBranch b) {
/* Line 1305, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_BRANCH;                   
          viaParam.param.branch = b;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_109(PCB_DECL, ParserPort rport) {
/* Line 1315, RV SIP Stack */
          ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RPORT;                   
          viaParam.param.rport = rport;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_110(PCB_DECL, ParserCompParam comp) {
/* Line 1324, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType  = PARSER_PARAM_TYPE_COMP;                   
          viaParam.param.comp = comp;
	      viaParam.isOther    = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_111(PCB_DECL) {
/* Line 1333, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_OTHER; 
	      viaParam.isOther = RV_TRUE;
          viaParam.otherParam = PCB.pExtParams;
          return viaParam;    
        
}
static void ag_rp_112(PCB_DECL, ParserBasicToken token) {
/* Line 1350, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1, PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
    
}
static void ag_rp_113(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1365, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_114(PCB_DECL, ParserBasicToken token, ParserQuotedString token2) {
/* Line 1384, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_115(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1407, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
#define ag_rp_116(PCB_POINTER, t) (t)
#define ag_rp_117(PCB_POINTER, ttl) (ttl)
#define ag_rp_118(PCB_POINTER) (CUR_STRING())
#define ag_rp_119(PCB_POINTER) (CUR_STRING())
#define ag_rp_120(PCB_POINTER) (CUR_STRING())
#define ag_rp_121(PCB_POINTER, rport) (rport)
static ParserPort ag_rp_122(PCB_DECL) {
/* Line 1462, RV SIP Stack */
        ParserPort port;
        port.len = 0;
		port.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return port;
    
}
#define ag_rp_123(PCB_POINTER, port) (port)
#define ag_rp_124(PCB_POINTER, ma) (ma)
#define ag_rp_125(PCB_POINTER, host) (host)
#define ag_rp_126(PCB_POINTER, host) (host)
#define ag_rp_127(PCB_POINTER, t) (t)
#define ag_rp_128(PCB_POINTER, comp) (comp)
static ParserCompParam ag_rp_129(PCB_DECL) {
/* Line 1499, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_SIGCOMP;
        comp.strCompParam = CUR_STRING();
        return comp;
    
}
static ParserCompParam ag_rp_130(PCB_DECL, ParserBasicToken token) {
/* Line 1506, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_OTHER;
        comp.strCompParam = CUR_STRING();
        RV_UNUSED_ARG(token.buf);
        return comp;
    
}
#define ag_rp_131(PCB_POINTER) (CUR_STRING())
#define ag_rp_132(PCB_POINTER) (CUR_STRING())
static void ag_rp_133(PCB_DECL) {
/* Line 1543, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
    
}
static void ag_rp_134(PCB_DECL) {
/* Line 1547, RV SIP Stack */
        PCB.parenCount++;
    
}
static void ag_rp_135(PCB_DECL) {
/* Line 1551, RV SIP Stack */
        if (PCB.parenCount-- == 0) 
        {
            CHANGE_REDUCTION(END_COMMENT);
        }
    
}
static void ag_rp_136(PCB_DECL, ParserAbsoluteUri uri) {
/* Line 1737, RV SIP Stack */
       RvStatus status;
       status = ParserInitAbsUri(PCB.pParserMgr, &PCB, &uri, PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (status != RV_OK)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
    
}
static ParserAbsoluteUri ag_rp_137(PCB_DECL, ParserBasicToken scheme, ParserBasicToken id) {
/* Line 1757, RV SIP Stack */
        ParserAbsoluteUri uri;
        uri.scheme = scheme;
        uri.idefntifier = id;
        RV_UNUSED_ARG(pcb_pointer);
        return uri;
    
}
#define ag_rp_138(PCB_POINTER) (CUR_STRING())
#define ag_rp_139(PCB_POINTER, displayName) (displayName)
#define ag_rp_140(PCB_POINTER) (CUR_STRING())
#define ag_rp_141(PCB_POINTER) (CUR_STRING())
static void ag_rp_142(PCB_DECL) {
/* Line 2158, RV SIP Stack */
        RvStatus status;
        status = ParserInitUrl(PCB.pParserMgr,&PCB,&(PCB.sipUrl), PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_URL_PARAMETER, &PCB);
    
}
#define ag_rp_143(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
#define ag_rp_144(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
static void ag_rp_145(PCB_DECL) {
/* Line 2209, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_FALSE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
static void ag_rp_146(PCB_DECL) {
/* Line 2215, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_TRUE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
#define ag_rp_147(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_148(PCB_DECL) {
/* Line 2227, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
		uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
#define ag_rp_149(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_RV_ABS))
static void ag_rp_150(PCB_DECL) {
/* Line 2243, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_FALSE);
    
}
#define ag_rp_151(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_152(PCB_DECL) {
/* Line 2253, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
        uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
static void ag_rp_153(PCB_DECL) {
/* Line 2266, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_TRUE);
    
}
static void ag_rp_154(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2274, RV SIP Stack */
  
           
         PCB.sipUrl.optionalHeaders = hs;
         
         if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
         {
              PCB.sipUrl.urlParameters.genericParamList= PCB.pUrlExtParams;
              PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
         }          
  	
}
static void ag_rp_155(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2285, RV SIP Stack */
  
         
       PCB.sipUrl.optionalHeaders = hs;
       
       if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
       {
            PCB.sipUrl.urlParameters.genericParamList=PCB.pUrlExtParams;
            PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
       }          
	
}
static void ag_rp_156(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2315, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_157(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2324, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_158(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2351, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_159(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2360, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_160(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2372, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_161(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2381, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_162(PCB_DECL, ParserDisplayName scheme, ParserBasicToken id) {
/* Line 2395, RV SIP Stack */
          PCB.exUri.ExUriInfo.absUri.scheme = scheme;
          PCB.exUri.ExUriInfo.absUri.idefntifier = id;
          PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_ABS_URI;
      
}
static void ag_rp_163(PCB_DECL) {
/* Line 2405, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_TRUE;
    
}
static void ag_rp_164(PCB_DECL) {
/* Line 2410, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_165(PCB_DECL) {
/* Line 2417, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_USERINFO);
    
}
static void ag_rp_166(PCB_DECL, ParserBasicToken user) {
/* Line 2423, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_FALSE;
    
}
static void ag_rp_167(PCB_DECL, ParserBasicToken user, ParserBasicToken pass) {
/* Line 2428, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_TRUE;
        PCB.sipUrl.urlUserInfo.password   = pass;
     
}
#define ag_rp_168(PCB_POINTER, t) (t)
#define ag_rp_169(PCB_POINTER) (CUR_STRING())
#define ag_rp_170(PCB_POINTER) (CUR_STRING())
static void ag_rp_171(PCB_DECL) {
/* Line 2461, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_172(PCB_DECL) {
/* Line 2467, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_HOST);
    
}
static void ag_rp_173(PCB_DECL, ParserBasicToken host) {
/* Line 2475, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_FALSE;
    
}
static void ag_rp_174(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 2481, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_TRUE;
        PCB.sipUrl.urlHost.port     = port;
    
}
#define ag_rp_175(PCB_POINTER, t) (t)
#define ag_rp_176(PCB_POINTER, ip6ref) (ip6ref)
#define ag_rp_177(PCB_POINTER) (CUR_STRING())
#define ag_rp_178(PCB_POINTER) (CUR_STRING())
#define ag_rp_179(PCB_POINTER) (CUR_STRING())
#define ag_rp_180(PCB_POINTER) (RESET_URI_PARAMS())
static void ag_rp_181(PCB_DECL) {
/* Line 2535, RV SIP Stack */
	
       PCB.sipUrl.urlParameters.isValid = RV_TRUE;
    
}
static void ag_rp_182(PCB_DECL) {
/* Line 2548, RV SIP Stack */
 
        RESET_URI_PARAMS();  
         								
        switch( PCB.urlParameter.paramType )
        {
            case PARSER_TRANSPORT_PARAM: 
	            PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
	            PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
	            break;
            case PARSER_USER_PARAM: 
	            PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
	            PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
	            break;		
            case PARSER_TTL_PARAM: 
	            PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
	            PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
	            break;
            case PARSER_MADDR_PARAM: 
	            PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
	            break;
            case PARSER_METHOD_PARAM: 
	            PCB.sipUrl.urlParameters.isMethodParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.methodParam         = PCB.urlParameter.param.methodParam; 
	            break;
            case PARSER_LR_PARAM: 
	            PCB.sipUrl.urlParameters.lrParamType         = PCB.urlParameter.param.lrParamType;
	            break;
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam         = RV_TRUE;
                PCB.sipUrl.urlParameters.compParam           = PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
	            break;
             default:
                 PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                 PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;            
        } 	 														
    
}
static void ag_rp_183(PCB_DECL) {
/* Line 2595, RV SIP Stack */
 
         
        switch( PCB.urlParameter.paramType )
        {
	        case PARSER_TRANSPORT_PARAM: 
		        PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
		        PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
		        break;
	        case PARSER_USER_PARAM: 
		        PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
		        PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
		        break;	
	        case PARSER_TTL_PARAM: 
		        PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
		        PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
		        break;
	        case PARSER_MADDR_PARAM: 
		        PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
		        PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
		        break;  
            case PARSER_METHOD_PARAM: 
		        PCB.sipUrl.urlParameters.isMethodParam		= RV_TRUE;
		        PCB.sipUrl.urlParameters.methodParam		= PCB.urlParameter.param.methodParam; 
		        break; 
            case PARSER_LR_PARAM: 
		        PCB.sipUrl.urlParameters.lrParamType		= PCB.urlParameter.param.lrParamType;
		        break; 
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam		= RV_TRUE;
                PCB.sipUrl.urlParameters.compParam			= PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
		        PCB.sipUrl.urlParameters.isOtherParams		= RV_TRUE;
		        break; 
            default:
                PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;                  
        }	 
    
}
static void ag_rp_184(PCB_DECL, ParserTransport t) {
/* Line 2645, RV SIP Stack */
 
         PCB.urlParameter.paramType = PARSER_TRANSPORT_PARAM;
         PCB.urlParameter.param.transport = t;
    
}
static void ag_rp_185(PCB_DECL, ParserUserParam u) {
/* Line 2650, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_USER_PARAM;
		 PCB.urlParameter.param.userParam = u;
	
}
static void ag_rp_186(PCB_DECL, ParserTtlParam t) {
/* Line 2655, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_TTL_PARAM;
		 PCB.urlParameter.param.ttlParam = t;
	
}
static void ag_rp_187(PCB_DECL, ParserMaddrParam ma) {
/* Line 2660, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_MADDR_PARAM;
		 PCB.urlParameter.param.maddrParam = ma;
	
}
static void ag_rp_188(PCB_DECL, ParserMethod met) {
/* Line 2666, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_METHOD_PARAM;
		 PCB.urlParameter.param.methodParam =met;
    
}
static void ag_rp_189(PCB_DECL, ParserLrParamType lrParam) {
/* Line 2671, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_LR_PARAM;
		 PCB.urlParameter.param.lrParamType   = lrParam;
    
}
static void ag_rp_190(PCB_DECL, ParserCompParam comp) {
/* Line 2676, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_COMP_PARAM;
        PCB.urlParameter.param.compParam = comp;
    
}
static void ag_rp_191(PCB_DECL, ParserTokenizedByParam tokenizedBy) {
/* Line 2681, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_TOKENIZED_BY_PARAM;
        PCB.urlParameter.param.tokenizedByParam = tokenizedBy;
    
}
static void ag_rp_192(PCB_DECL, RvBool orig) {
/* Line 2686, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_ORIG_PARAM;
        PCB.urlParameter.param.bOrigParam = orig;
    
}
static void ag_rp_193(PCB_DECL) {
/* Line 2696, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_OTHER_PARAM;
    
}
#define ag_rp_194(PCB_POINTER, t) (t)
static ParserUserParam ag_rp_195(PCB_DECL, RvSipUserParam pt) {
/* Line 2711, RV SIP Stack */
 
        ParserUserParam userParam;
	    userParam.paramType = pt;
		userParam.otherUser.buf = NULL;
		userParam.otherUser.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
static ParserUserParam ag_rp_196(PCB_DECL, ParserOtherUser ou) {
/* Line 2720, RV SIP Stack */
 
        ParserUserParam userParam;
        userParam.paramType = RVSIP_USERPARAM_OTHER;
	    userParam.otherUser = ou;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
#define ag_rp_197(PCB_POINTER) (RVSIP_USERPARAM_PHONE)
#define ag_rp_198(PCB_POINTER) (RVSIP_USERPARAM_IP)
#define ag_rp_199(PCB_POINTER, t) (t)
#define ag_rp_200(PCB_POINTER, ttl) (ttl)
#define ag_rp_201(PCB_POINTER, host) (host)
#define ag_rp_202(PCB_POINTER, met) (met)
#define ag_rp_203(PCB_POINTER) (ParserLrParam1)
#define ag_rp_204(PCB_POINTER) (ParserLrParamTrue)
#define ag_rp_205(PCB_POINTER) (ParserLrParamOn)
#define ag_rp_206(PCB_POINTER) (ParserLrParamEmpty)
#define ag_rp_207(PCB_POINTER, comp) (comp)
#define ag_rp_208(PCB_POINTER, hostname) (hostname)
#define ag_rp_209(PCB_POINTER) (RV_TRUE)
static void ag_rp_210(PCB_DECL, ParserBasicToken token) {
/* Line 2792, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token.buf,token.len, PCB.pUrlExtParams);
          }
          else
          {      
              
              APPEND_DATA(token.buf,token.len,PCB.pUrlExtParams);
          }
    
}
static void ag_rp_211(PCB_DECL, ParserBasicToken token1, ParserBasicToken token2) {
/* Line 2806, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
          else
          {      
              
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
    
}
#define ag_rp_212(PCB_POINTER) (CUR_STRING())
#define ag_rp_213(PCB_POINTER, token) (token)
static ParserOptionalHeaders ag_rp_214(PCB_DECL) {
/* Line 2849, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_FALSE;
		optionalHeaders.body.buf = NULL;
		optionalHeaders.body.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
static ParserOptionalHeaders ag_rp_215(PCB_DECL, ParserBasicToken headersList) {
/* Line 2858, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_TRUE;
        optionalHeaders.body=headersList;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
#define ag_rp_216(PCB_POINTER) (CUR_STRING())
#define ag_rp_217(PCB_POINTER) (CUR_STRING())
#define ag_rp_218(PCB_POINTER) (CUR_STRING())
#define ag_rp_219(PCB_POINTER) (CUR_STRING())
#define ag_rp_220(PCB_POINTER) (CUR_STRING())
static void ag_rp_221(PCB_DECL) {
/* Line 2894, RV SIP Stack */
        RvStatus status;
        status = ParserInitRequsetLine(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.requestLine), PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REQUEST_LINE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        
    
}
static void ag_rp_222(PCB_DECL, ParserMethod met, ParserSipVersion ver) {
/* Line 2919, RV SIP Stack */
         PCB.requestLine.method = met;
         PCB.requestLine.sipVer = ver;
		 PCB.requestLine.exUri = PCB.exUri;         
    
}
#define ag_rp_223(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("m"))
#define ag_rp_224(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("i"))
#define ag_rp_225(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("c"))
#define ag_rp_226(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("v"))
#define ag_rp_227(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("t"))
#define ag_rp_228(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("f"))
#define ag_rp_229(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("r"))
#define ag_rp_230(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("b"))
#define ag_rp_231(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("k"))
#define ag_rp_232(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("x"))
#define ag_rp_233(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("o"))
#define ag_rp_234(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("u"))
#define ag_rp_235(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("l"))
#define ag_rp_236(PCB_POINTER, met) (met)
#define ag_rp_237(PCB_POINTER) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_SIP_URL, PCB.exUri.ExUriInfo.absUri))
#define ag_rp_238(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_PRES_URI, uri))
#define ag_rp_239(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_IM_URI, uri))
#define ag_rp_240(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_ABS_URI, uri))
static void ag_rp_241(PCB_DECL) {
/* Line 2974, RV SIP Stack */
 
         RvStatus status;
         status = ParserInitParty(PCB.pParserMgr,PCB.pointer,&(PCB.party), PCB.eHeaderType, PCB.eWhichHeader, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
        ParserCleanExtParams (PCB.pExtParams); 
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_PARTY, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
	 
}
static void ag_rp_242(PCB_DECL) {
/* Line 3000, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_243(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3009, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams = partyParams; 
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_244(PCB_DECL) {
/* Line 3018, RV SIP Stack */
 
	  PCB.party.nameAddr.isDisplayName = RV_FALSE;
      PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
	  PCB.party.nameAddr.exUri = PCB.exUri;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_245(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3028, RV SIP Stack */
 
        PCB.party.nameAddr.isDisplayName = RV_FALSE;
        PCB.party.partyParams = partyParams;
		PCB.party.nameAddr.exUri = PCB.exUri;       
        PCB.party.isCompact = PCB.isCompactForm;
      
	
}
static void ag_rp_246(PCB_DECL, ParserDisplayName name) {
/* Line 3040, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;    
        PCB.nameAddr.isDisplayName = RV_TRUE;  
	    PCB.nameAddr.name = name;
	
}
static void ag_rp_247(PCB_DECL) {
/* Line 3047, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;
        PCB.nameAddr.isDisplayName = RV_FALSE;  
    
}
#define ag_rp_248(PCB_POINTER, qs) (qs)
#define ag_rp_249(PCB_POINTER, mtot) (mtot)
#define ag_rp_250(PCB_POINTER) (CUR_STRING())
#define ag_rp_251(PCB_POINTER) (CUR_STRING())
#define ag_rp_252(PCB_POINTER, t) (t)
#define ag_rp_253(PCB_POINTER, ppd) (ppd)
static ParserPartyParams ag_rp_254(PCB_DECL, ParserPartyParams ppl, ParserPartyParams ppd) {
/* Line 3078, RV SIP Stack */
        if (RV_TRUE == ppd.isTag)
        {
            ppl.isTag = RV_TRUE;
            ppl.tag = ppd.tag;
        }
        if (RV_TRUE == ppd.isAddrParams) 
        {
            ppl.isAddrParams = RV_TRUE;
            ppl.addrParams = ppd.addrParams;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ppl;
    
}
static ParserPartyParams ag_rp_255(PCB_DECL, ParserTagParam tag) {
/* Line 3097, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isTag = RV_TRUE;
        partyParams.tag = tag;
        partyParams.isAddrParams = RV_FALSE;
        partyParams.addrParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return partyParams; 
    
}
static ParserPartyParams ag_rp_256(PCB_DECL) {
/* Line 3107, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isAddrParams = RV_TRUE;
        partyParams.isTag = RV_FALSE;
        partyParams.addrParams = PCB.pExtParams;
		partyParams.tag.buf = NULL;
		partyParams.tag.len = 0;
        return partyParams; 
    
}
static void ag_rp_257(PCB_DECL) {
/* Line 3133, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_TRUE; 
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr, &PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
    
}
static void ag_rp_258(PCB_DECL) {
/* Line 3166, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues  contactHeaderValues;
         contactHeaderValues.isStar        = RV_FALSE;
         contactHeaderValues.header        = PCB.contact;
         contactHeaderValues.isCompact     = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_259(PCB_DECL) {
/* Line 3199, RV SIP Stack */
         RvStatus                 status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_FALSE;
         contactHeaderValues.header = PCB.contact;
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_260(PCB_DECL) {
/* Line 3234, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_FALSE;
	
}
static void ag_rp_261(PCB_DECL) {
/* Line 3240, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_TRUE;
      
	
}
static void ag_rp_262(PCB_DECL) {
/* Line 3250, RV SIP Stack */
 
	  PCB.contact.nameAddr.isDisplayName = RV_FALSE;  
      PCB.contact.isParams = RV_FALSE;
	  PCB.contact.nameAddr.exUri = PCB.exUri;      
	
}
static void ag_rp_263(PCB_DECL) {
/* Line 3257, RV SIP Stack */
 
      PCB.contact.nameAddr.isDisplayName = RV_FALSE;
	  PCB.contact.isParams = RV_TRUE;      
      PCB.contact.nameAddr.exUri = PCB.exUri;
	
}
static void ag_rp_264(PCB_DECL, ParserQVal q) {
/* Line 3277, RV SIP Stack */
 
        PCB.contact.params.isQ = RV_TRUE;
        PCB.contact.params.q = q;
    
}
static void ag_rp_265(PCB_DECL, ParserContactActionType action) {
/* Line 3283, RV SIP Stack */
 
        PCB.contact.params.isAction = RV_TRUE;
        PCB.contact.params.action = action;
    
}
static void ag_rp_266(PCB_DECL) {
/* Line 3289, RV SIP Stack */
 
        PCB.contact.params.isExpires = RV_TRUE;
        PCB.contact.params.expires = PCB.expires;
    
}
static void ag_rp_267(PCB_DECL) {
/* Line 3295, RV SIP Stack */
  
        PCB.contact.params.isExtention = RV_TRUE;
		PCB.contact.params.exten = PCB.pExtParams;
    
}
#define ag_rp_268(PCB_POINTER, qVal) (qVal)
#define ag_rp_269(PCB_POINTER) (CUR_STRING())
#define ag_rp_270(PCB_POINTER) (CUR_STRING())
#define ag_rp_271(PCB_POINTER, actionVal) (actionVal)
#define ag_rp_272(PCB_POINTER) (PARSER_CONTACT_ACTION_PROXY)
#define ag_rp_273(PCB_POINTER) (PARSER_CONTACT_ACTION_REDIRECT)
static void ag_rp_274(PCB_DECL) {
/* Line 3341, RV SIP Stack */
       RvStatus status;
       status = ParserInitExpiresHeader(PCB.pParserMgr,PCB.pointer,&(PCB.expires),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_275(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3363, RV SIP Stack */
  
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_276(PCB_DECL, ParserSipDate date) {
/* Line 3369, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
static void ag_rp_277(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3378, RV SIP Stack */
   
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_278(PCB_DECL, ParserSipDate date) {
/* Line 3384, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
#define ag_rp_279(PCB_POINTER) (CUR_STRING())
static void ag_rp_280(PCB_DECL, ParserSipDate date) {
/* Line 3409, RV SIP Stack */
   
          RvStatus status;
          status = ParserInitDateHeader(PCB.pParserMgr,PCB.pointer,&date,PCB.eHeaderType,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
                
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
    
}
static ParserSipDate ag_rp_281(PCB_DECL, ParserDDMMYY date, ParserTime t) {
/* Line 3431, RV SIP Stack */
  
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_282(PCB_POINTER, date) (date)
static ParserSipDate ag_rp_283(PCB_DECL, RvSipDateWeekDay day, ParserDDMMYY date, ParserTime t) {
/* Line 3446, RV SIP Stack */
   
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
	    sipDate.eWeekDay = day; 
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_284(PCB_POINTER) (RVSIP_WEEKDAY_SUN)
#define ag_rp_285(PCB_POINTER) (RVSIP_WEEKDAY_MON)
#define ag_rp_286(PCB_POINTER) (RVSIP_WEEKDAY_TUE)
#define ag_rp_287(PCB_POINTER) (RVSIP_WEEKDAY_WED)
#define ag_rp_288(PCB_POINTER) (RVSIP_WEEKDAY_THU)
#define ag_rp_289(PCB_POINTER) (RVSIP_WEEKDAY_FRI)
#define ag_rp_290(PCB_POINTER) (RVSIP_WEEKDAY_SAT)
static ParserDDMMYY ag_rp_291(PCB_DECL, ParserInt32 dd, RvSipDateMonth mm, ParserInt32 yy) {
/* Line 3471, RV SIP Stack */
        ParserDDMMYY ddmmyy;
        ddmmyy.day = dd;
        ddmmyy.eMonth = mm;
        ddmmyy.year = yy;
        RV_UNUSED_ARG(pcb_pointer);
        return ddmmyy;
    
}
static ParserInt32 ag_rp_292(PCB_DECL, int d) {
/* Line 3483, RV SIP Stack */
    	RV_UNUSED_ARG(pcb_pointer);
    	return d - '0';	
    
}
static ParserInt32 ag_rp_293(PCB_DECL, int d1, int d2) {
/* Line 3488, RV SIP Stack */
		RV_UNUSED_ARG(pcb_pointer);
	    return 10 * (d1-'0') + (d2-'0');
    
}
#define ag_rp_294(PCB_POINTER) (RVSIP_MONTH_JAN)
#define ag_rp_295(PCB_POINTER) (RVSIP_MONTH_FEB)
#define ag_rp_296(PCB_POINTER) (RVSIP_MONTH_MAR)
#define ag_rp_297(PCB_POINTER) (RVSIP_MONTH_APR)
#define ag_rp_298(PCB_POINTER) (RVSIP_MONTH_MAY)
#define ag_rp_299(PCB_POINTER) (RVSIP_MONTH_JUN)
#define ag_rp_300(PCB_POINTER) (RVSIP_MONTH_JUL)
#define ag_rp_301(PCB_POINTER) (RVSIP_MONTH_AUG)
#define ag_rp_302(PCB_POINTER) (RVSIP_MONTH_SEP)
#define ag_rp_303(PCB_POINTER) (RVSIP_MONTH_OCT)
#define ag_rp_304(PCB_POINTER) (RVSIP_MONTH_NOV)
#define ag_rp_305(PCB_POINTER) (RVSIP_MONTH_DEC)
#define ag_rp_306(PCB_POINTER, d1, d2) (2000 + 10 * (d1-'0') + (d2-'0'))
#define ag_rp_307(PCB_POINTER, d1, d2, d3) (2000 + 100 * (d1-'0') + 10 * (d2-'0') + (d3-'0'))
#define ag_rp_308(PCB_POINTER, d1, d2, d3, d4) (1000 * (d1-'0') + 100*(d2-'0') + 10*(d3-'0') + (d4-'0'))
static ParserTime ag_rp_309(PCB_DECL, ParserInt32 hour, ParserInt32 min, ParserInt32 second, ParserTimeZone zone) {
/* Line 3518, RV SIP Stack */
        ParserTime t;
        t.hour   = hour;
        t.minute = min;
        t.second = second;
        t.zone   = zone;
        RV_UNUSED_ARG(pcb_pointer);
        return t;        
    
}
#define ag_rp_310(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_311(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_312(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_313(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMT)
#define ag_rp_314(PCB_POINTER) (SIPPARSER_TIME_ZONE_UTC)
#define ag_rp_315(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMST)
static void ag_rp_316(PCB_DECL, ParserMethod method) {
/* Line 3565, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value.buf = NULL;
        otherHeader.value.len = 0;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
        
    
}
static void ag_rp_317(PCB_DECL, ParserMethod method, ParserBasicToken fv) {
/* Line 3590, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value = fv;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_318(PCB_DECL) {
/* Line 3620, RV SIP Stack */
          RvStatus status; 
          status = ParserInitAuthentication(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.authentication),PCB.eHeaderType,PCB.eWhichHeader,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
               
               PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
               PCB.eStat = status;
          }
           
          ParserCleanExtParams (PCB.pExtParams);
          ParserCleanExtParams (PCB.pUrlExtParams);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_AUTHENTICATION, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);
    
}
static void ag_rp_319(PCB_DECL) {
/* Line 3650, RV SIP Stack */
    
        PCB.authentication.eAuthScheme = RVSIP_AUTH_SCHEME_DIGEST;
        PCB.authentication.isAuthParamList = RV_FALSE;
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);        
    
}
static void ag_rp_320(PCB_DECL, ParserBasicToken authScheme) {
/* Line 3657, RV SIP Stack */
        
        PCB.authentication.eAuthScheme = RVSIP_AUTH_SCHEME_OTHER;
        PCB.authentication.authScheme  = authScheme;
        PCB.authentication.isRealm =     RV_FALSE;
        PCB.authentication.isDomain =    RV_FALSE;
        PCB.authentication.isNonce =     RV_FALSE;
        PCB.authentication.isOpaque =    RV_FALSE;
        PCB.authentication.isAuthParam = RV_FALSE;
        PCB.authentication.eStale =      RVSIP_AUTH_STALE_UNDEFINED;
        PCB.authentication.algorithm.eAlgorithm = RVSIP_AUTH_ALGORITHM_UNDEFINED;
		PCB.authentication.algorithm.isAKAVersion = RV_FALSE;
		PCB.authentication.qopValue.eAuthQop    = RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authentication.qopValue.isOther = RV_FALSE;
        PCB.authentication.isAuthParamList = RV_TRUE;
		PCB.authentication.isIntegrityKey =	RV_FALSE;
		PCB.authentication.isCipherKey =	RV_FALSE;
        PCB.authentication.authParamList = PCB.pExtParams;
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);        
    
}
static void ag_rp_321(PCB_DECL) {
/* Line 3685, RV SIP Stack */
        PCB.authentication.eAuthScheme = RVSIP_AUTH_SCHEME_UNDEFINED;
        PCB.authentication.isRealm =     RV_FALSE;
        PCB.authentication.isDomain =    RV_FALSE;
        PCB.authentication.isNonce =     RV_FALSE;
        PCB.authentication.isOpaque =    RV_FALSE;
        PCB.authentication.isAuthParam = RV_FALSE;
        PCB.authentication.eStale =      RVSIP_AUTH_STALE_UNDEFINED;
        PCB.authentication.algorithm.eAlgorithm = RVSIP_AUTH_ALGORITHM_UNDEFINED;
		PCB.authentication.algorithm.isAKAVersion = RV_FALSE;
        PCB.authentication.qopValue.eAuthQop    = RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authentication.qopValue.isOther = RV_FALSE;
		PCB.authentication.isIntegrityKey =	RV_FALSE;
		PCB.authentication.isCipherKey =	RV_FALSE;
        switch (PCB.digestChallenge.eType)
        {
            case PARSER_DIGEST_TYPE_REALM:
            {
                PCB.authentication.isRealm = RV_TRUE;
                PCB.authentication.realm = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_DOMAIN:
            {
                PCB.authentication.isDomain = RV_TRUE;
                PCB.authentication.domain = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE:
            {
                PCB.authentication.isNonce = RV_TRUE;
                PCB.authentication.nonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPAQUE:
            {
                PCB.authentication.isOpaque = RV_TRUE;
                PCB.authentication.opaque = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_STALE:
            {
                PCB.authentication.eStale = PCB.digestChallenge.eStale;
                break;
            }
            case PARSER_DIGEST_TYPE_ALGORITHM:
            {
                PCB.authentication.algorithm = PCB.digestChallenge.algorithm;
                break;
            }
			case PARSER_DIGEST_TYPE_INTEGRITY_KEY:
            {
                PCB.authentication.integrityKey = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_CIPHER_KEY:
            {
                PCB.authentication.cipherKey = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPQ_OPTIONS:
            {
                PCB.authentication.qopValue = PCB.digestChallenge.qopVal;
                break;
            }
            case PARSER_DIGEST_TYPE_AUTH_PARAM:
            {
                PCB.authentication.isAuthParam = RV_TRUE;
                PCB.authentication.authParam = PCB.digestChallenge.challenge;
                break;
            }
            default:
                    PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                    PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
        }
    
}
static void ag_rp_322(PCB_DECL) {
/* Line 3763, RV SIP Stack */
        if (PCB.isNewChallenge == RV_FALSE)
        {
            switch (PCB.digestChallenge.eType)
            {
                case PARSER_DIGEST_TYPE_REALM:
                {
                    PCB.authentication.isRealm = RV_TRUE;
                    PCB.authentication.realm = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_DOMAIN:
                {
                    PCB.authentication.isDomain = RV_TRUE;
                    PCB.authentication.domain = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_NONCE:
                {
                    PCB.authentication.isNonce = RV_TRUE;
                    PCB.authentication.nonce = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_OPAQUE:
                {
                    PCB.authentication.isOpaque = RV_TRUE;
                    PCB.authentication.opaque = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_STALE:
                {
                    PCB.authentication.eStale = PCB.digestChallenge.eStale;
                    break;
                }
                case PARSER_DIGEST_TYPE_ALGORITHM:
                {
                    PCB.authentication.algorithm = PCB.digestChallenge.algorithm;
                    break;
                }
				case PARSER_DIGEST_TYPE_INTEGRITY_KEY:
				{
					PCB.authentication.isIntegrityKey = RV_TRUE;
					PCB.authentication.integrityKey = PCB.digestChallenge.challenge;
					break;
				}
				case PARSER_DIGEST_TYPE_CIPHER_KEY:
				{
					PCB.authentication.isCipherKey = RV_TRUE;
					PCB.authentication.cipherKey = PCB.digestChallenge.challenge;
					break;
				}
                case PARSER_DIGEST_TYPE_OPQ_OPTIONS:
                {
                    PCB.authentication.qopValue = PCB.digestChallenge.qopVal;
                    break;
                }
                case PARSER_DIGEST_TYPE_AUTH_PARAM:
                {
                    PCB.authentication.isAuthParam = RV_TRUE;
                    PCB.authentication.authParam = PCB.digestChallenge.challenge;
                    break;
                }
                default:
                        PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                            
                        PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
            }
        }
    
}
#define ag_rp_323(PCB_POINTER, realm) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_REALM, realm))
#define ag_rp_324(PCB_POINTER, domain) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_DOMAIN, domain))
#define ag_rp_325(PCB_POINTER, nonce) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_NONCE, nonce))
#define ag_rp_326(PCB_POINTER, opaque) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_OPAQUE, opaque))
#define ag_rp_327(PCB_POINTER, ik) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_INTEGRITY_KEY, ik))
#define ag_rp_328(PCB_POINTER, ck) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_CIPHER_KEY, ck))
#define ag_rp_329(PCB_POINTER, authParam) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_AUTH_PARAM, authParam))
static void ag_rp_330(PCB_DECL, RvSipAuthStale stale) {
/* Line 3844, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_STALE;
        PCB.digestChallenge.eStale = stale;
    
}
static void ag_rp_331(PCB_DECL, ParserAlgorithm algorithm) {
/* Line 3849, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_ALGORITHM;
        
        if(PCB.digestChallenge.algorithm.eAlgorithm == RVSIP_AUTH_ALGORITHM_UNDEFINED)
        {
            PCB.digestChallenge.algorithm = algorithm;
        }
    
}
static void ag_rp_332(PCB_DECL, ParserQopValue qopOptions) {
/* Line 3858, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_OPQ_OPTIONS;
        PCB.digestChallenge.qopVal = qopOptions;
    
}
static void ag_rp_333(PCB_DECL) {
/* Line 3864, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_NEW_CHALLENGE;
        PCB.digestChallenge.challenge.buf = "NewChallenge";
        PCB.isNewChallenge = RV_TRUE;
    
}
#define ag_rp_334(PCB_POINTER, t) (t)
#define ag_rp_335(PCB_POINTER, t) (t)
#define ag_rp_336(PCB_POINTER) (CUR_LINE())
#define ag_rp_337(PCB_POINTER) (CUR_LINE())
static void ag_rp_338(PCB_DECL, ParserBasicToken token) {
/* Line 3900, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
        RV_UNUSED_ARG(token.buf);
    
}
#define ag_rp_339(PCB_POINTER) (SIP_BEGIN_LINE())
#define ag_rp_340(PCB_POINTER) (SIP_BEGIN_LINE())
#define ag_rp_341(PCB_POINTER, t) (t)
#define ag_rp_342(PCB_POINTER, t) (t)
#define ag_rp_343(PCB_POINTER, t) (t)
#define ag_rp_344(PCB_POINTER, t) (t)
#define ag_rp_345(PCB_POINTER) (RVSIP_AUTH_STALE_TRUE)
#define ag_rp_346(PCB_POINTER) (RVSIP_AUTH_STALE_FALSE)
#define ag_rp_347(PCB_POINTER, algo) (algo)
static void ag_rp_348(PCB_DECL) {
/* Line 3962, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static void ag_rp_349(PCB_DECL) {
/* Line 3967, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static void ag_rp_350(PCB_DECL) {
/* Line 3972, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static void ag_rp_351(PCB_DECL) {
/* Line 3977, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static ParserAlgorithm ag_rp_352(PCB_DECL, ParserBasicToken version, ParserAlgorithm algo) {
/* Line 3985, RV SIP Stack */
		algo.isAKAVersion = RV_TRUE;
		algo.nAKAVersion  = version;
		RV_UNUSED_ARG(pcb_pointer);
		return algo;
	
}
static ParserAlgorithm ag_rp_353(PCB_DECL, ParserAlgorithm algo) {
/* Line 3992, RV SIP Stack */
		algo.isAKAVersion = RV_FALSE;
		RV_UNUSED_ARG(pcb_pointer);
		return algo;
	
}
#define ag_rp_354(PCB_POINTER) (SIP_BEGIN_TOKEN())
static ParserAlgorithm ag_rp_355(PCB_DECL) {
/* Line 4004, RV SIP Stack */
        ParserAlgorithm algo;
        algo.eAlgorithm = RVSIP_AUTH_ALGORITHM_MD5;
		algo.algorithm.buf = NULL;
		algo.algorithm.len = 0;
		algo.nAKAVersion.buf = NULL;
		algo.nAKAVersion.len = 0;
		algo.isAKAVersion = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return algo;
    
}
static ParserAlgorithm ag_rp_356(PCB_DECL, ParserBasicToken t) {
/* Line 4016, RV SIP Stack */
        ParserAlgorithm algo;
        algo.eAlgorithm = RVSIP_AUTH_ALGORITHM_OTHER;
        algo.algorithm = t;
		algo.nAKAVersion.buf = NULL;
		algo.nAKAVersion.len = 0;
		algo.isAKAVersion = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return algo;
    
}
#define ag_rp_357(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_AKAV))
#define ag_rp_358(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_ALGORITHM))
#define ag_rp_359(PCB_POINTER) (CUR_STRING())
#define ag_rp_360(PCB_POINTER, qvList) (qvList)
static ParserQopValue ag_rp_361(PCB_DECL, ParserAuthQopOptions val) {
/* Line 4056, RV SIP Stack */
        ParserQopValue qop;
        qop.eAuthQop = RVSIP_AUTH_QOP_OTHER;
        qop.isOther  = RV_FALSE;
		qop.qop = NULL;
		
        if (RV_TRUE == val.isAuth)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_ONLY;    
        }
        else if (RV_TRUE == val.isAuthInt)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == val.isOther)
        {
            if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
            {
                APPEND_DATA(",", 1,PCB.pExtParams);
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop =  PCB.pExtParams;
            }
            else
            {
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop = PCB.pExtParams;
            }        
        }      
        return qop;        
    
}
static ParserQopValue ag_rp_362(PCB_DECL, ParserQopValue qop, ParserAuthQopOptions val) {
/* Line 4092, RV SIP Stack */
        if (RV_TRUE == val.isAuth && 
            RVSIP_AUTH_QOP_AUTHINT_ONLY == qop.eAuthQop)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_AND_AUTHINT;    
        }
        else if (RV_TRUE == val.isAuth)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_ONLY;    
        }
        else if (RV_TRUE == val.isAuthInt &&
                 RVSIP_AUTH_QOP_AUTH_ONLY == qop.eAuthQop)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_AND_AUTHINT;
        }
        else if (RV_TRUE == val.isAuthInt)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == val.isOther)
        {
            if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
            {
                APPEND_DATA(",", 1,PCB.pExtParams);
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop =  PCB.pExtParams;
            }
            else
            {
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop = PCB.pExtParams;
            }        
        }
        return qop;
    
}
static ParserAuthQopOptions ag_rp_363(PCB_DECL) {
/* Line 4137, RV SIP Stack */
        ParserAuthQopOptions qopOption;
        qopOption.isAuthInt = RV_TRUE;
        qopOption.isAuth    = RV_FALSE; 
        qopOption.isOther   = RV_FALSE;
		qopOption.strOther.buf = NULL;
		qopOption.strOther.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return qopOption;
    
}
static ParserAuthQopOptions ag_rp_364(PCB_DECL) {
/* Line 4148, RV SIP Stack */
        ParserAuthQopOptions qopOption;
        qopOption.isAuth = RV_TRUE;
        qopOption.isAuthInt = RV_FALSE; 
        qopOption.isOther   = RV_FALSE;
		qopOption.strOther.buf = NULL;
		qopOption.strOther.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return qopOption;
    
}
static ParserAuthQopOptions ag_rp_365(PCB_DECL, ParserBasicToken t) {
/* Line 4160, RV SIP Stack */
        ParserAuthQopOptions qopOption;
        qopOption.isOther = RV_TRUE;
        qopOption.isAuthInt = RV_FALSE;
        qopOption.isAuth    = RV_FALSE; 
        qopOption.strOther = t;
        RV_UNUSED_ARG(pcb_pointer);
        return qopOption;
    
}
#define ag_rp_366(PCB_POINTER, ik) (ik)
#define ag_rp_367(PCB_POINTER, ck) (ck)
#define ag_rp_368(PCB_POINTER) (CUR_STRING())
#define ag_rp_369(PCB_POINTER) (CUR_STRING())
#define ag_rp_370(PCB_POINTER) (CUR_STRING())
#define ag_rp_371(PCB_POINTER) (CUR_STRING())
#define ag_rp_372(PCB_POINTER) (CUR_STRING())
static void ag_rp_373(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 4202, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(",", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
      else
      {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
   
}
static void ag_rp_374(PCB_DECL) {
/* Line 4229, RV SIP Stack */
   
          RvStatus status; 
          status = ParserInitAuthorization(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.authorization),PCB.eHeaderType,PCB.eWhichHeader,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
               
               PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
               PCB.eStat = status;
          }
          ParserCleanExtParams (PCB.pExtParams);
          ParserCleanExtParams (PCB.pUrlExtParams);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_AUTHORIZATION, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_375(PCB_DECL) {
/* Line 4260, RV SIP Stack */
        
        PCB.authorization.eAuthScheme = RVSIP_AUTH_SCHEME_DIGEST;  
        PCB.authorization.isAuthParamList = RV_FALSE;
    
}
static void ag_rp_376(PCB_DECL, ParserBasicToken authScheme) {
/* Line 4266, RV SIP Stack */
        
        PCB.authorization.eAuthScheme			= RVSIP_AUTH_SCHEME_OTHER;
        PCB.authorization.authScheme			= authScheme; 
        PCB.authorization.isUsername			= RV_FALSE;
        PCB.authorization.isRealm				= RV_FALSE;
        PCB.authorization.isNonce				= RV_FALSE;
        PCB.authorization.isResponse			= RV_FALSE;
        PCB.authorization.algorithm.eAlgorithm	= RVSIP_AUTH_ALGORITHM_UNDEFINED;   
        PCB.authorization.isCnonce				= RV_FALSE;
        PCB.authorization.isOpaque				= RV_FALSE;
        PCB.authorization.isNonceCount			= RV_FALSE;
        PCB.authorization.eAuthQop				= RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authorization.isAuthParam			= RV_FALSE;
		PCB.authorization.isAuts				= RV_FALSE;
		PCB.authorization.algorithm.isAKAVersion= RV_FALSE;
		PCB.authorization.eProtected			= RVSIP_AUTH_INTEGRITY_PROTECTED_UNDEFINED;
        PCB.authorization.isAuthParamList = RV_TRUE;
        PCB.authorization.authParamList = PCB.pExtParams;
    
}
static void ag_rp_377(PCB_DECL) {
/* Line 4296, RV SIP Stack */
      
        PCB.authorization.isUsername			= RV_FALSE;
        PCB.authorization.isRealm				= RV_FALSE;
        PCB.authorization.isNonce				= RV_FALSE;
        PCB.authorization.isResponse			= RV_FALSE;
        PCB.authorization.algorithm.eAlgorithm	= RVSIP_AUTH_ALGORITHM_UNDEFINED;   
        PCB.authorization.isCnonce				= RV_FALSE;
        PCB.authorization.isOpaque				= RV_FALSE;
        PCB.authorization.isNonceCount			= RV_FALSE;
        PCB.authorization.eAuthQop				= RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authorization.isAuthParam			= RV_FALSE;
		PCB.authorization.isAuts				= RV_FALSE;
		PCB.authorization.algorithm.isAKAVersion= RV_FALSE;
		PCB.authorization.eProtected			= RVSIP_AUTH_INTEGRITY_PROTECTED_UNDEFINED;
        switch (PCB.digestChallenge.eType)
        {
             case PARSER_DIGEST_TYPE_USERNAME:
            {
                PCB.authorization.isUsername = RV_TRUE;
                PCB.authorization.userName = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_REALM:
            {
                PCB.authorization.isRealm = RV_TRUE;
                PCB.authorization.realm = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE:
            {
                PCB.authorization.isNonce = RV_TRUE;
                PCB.authorization.nonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_URI:
            {
                PCB.authorization.isUri = RV_TRUE;
                PCB.authorization.hDigestUri = PCB.digestChallenge.uri;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_RESPONSE:
            {
                PCB.authorization.isResponse = RV_TRUE;
                PCB.authorization.response = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_ALGORITHM:
            {
                PCB.authorization.algorithm = PCB.digestChallenge.algorithm;
                break;
            }
            case PARSER_DIGEST_TYPE_CNONCE:
            {
                PCB.authorization.isCnonce = RV_TRUE;
                PCB.authorization.cnonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPAQUE:
            {
                PCB.authorization.isOpaque = RV_TRUE;
                PCB.authorization.opaque = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE_COUNT:
            {
                PCB.authorization.isNonceCount = RV_TRUE;
                PCB.authorization.nonceCount = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_MESSAGE_QOP:
            {
                PCB.authorization.eAuthQop = PCB.digestChallenge.qopVal.eAuthQop;
                break;
            }
            case PARSER_DIGEST_TYPE_AUTH_PARAM:
            {
                PCB.authorization.isAuthParam = RV_TRUE;
                PCB.authorization.authParam = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_AUTS:
            {
                PCB.authorization.isAuts = RV_TRUE;
                PCB.authorization.auts = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_INTEGRITY_PROTECTED:
            {
                PCB.authorization.eProtected = PCB.digestChallenge.eProtected;
                break;
            }
            default:
				PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
				PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
        }
    
}
static void ag_rp_378(PCB_DECL) {
/* Line 4395, RV SIP Stack */
        switch (PCB.digestChallenge.eType)
        {
             case PARSER_DIGEST_TYPE_USERNAME:
            {
                PCB.authorization.isUsername = RV_TRUE;
                PCB.authorization.userName = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_REALM:
            {
                PCB.authorization.isRealm = RV_TRUE;
                PCB.authorization.realm = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE:
            {
                PCB.authorization.isNonce = RV_TRUE;
                PCB.authorization.nonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_URI:
            {
                PCB.authorization.isUri = RV_TRUE;
                PCB.authorization.hDigestUri = PCB.digestChallenge.uri;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_RESPONSE:
            {
                PCB.authorization.isResponse = RV_TRUE;
                PCB.authorization.response = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_ALGORITHM:
            {
                PCB.authorization.algorithm = PCB.digestChallenge.algorithm;
                break;
            }
            case PARSER_DIGEST_TYPE_CNONCE:
            {
                PCB.authorization.isCnonce = RV_TRUE;
                PCB.authorization.cnonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPAQUE:
            {
                PCB.authorization.isOpaque = RV_TRUE;
                PCB.authorization.opaque = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE_COUNT:
            {
                PCB.authorization.isNonceCount = RV_TRUE;
                PCB.authorization.nonceCount = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_MESSAGE_QOP:
            {
                PCB.authorization.eAuthQop = PCB.digestChallenge.qopVal.eAuthQop;
                break;
            }
            case PARSER_DIGEST_TYPE_AUTH_PARAM:
            {
                PCB.authorization.isAuthParam = RV_TRUE;
                PCB.authorization.authParam = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_AUTS:
            {
                PCB.authorization.isAuts = RV_TRUE;
                PCB.authorization.auts = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_INTEGRITY_PROTECTED:
            {
                PCB.authorization.eProtected = PCB.digestChallenge.eProtected;
                break;
            }
            default:
                    PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                    PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
        }
    
}
#define ag_rp_379(PCB_POINTER, useranme) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_USERNAME, useranme))
#define ag_rp_380(PCB_POINTER, realm) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_REALM, realm))
#define ag_rp_381(PCB_POINTER, nonce) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_NONCE, nonce))
#define ag_rp_382(PCB_POINTER, response) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_DIGEST_RESPONSE, response))
#define ag_rp_383(PCB_POINTER, cnonce) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_CNONCE, cnonce))
#define ag_rp_384(PCB_POINTER, opaque) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_OPAQUE, opaque))
#define ag_rp_385(PCB_POINTER, nonceCount) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_NONCE_COUNT, nonceCount))
#define ag_rp_386(PCB_POINTER, authParam) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_AUTH_PARAM, authParam))
#define ag_rp_387(PCB_POINTER, auts) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_AUTS, auts))
static void ag_rp_388(PCB_DECL, RvSipAuthIntegrityProtected protected) {
/* Line 4490, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_INTEGRITY_PROTECTED;
        PCB.digestChallenge.eProtected = protected;
    
}
static void ag_rp_389(PCB_DECL, RvSipAuthQopOption messageQop) {
/* Line 4495, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_MESSAGE_QOP;
        PCB.digestChallenge.qopVal.eAuthQop = messageQop;
    
}
static void ag_rp_390(PCB_DECL) {
/* Line 4500, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_DIGEST_URI;
        PCB.digestChallenge.uri = PCB.exUri;
    
}
static void ag_rp_391(PCB_DECL, ParserAlgorithm algorithm) {
/* Line 4505, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_ALGORITHM;
        
        if(PCB.digestChallenge.algorithm.eAlgorithm == RVSIP_AUTH_ALGORITHM_UNDEFINED)
        {
            PCB.digestChallenge.algorithm = algorithm;
        }
    
}
#define ag_rp_392(PCB_POINTER, username) (username)
#define ag_rp_393(PCB_POINTER, t) (t)
static RvSipAuthQopOption ag_rp_394(PCB_DECL, ParserAuthQopOptions qopVal) {
/* Line 4544, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
        if (RV_TRUE == qopVal.isAuth)
        {
            return RVSIP_AUTH_QOP_AUTH_ONLY;
        }
        else if (RV_TRUE == qopVal.isAuthInt)
        {
            return RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == qopVal.isOther)
        {
            return RVSIP_AUTH_QOP_OTHER;
        }
        else 
        {
             return RVSIP_AUTH_QOP_UNDEFINED;
        }
    
}
#define ag_rp_395(PCB_POINTER, cnonceVal) (cnonceVal)
#define ag_rp_396(PCB_POINTER, nonceVal) (nonceVal)
#define ag_rp_397(PCB_POINTER, ncVal) (ncVal)
#define ag_rp_398(PCB_POINTER) (CUR_STRING())
#define ag_rp_399(PCB_POINTER) (CUR_STRING())
#define ag_rp_400(PCB_POINTER) (CUR_STRING())
#define ag_rp_401(PCB_POINTER) (CUR_STRING())
#define ag_rp_402(PCB_POINTER) (CUR_STRING())
#define ag_rp_403(PCB_POINTER) (CUR_STRING())
#define ag_rp_404(PCB_POINTER) (CUR_STRING())
#define ag_rp_405(PCB_POINTER) (CUR_STRING())
#define ag_rp_406(PCB_POINTER, requestDigest) (requestDigest)
#define ag_rp_407(PCB_POINTER) (CUR_STRING())
#define ag_rp_408(PCB_POINTER) (CUR_STRING())
#define ag_rp_409(PCB_POINTER, autsValue) (autsValue)
#define ag_rp_410(PCB_POINTER) (CUR_STRING())
#define ag_rp_411(PCB_POINTER) (RVSIP_AUTH_INTEGRITY_PROTECTED_NO)
#define ag_rp_412(PCB_POINTER) (RVSIP_AUTH_INTEGRITY_PROTECTED_YES)
static void ag_rp_413(PCB_DECL) {
/* Line 4663, RV SIP Stack */
         RvStatus status;
         status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_414(PCB_DECL) {
/* Line 4686, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_415(PCB_DECL) {
/* Line 4713, RV SIP Stack */
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_FALSE;
        PCB.route.eRouteType = PCB.eWhichHeader;
    
}
static void ag_rp_416(PCB_DECL) {
/* Line 4718, RV SIP Stack */
 
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_TRUE;
        PCB.route.eRouteType = PCB.eWhichHeader;
          
         if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
         {
             PCB.route.routeParams = PCB.pExtParams;
         }                
     
}
static void ag_rp_417(PCB_DECL) {
/* Line 4744, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitRetryAfterHeader(PCB.pParserMgr,PCB.pointer,&(PCB.retryAfter),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
        
         ParserCleanExtParams (PCB.pExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RETRY_AFTER, &PCB);
    
}
static void ag_rp_418(PCB_DECL, ParserDeltaSeconds delta, ParserRetryParam param) {
/* Line 4769, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_419(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4779, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_420(PCB_DECL, ParserSipDate date, ParserRetryParam param) {
/* Line 4790, RV SIP Stack */
        PCB.retryAfter.sipDate   = date;
        PCB.retryAfter.isSipDate = RV_TRUE;
        if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
        PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_421(PCB_DECL, ParserSipDate date) {
/* Line 4801, RV SIP Stack */
         PCB.retryAfter.sipDate   = date;
         PCB.retryAfter.isSipDate = RV_TRUE;
         
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_422(PCB_DECL, ParserBasicToken comment) {
/* Line 4816, RV SIP Stack */
        PCB.retryAfter.comment = comment;
        PCB.retryAfter.isComment = RV_TRUE;
    
}
static ParserRetryParam ag_rp_423(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4824, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_TRUE;
        param.deltaSeconds   = delta;
        param.genericParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return param;
    
}
static ParserRetryParam ag_rp_424(PCB_DECL) {
/* Line 4833, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_FALSE;
		param.deltaSeconds.buf = NULL;
		param.deltaSeconds.len = 0;
        param.genericParams = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             param.genericParams=PCB.pExtParams;
        }
        return param;
    
}
static ParserRetryParam ag_rp_425(PCB_DECL, ParserRetryParam params, ParserDeltaSeconds delta) {
/* Line 4847, RV SIP Stack */
        params.isDeltaSeconds = RV_TRUE;
        params.deltaSeconds   = delta;   
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserRetryParam ag_rp_426(PCB_DECL, ParserRetryParam params) {
/* Line 4854, RV SIP Stack */
        params.genericParams  = NULL;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            params.genericParams = PCB.pExtParams;
        }    
        return params;
    
}
#define ag_rp_427(PCB_POINTER, delta) (delta)
static void ag_rp_428(PCB_DECL, ParserRSeq rseq) {
/* Line 4880, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRSeq(PCB.pParserMgr,PCB.pointer,&rseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
#define ag_rp_429(PCB_POINTER, responseNum) (responseNum)
#define ag_rp_430(PCB_POINTER) (CUR_STRING())
static void ag_rp_431(PCB_DECL) {
/* Line 4918, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRack(PCB.pParserMgr,PCB.pointer,&(PCB.rack),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RACK, &PCB);
    
}
static void ag_rp_432(PCB_DECL, ParserResponseNum responseNum, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 4940, RV SIP Stack */
		PCB.rack.method = method;
		PCB.rack.sequenceNumber = sequenceNumber;
        PCB.rack.responseNum = responseNum;
	 
}
#define ag_rp_433(PCB_POINTER, t) (t)
static void ag_rp_434(PCB_DECL, ParserBasicToken tag) {
/* Line 4956, RV SIP Stack */
 
          RvStatus       status; 
          ParserOptionTag option; 
          option.headerType = PCB.eWhichHeader;
          option.optionTag = tag;
          status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
              
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
           
          ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_435(PCB_DECL, ParserBasicToken opTag) {
/* Line 4980, RV SIP Stack */
 
           RvStatus       status;
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag = opTag;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
           }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_436(PCB_DECL) {
/* Line 5005, RV SIP Stack */
 
           RvStatus       status; 
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag.len = 0;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
			  PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
		   }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_437(PCB_DECL) {
/* Line 5536, RV SIP Stack */
            RvStatus status;
            status = ParserInitContentDisposition(PCB.pParserMgr,PCB.pointer,&(PCB.contentDisposition), PCB.eHeaderType, PCB.pSipObject);
            if(RV_ERROR_ILLEGAL_SYNTAX == status)
			{
				PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
				SYNTAX_ERROR;
			}
			else if (RV_OK != status)
            {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
            }
            ParserCleanExtParams (PCB.pExtParams);
            ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_DISPOSITION, &PCB);
         
}
static void ag_rp_438(PCB_DECL, ParserDisposition type, ParserDispositionParams params) {
/* Line 5556, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams = params;
    
}
static void ag_rp_439(PCB_DECL, ParserDisposition type) {
/* Line 5561, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN;
        PCB.contentDisposition.dispositionParams.isGenericParam = RV_FALSE;
    
}
#define ag_rp_440(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_RENDER))
#define ag_rp_441(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SESSION))
#define ag_rp_442(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ICON))
#define ag_rp_443(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ALERT))
#define ag_rp_444(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SIGNAL))
static ParserDisposition ag_rp_445(PCB_DECL, ParserBasicToken otherType) {
/* Line 5576, RV SIP Stack */
        ParserDisposition disposition;
        disposition.eDispositionType = PARSER_DISPOSITION_TYPE_OTHER;
        disposition.otherDispositionType = otherType;
        RV_UNUSED_ARG(pcb_pointer);
        return disposition;
    
}
static ParserDispositionParams ag_rp_446(PCB_DECL, ParserDispositionParam param) {
/* Line 5587, RV SIP Stack */
        ParserDispositionParams params;
        params.handlingParam    = param;
        params.genericParamList = NULL;
        params.isGenericParam = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParams ag_rp_447(PCB_DECL) {
/* Line 5597, RV SIP Stack */
        ParserDispositionParams params;
		
		params.isGenericParam = RV_TRUE;
		params.genericParamList = NULL;
		params.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.handlingParam.otherHandlingParam.buf = NULL;
		params.handlingParam.otherHandlingParam.len = 0;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             params.genericParamList=PCB.pExtParams;
        }
        
        return params;
    
}
static ParserDispositionParams ag_rp_448(PCB_DECL, ParserDispositionParams ps, ParserDispositionParam p) {
/* Line 5615, RV SIP Stack */
        if (p.eParam != PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN)
        {
            ps.handlingParam = p;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ps;
    
}
static ParserDispositionParams ag_rp_449(PCB_DECL, ParserDispositionParams ps) {
/* Line 5624, RV SIP Stack */
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             ps.genericParamList=PCB.pExtParams;
        }
        ps.isGenericParam = RV_TRUE;
        return ps;
    
}
static ParserDispositionParam ag_rp_450(PCB_DECL) {
/* Line 5637, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OPTIONAL;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_451(PCB_DECL) {
/* Line 5646, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_REQUIRED;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_452(PCB_DECL, ParserBasicToken other) {
/* Line 5655, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.otherHandlingParam = other;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static void ag_rp_453(PCB_DECL, ParserSessionExpiresHeader sessionExpires) {
/* Line 5674, RV SIP Stack */
        RvStatus status;
        sessionExpires.isCompact = PCB.isCompactForm;
        status = ParserInitSessionExpiresHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
												PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserSessionExpiresHeader ag_rp_454(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5696, RV SIP Stack */
 
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
        sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
		RV_UNUSED_ARG(pcb_pointer);
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_455(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5708, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_456(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5723, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_457(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5739, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
#define ag_rp_458(PCB_POINTER, refType) (refType)
#define ag_rp_459(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAC)
#define ag_rp_460(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAS)
static void ag_rp_461(PCB_DECL, ParserMinSEHeader sessionExpires) {
/* Line 5779, RV SIP Stack */
       RvStatus status;
       status = ParserInitMinSEHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
                                      PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
       ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserMinSEHeader ag_rp_462(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5799, RV SIP Stack */
 
        ParserMinSEHeader minSE;
		minSE.deltaSeconds = delta;
        minSE.isExtention = RV_FALSE;
		minSE.exten = NULL;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            minSE.exten = PCB.pExtParams;
            minSE.isExtention = RV_TRUE;
        }
        return minSE;
    
}
static void ag_rp_463(PCB_DECL, ParserCallId callId) {
/* Line 5834, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, &(PCB.replacesParams), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_464(PCB_DECL, ParserCallId callId) {
/* Line 5853, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, NULL, PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_465(PCB_DECL) {
/* Line 5875, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_466(PCB_DECL) {
/* Line 5896, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_467(PCB_DECL, ParserTagParam toTag) {
/* Line 5919, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_TO_TAG; 
	  PCB.replacesParam.paramVal = toTag;
        
    
}
static void ag_rp_468(PCB_DECL, ParserTagParam fromTag) {
/* Line 5925, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_FROM_TAG; 
	  PCB.replacesParam.paramVal = fromTag;
    
}
static void ag_rp_469(PCB_DECL, ParserReplacesEarlyFlagParamType earlyFlag) {
/* Line 5931, RV SIP Stack */
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG; 
      PCB.replacesParam.eEarlyFlagType = earlyFlag;
    
}
static void ag_rp_470(PCB_DECL) {
/* Line 5935, RV SIP Stack */
 
      PCB.replacesParam.paramType  = PARSER_REPLACES_PARAM_TYPE_OTHER; 
      PCB.replacesParam.isOther    = RV_TRUE;
	  PCB.replacesParam.otherParam = PCB.pExtParams;
    
}
#define ag_rp_471(PCB_POINTER, t) (t)
#define ag_rp_472(PCB_POINTER, t) (t)
#define ag_rp_473(PCB_POINTER) (ParserReplacesEarlyFlagParam1)
#define ag_rp_474(PCB_POINTER) (ParserReplacesEarlyFlagParamTrue)
#define ag_rp_475(PCB_POINTER) (ParserReplacesEarlyFlagParamEmpty)
static void ag_rp_476(PCB_DECL) {
/* Line 5971, RV SIP Stack */
   
		RvStatus status; 
		status = ParserInitAuthenticationInfo(PCB.pParserMgr,PCB.pointer,&(PCB.auth_info),PCB.eHeaderType,PCB.pSipObject);
		if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
		{
			
			PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
			PCB.eStat = status;
		}
		ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_AUTHENTICATION_INFO,&PCB);
    
}
static void ag_rp_477(PCB_DECL, ParserBasicToken nc) {
/* Line 5995, RV SIP Stack */
		PCB.auth_info.isNonceCount  = RV_TRUE;
		PCB.auth_info.strNonceCount = nc;
	
}
static void ag_rp_478(PCB_DECL, ParserBasicToken nv) {
/* Line 6000, RV SIP Stack */
		PCB.auth_info.isNextNonce   = RV_TRUE;
		PCB.auth_info.strNextNonce  = nv;
	
}
static void ag_rp_479(PCB_DECL, ParserBasicToken cn) {
/* Line 6005, RV SIP Stack */
		PCB.auth_info.isCNonce      = RV_TRUE;
		PCB.auth_info.strCNonce     = cn;
	
}
static void ag_rp_480(PCB_DECL, ParserBasicToken rd) {
/* Line 6010, RV SIP Stack */
		PCB.auth_info.isRspAuth     = RV_TRUE;
		PCB.auth_info.strRspAuth    = rd;
	
}
static void ag_rp_481(PCB_DECL) {
/* Line 6015, RV SIP Stack */
		PCB.auth_info.isMsgQop      = RV_TRUE;
	
}
static void ag_rp_482(PCB_DECL, ParserAuthQopOptions qopVal) {
/* Line 6023, RV SIP Stack */
		if (RV_TRUE == qopVal.isAuth)
        {
            PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_AUTH_ONLY;
        }
        else if (RV_TRUE == qopVal.isAuthInt)
        {
            PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == qopVal.isOther)
        {
            PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_OTHER;
        }
        else 
        {
	    PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_UNDEFINED;
        }
		
		PCB.auth_info.strMsgQop = qopVal.strOther;
	
}
#define ag_rp_483(PCB_POINTER, nv) (nv)
#define ag_rp_484(PCB_POINTER, val) (val)
#define ag_rp_485(PCB_POINTER) (CUR_STRING())
#define READ_COUNTS 
#define WRITE_COUNTS 
#undef V
#define V(i,t) (*(t *) (&(PCB).vs[(PCB).ssx + i]))
#undef VS
#define VS(i) (PCB).vs[(PCB).ssx + i]
#ifndef GET_CONTEXT
#define GET_CONTEXT CONTEXT = (PCB).input_context
#endif
typedef enum {
  ag_action_1,
  ag_action_2,
  ag_action_3,
  ag_action_4,
  ag_action_5,
  ag_action_6,
  ag_action_7,
  ag_action_8,
  ag_action_9,
  ag_action_10,
  ag_action_11,
  ag_action_12
} ag_parser_action;
#ifndef NULL_VALUE_INITIALIZER
#define NULL_VALUE_INITIALIZER = { 0 }
#endif
static SipParser_vs_type const ag_null_value NULL_VALUE_INITIALIZER;
static const unsigned short ag_rpx[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,
    4,  0,  0,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  0,  0, 16,  0,
    0, 17,  0,  0, 18,  0,  0,  0,  0,  0, 19,  0,  0,  0,  0,  0, 20,  0,
    0,  0,  0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,  0,  0, 31, 32, 33,
   34, 35, 36, 37, 38, 39,  0, 40, 41, 42, 43, 44, 45, 46,  0, 47, 48, 49,
   50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
   68, 69, 70, 71, 72, 73,  0,  0, 74, 75, 76, 77,  0,  0, 78, 79, 80,  0,
    0,  0,  0,  0,  0, 81, 82,  0, 83, 84,  0, 85, 86, 87, 88, 89, 90, 91,
   92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,
  110,111,  0,112,113,114,115,  0,  0,116,117,118,119,120,121,  0,122,123,
  124,125,126,127,128,129,130,131,  0,  0,132,133,134,135,  0,136,137,  0,
    0,138,139,  0,  0,140,  0,  0,141,142,143,144,  0,145,146,147,148,149,
  150,151,152,153,154,155,  0,  0,  0,  0,156,157,158,159,  0,160,161,  0,
  162,163,164,165,166,167,168,  0,  0,169,170,  0,  0,  0,  0,  0,  0,171,
  172,173,174,175,176,177,  0,  0,178,179,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,180,181,182,183,184,
  185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,
  203,204,205,  0,  0,  0,  0,206,207,208,209,210,211,  0,  0,  0,  0,  0,
  212,213,214,215,216,217,218,  0,  0,219,  0,  0,  0,  0,  0,220,221,222,
  223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,
  241,242,243,244,245,246,247,248,249,  0,  0,  0,  0,  0,250,251,252,253,
  254,255,256,  0,257,  0,  0,258,259,260,261,262,263,  0,  0,264,265,266,
  267,268,  0,  0,269,270,  0,  0,  0,  0,271,272,273,274,  0,275,276,277,
  278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,
  296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,
  314,315,316,317,318,  0,319,320,321,322,323,324,325,326,327,328,329,330,
  331,332,333,334,335,  0,  0,336,337,  0,  0,338,339,340,  0,  0,  0,341,
  342,343,344,345,346,  0,  0,347,348,349,350,351,352,353,354,355,356,357,
  358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,  0,  0,  0,
    0,373,374,  0,375,376,377,378,379,380,381,382,383,384,385,386,387,388,
  389,390,391,392,393,  0,  0,  0,  0,394,395,396,397,398,399,400,401,402,
  403,404,405,406,407,408,  0,  0,  0,409,  0,  0,  0,  0,410,  0,  0,411,
  412,  0,413,414,415,416,417,  0,  0,418,419,420,421,422,423,424,425,426,
  427,428,429,430,431,432,433,434,435,436,  0,  0,  0,437,438,439,440,441,
  442,443,444,445,446,447,448,449,450,451,452,453,454,  0,  0,455,456,457,
  458,  0,459,460,461,462,  0,463,464,465,466,467,468,469,470,471,472,473,
  474,475,476,  0,  0,477,478,479,480,481,482,483,484,  0,  0,  0,  0,  0,
  485
};
static const unsigned char ag_key_itt[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0
};
static const unsigned short ag_key_pt[] = {
  0,  2,  0,  6,  0,  8,  0, 10,  0, 12,  0, 14,  0, 16,  0, 18,
  0, 20,  0, 22,  0, 24,  0, 26,  0, 28,  0, 30,  0, 32,  0, 34,
  0, 36,  0, 38,  0, 40,  0, 42,  0, 44,  0, 46,  0, 48,  0, 52,
  0,114,  0,115,  0,116,  0,117,  0,118,  0,119,  0,135,  0,136,
  0,137,  0,138,  0,139,  0,140,  0,141,  0,142,  0,143,  0,144,
  0,145,  0,146,  0,147,  0,148,  0,149,  0,150,  0,151,  0,152,
  0,153,  0,178,  0,180,  0,181,  0,182,  0,183,  0,197,  0,198,
  0,200,  0,204,  0,206,  0,207,  0,209,  0,210,  0,212,  0,301,
  0,302,  0,305,  0,306,  0,307,  0,308,  0,309,  0,310,  0,311,
  0,314,  0,315,  0,335,  0,336,  0,337,  0,338,  0,339,  0,340,
  0,341,  0,342,  0,343,  0,344,  0,345,  0,346,  0,347,  0,357,
  0,362,  0,369,  0,375,  0,377,  0,378,  0,380,  0,388,  0,389,
  0,390,  0,391,  0,392,  0,393,  0,394,  0,398,  0,399,  0,400,
  0,401,  0,402,  0,403,  0,404,  0,405,  0,406,  0,407,  0,408,
  0,409,  0,414,  0,415,  0,416,  0,433,  0,435,  0,444,  0,446,
  0,448,  0,449,  0,453,  0,462,  0,465,  0,468,  0,469,  0,470,
  0,472,  0,486,  0,488,  0,491,  0,493,  0,496,  0,501,  0,509,
  0,510,  0,511,  0,519,  0,529,  0,530,  0,531,  0,532,  0,533,
  0,535,  0,536,  0,537,  0,543,  0,544,  0,545,  0,553,  0,554,
  0,555,  0,561,  0,562,0
};
static const unsigned char ag_key_ch[] = {
    0, 49, 50, 67, 73, 87,255, 89,255, 65, 68, 73, 76, 79, 83, 84,255, 77,
   78,255, 83,255, 84,255, 65, 69,255, 82,255, 65, 69, 72, 75, 80, 81,255,
   47, 58, 83,255, 80,255, 69, 73, 80,255, 82,255, 73,255, 65, 66, 67, 68,
   69, 70, 73, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 88,255, 32,255, 72,
   85,255, 72, 82, 85,255, 75, 84,255, 58, 82,255, 79,255, 69, 71, 73,255,
   80, 82,255, 45,255, 72, 83,255, 68, 71, 84,255, 67, 75, 76, 80, 85,255,
   65, 79, 82, 89,255, 65, 75, 78, 79,255, 69, 73, 79, 85,255, 65, 88,255,
   73, 79,255, 65, 69, 82,255, 83, 84,255, 77,255, 65, 73,255, 58, 65,255,
   84, 86,255, 67, 75, 77, 78, 80,255, 76, 78,255, 65, 85,255, 68, 82, 89,
  255, 83, 84,255, 65, 69, 79, 85,255, 78, 86,255, 67, 69, 79,255, 65, 84,
  255, 67, 80, 82,255, 65, 69, 79,255, 72, 82,255, 79,255, 65, 67, 68, 70,
   71, 78, 81, 83,255, 69, 80, 83,255, 80, 83,255, 67, 78,255, 58, 83,255,
   71, 80,255, 65, 67, 69, 73, 84, 85,255, 45, 75,255, 65, 85,255, 65, 67,
   69, 72, 76, 79, 82, 84, 85,255, 67, 83,255, 78,255, 82,255, 69,255, 65,
   68, 82, 83, 84,255, 69, 73,255, 42, 58, 65, 66, 67, 68, 69, 70, 71, 72,
   73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89,255, 58, 83,
  255, 80,255, 73,255, 73, 80, 83,255, 67, 76, 80, 85,255, 65, 78,255, 58,
   65,255, 67, 77, 78,255, 69, 79, 85,255, 67, 69,255, 65, 69,255, 82,255,
   71, 78,255, 69, 83,255, 58, 83,255, 71, 80,255, 65, 69, 73, 85,255, 69,
   72, 85,255, 42, 65, 66, 67, 68, 70, 73, 77, 78, 80, 81, 82, 83, 84, 86,
   87,255, 67, 69,255, 67, 78, 81, 82,255, 65, 85,255, 72, 85,255, 70, 77,
   83, 84, 87,255, 80, 85,255, 69, 85,255, 65, 73, 77, 84, 86,255, 69, 73,
  255, 65, 73, 82, 83,255, 65, 66, 67, 73, 80, 82,255, 68,255, 83,255, 58,
   83,255, 80,255, 73,255, 42, 73, 80, 83,255, 58,255, 65, 69,255, 79, 82,
   84,255, 67, 76, 77, 79, 84, 85,255, 83,255, 51, 65, 68, 73, 77, 80, 81,
   82, 83,255, 76, 85,255, 67, 79,255, 65, 83,255, 69,255, 82, 83,255, 65,
   67, 73, 78, 79, 81, 82, 85,255, 65, 67, 68, 73, 78, 79, 81, 82, 83,255,
   65, 69, 81,255, 80, 85,255, 76, 78,255, 65, 85,255, 82, 89,255, 65,255,
   65, 68, 70, 74, 77, 78, 79, 83,255, 84,255, 45,255, 72,255, 84,255, 85,
  255, 65,255, 69, 70, 84,255, 82,255, 72,255, 75, 76,255, 65,255, 32, 49,
   79, 84,255, 68,255, 77,255, 83,255, 73, 80,255, 67, 76,255, 83, 84, 85,
  255, 65, 79,255, 66, 86,255, 78, 89,255, 70, 84,255, 69, 80,255, 65, 66,
   67, 72, 77, 82, 84,255, 49, 84,255, 80, 82,255, 67, 83,255, 65,255, 85,
  255, 79, 82,255, 58, 83,255, 80,255, 73,255, 83,255, 61,255, 61,255, 83,
   84,255, 77,255, 71, 85,255
};
static const unsigned char ag_key_act[] = {
  0,5,5,7,5,5,4,7,4,7,5,5,5,5,5,5,4,3,7,4,5,4,5,4,7,3,4,6,4,5,7,5,5,5,5,
  4,3,0,3,4,2,4,5,2,5,4,5,4,5,4,2,6,6,7,7,5,6,5,5,6,6,2,6,2,5,6,6,5,4,0,
  4,3,3,4,3,3,3,4,5,7,4,0,7,4,2,4,7,2,7,4,7,5,4,7,4,6,5,4,7,5,2,4,2,3,2,
  2,2,4,7,7,7,7,4,7,5,7,7,4,7,7,7,7,4,7,7,4,5,7,4,7,7,2,4,7,5,4,2,4,7,7,
  4,0,7,4,7,7,4,7,5,2,2,5,4,5,5,4,7,2,4,7,5,5,4,7,7,4,2,2,7,7,4,7,5,4,5,
  7,6,4,7,7,4,7,2,7,4,7,3,7,4,7,2,4,7,4,7,7,7,7,7,7,7,7,4,2,7,7,4,5,7,4,
  7,7,4,0,3,4,2,6,4,7,7,2,2,7,7,4,7,7,4,7,7,4,7,7,7,7,7,2,2,7,7,4,5,5,4,
  7,4,6,4,2,4,2,7,7,2,7,4,7,7,4,5,3,2,2,2,2,2,2,2,2,2,2,7,2,2,2,2,6,2,2,
  2,2,2,7,7,4,0,3,4,2,4,2,4,3,3,2,4,7,7,7,7,4,7,7,4,0,7,4,7,2,7,4,7,7,7,
  4,5,7,4,7,3,4,2,4,7,7,4,2,7,4,0,3,4,7,6,4,7,7,2,7,4,7,7,7,4,5,2,7,2,7,
  7,2,2,2,2,7,2,2,2,7,7,4,5,7,4,7,2,7,7,4,7,7,4,7,7,4,7,7,2,2,7,4,7,7,4,
  7,7,4,2,7,2,7,7,4,7,7,4,7,7,7,2,4,7,7,7,7,7,7,4,7,4,7,4,0,3,4,2,4,2,4,
  5,3,3,2,4,3,4,7,7,4,7,7,7,4,7,7,2,7,2,7,4,3,4,7,7,7,7,7,7,7,7,7,4,7,7,
  4,5,7,4,7,7,4,2,4,7,7,4,2,7,7,2,7,7,2,2,4,7,7,7,7,7,7,7,7,7,4,7,7,5,4,
  7,7,4,5,5,4,7,2,4,5,5,4,2,4,2,7,7,2,2,7,7,7,4,7,4,7,4,6,4,2,4,2,4,2,4,
  7,7,7,4,7,4,7,4,3,3,4,2,4,0,5,7,7,4,7,4,7,4,7,4,7,7,4,7,7,4,7,2,7,4,7,
  7,4,2,7,4,7,7,4,7,7,4,7,7,4,7,7,7,7,7,2,7,4,5,7,4,7,7,4,5,5,4,2,4,2,4,
  7,7,4,0,3,4,2,4,2,4,2,4,0,4,1,4,7,5,4,2,4,2,7,4
};
static const unsigned short ag_key_parm[] = {
    0, 18, 20, 50, 44, 22,  0, 52,  0, 54, 32, 10, 12,  8,  0, 34,  0,246,
   48,  0, 40,  0, 30,  0, 58,244,  0,  2,  0, 36, 56, 16, 24, 42, 26,  0,
  162,239,240,  0,  0,  0, 38,  0, 28,  0, 46,  0, 14,  0,  0,162,152,  6,
    4,158,150,164,172,148,168,  0,160,  0,156,170,154,166,  0,443,  0,271,
  259,  0,271,243,259,  0, 50,180,  0,464,244,  0,  0,  0,284,  0,110,  0,
   68,208,  0,250,  0,252,268,  0, 64,216,  0,  0,  0,463,  0,  0,  0,  0,
   96, 92,120, 52,  0, 54,256,262,122,  0,224, 86,234,276,  0,304,186,  0,
  198,302,  0,242,204,  0,  0,230,226,  0,  0,  0,288,108,  0,246, 62,  0,
  270, 48,  0,282,254,  0,  0,132,  0,214,212,  0,202,  0,  0,116,206,210,
    0, 72,134,  0,  0,  0,190, 70,  0,236,222,  0,264,306,272,  0,238,290,
    0,220,  0,146,  0, 58,244,182,  0,130,  0,  0,248,  0,232,118,184,294,
   56,278,292,266,  0,  0,114,308,  0,218,280,  0,124,286,  0,239,240,  0,
    0, 98,  0,200,104,  0,  0,240,188,  0,300,144,  0,126,140,  0,174,102,
   60,196,106,  0,  0,112,192,  0,296,298,  0,258,  0,128,  0,  0,  0,  0,
  100,260,  0,228,  0, 94, 66,  0,176,283,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,136,  0,  0,  0,  0,178,  0,  0,  0,  0,  0,194,274,  0,239,240,
    0,  0,  0,  0,  0,246,244,  0,  0, 50,284, 68, 64,  0, 54,262,  0,246,
   62,  0,282,  0, 48,  0, 72,190, 70,  0,264,306,  0, 58,244,  0,  0,  0,
   56,278,  0,  0,308,  0,239,240,  0,286, 98,  0,200,280,  0,188,  0, 60,
  196,192,  0,176,  0, 52,  0, 86,198,  0,  0,  0,  0,248,  0,  0,  0, 66,
  194,  0,264,306,  0,262,  0,248,308,  0,200,188,  0,196,192,  0,198,190,
    0,  0,194,  0, 68, 64,  0, 72, 70,  0,  0, 62,  0, 60, 66,  0,280,286,
    0,284,282,278,  0,  0, 50, 52, 54, 48, 58, 56,  0, 86,  0, 98,  0,239,
  240,  0,  0,  0,  0,  0,176,246,244,  0,  0,283,  0,116,134,  0,144,126,
  112,  0,122,136,  0,146,  0,128,  0,162,  0, 90, 84, 86, 78, 82, 74, 80,
   88, 76,  0,244,268,  0,264,236,  0,232,266,  0,  0,  0,260,258,  0,  0,
  262,270,  0,238,248,  0,  0,  0,244,256,234,254,236,238,248,232,240,  0,
  180,186,178,  0,208,216,  0,214,212,  0,202,  0,  0,206,210,  0,  0,  0,
    0,224,204,  0,  0,222,220,218,  0,174,  0,250,  0,252,  0,  0,  0,  0,
    0,  0,  0,304,302,300,  0,294,  0,288,  0,463,464,  0,  0,  0,443,138,
  142,140,  0,276,  0,246,  0,124,  0,132,130,  0,102,106,  0,104,  0,100,
    0, 96, 92,  0,  0, 94,  0,272,274,  0,242,140,  0,118,114,  0,110,120,
  122,108,116,  0,112,  0,138,140,  0,182,184,  0,296,298,  0,  0,  0,  0,
    0,290,292,  0,239,240,  0,  0,  0,  0,  0,  0,  0,508,  0,507,  0,230,
  226,  0,  0,  0,  0,228,  0
};
static const unsigned short ag_key_jmp[] = {
    0,  0,  0,  0,  0,  0,  0,  2,  0,  4,  0,  0,  0,  0,  0,  0,  0, 13,
   15,  0,  0,  0,  0,  0, 20, 23,  0, 24,  0,  0, 26,  0,  0,  0,  0,  0,
   33,  0, 37,  0, 36,  0,  0, 40,  0,  0,  0,  0,  0,  0,  1,  7,  9,  9,
   11,  0, 17,  0,  0, 20, 22, 27, 29, 42,  0, 46, 48,  0,  0,  0,  0, 39,
   44,  0, 53, 58, 65,  0,  0, 76,  0,  0, 89,  0, 81,  0, 86, 84, 94,  0,
   97,  0,  0,109,  0, 93,  0,  0,106,  0, 95,  0, 78, 80, 86, 90, 98,  0,
  113,116,123,128,  0,130,  0,135,140,  0,143,145,150,155,  0,162,171,  0,
    0,183,  0,177,181,126,  0,189,  0,  0,133,  0,191,198,  0,  0,206,  0,
  209,226,  0,203,  0,141,144,  0,  0,  0,  0,  0,230,153,  0,234,  0,  0,
    0,237,242,  0,159,163,246,248,  0,264,  0,  0,  0,256,171,  0,269,273,
    0,267,178,279,  0,286,289,292,  0,282,185,  0,295,  0,297,300,306,312,
  319,325,329,335,  0,194,341,345,  0,  0,356,  0,361,365,  0,  0,368,  0,
  210,213,  0,351,353,207,216,370,374,  0,387,391,  0,401,408,  0,376,378,
  380,383,385,226,229,410,412,  0,  0,  0,  0,418,  0,245,  0,247,  0,242,
  414,416,249,422,  0,424,430,  0,  0, 74,102,108,113,118,123,129,136,138,
  147,156,232,166,174,181,189,192,203,219,232,251,257,434,437,  0,  0,448,
    0,286,  0,289,  0,440,443,291,  0,450,452,456,466,  0,473,478,  0,  0,
  495,  0,492,305,498,  0,503,509,511,  0,  0,519,  0,527,530,  0,319,  0,
  536,542,  0,324,546,  0,  0,564,  0,560,330,  0,552,554,333,566,  0,568,
  571,573,  0,  0,297,470,302,483,489,308,312,316,322,533,327,336,341,575,
  580,  0,  0,589,  0,583,362,597,600,  0,613,615,  0,617,619,  0,607,610,
  370,373,621,  0,624,634,  0,643,649,  0,382,638,385,657,661,  0,681,687,
    0,666,671,675,394,  0,692,695,698,704,710,715,  0,723,  0,729,  0,  0,
  740,  0,413,  0,416,  0,  0,732,735,418,  0,742,  0,750,754,  0,763,774,
  782,  0,744,748,427,759,430,784,  0,788,  0,795,807,818,824,828,833,838,
  842,848,  0,851,859,  0,  0,887,  0,900,903,  0,459,  0,909,911,  0,453,
  862,868,456,891,897,462,464,  0,918,927,929,935,937,942,948,951,956,  0,
  961,967,  0,  0,974,976,  0,  0,  0,  0,984,493,  0,  0,  0,  0,499,  0,
  490,978,981,496,502,986,989,992,  0,995,  0,998,  0,515,  0,517,  0,519,
    0,521,  0,1002,1012,1020,  0,1026,  0,1035,  0,1043,1049,  0,533,  0,
    0,  0,1053,1055,  0,1059,  0,1067,  0,1070,  0,1077,1079,  0,1088,1090,
    0,1084,552,1092,  0,1095,1098,  0,559,1105,  0,1112,1114,  0,1117,1122,
    0,1152,1159,  0,1126,1131,1137,1141,1147,571,1163,  0,  0,1166,  0,1170,
  1175,  0,  0,  0,  0,588,  0,591,  0,1183,1191,  0,  0,1199,  0,598,  0,
  601,  0,603,  0,  0,  0,607,  0,1201,  0,  0,611,  0,614,1203,  0
};
static const unsigned short ag_key_index[] = {
   50, 69, 71, 74, 74,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 69, 69,  0,  0,260,  0,293,293,  0,345,  0,365,  0,  0,  0,
  376,388,397,  0,  0,  0,  0,402,409,409,  0,411,  0,  0,420,376,376,293,
    0, 69,425, 69,  0,  0,  0,  0,434, 69, 69, 69,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,293,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 74, 74, 71,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69,425,425,
    0,425,  0,  0,  0,  0,  0,434,434,  0, 69,  0,  0,441,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,443,  0,  0,  0,402,  0,467,
    0,476,  0,  0,  0,  0,  0,293,293,  0,  0,  0,  0,411,  0,  0,  0,  0,
    0,  0,  0,  0,  0,486,  0,  0,293,504,  0,513,  0,  0,402,425,  0,425,
    0,  0, 69,  0, 69, 69,  0,  0, 69,  0,  0,  0,  0,  0,434,  0,  0,  0,
    0,  0,  0,  0,523,  0,  0,  0,  0,365,525,  0,  0,  0,  0,529,  0,  0,
    0,  0,  0,  0,  0,531,  0,  0,  0,  0,402,  0,  0,  0,536,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,293,  0,  0,  0,  0,  0,411,  0,  0,  0,  0,  0,  0,  0,  0,486,486,
    0,293,  0,  0,  0,513,513,  0,425,  0,  0, 69,  0,  0,  0, 69,538,  0,
    0,  0,  0,  0, 69,  0,  0,523,  0,  0,  0,  0,365,525,525,  0,  0,  0,
  529,529,  0,  0,  0,543,  0,  0,  0,531,531,  0,  0,402,  0,  0,  0,  0,
  545,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,467,  0,  0,  0,
    0,  0,  0,476,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,486,  0,
    0,  0,  0,513,  0,  0,  0,  0,547,402,  0,  0,549,555, 69,523,  0,  0,
    0,  0,  0,  0,  0,  0,525,  0,  0,  0,529,  0,  0,543,543,562,  0,  0,
  531,  0,  0,536,  0,  0,  0,523,565,  0,  0,  0,  0,  0,  0,  0,  0,467,
    0,568,  0,  0,  0,  0,476,  0,  0,  0,574,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,547,402,  0,  0,549,555,  0,  0,  0,  0,  0,582,  0,  0,  0,
    0,  0,  0,  0,543,562,562,  0,  0,536,  0,  0,  0,  0,523,565,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,568,  0,  0,  0,  0,  0,  0,574,  0,
    0,585,  0,  0,  0,  0,  0, 69,  0,  0,  0,593,  0,  0,  0,  0,  0,  0,
    0,  0,562,595,  0,  0,  0,545,293,523,  0,  0,  0,  0,  0,523,  0,  0,
  605,  0,555,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,585,  0,  0,
    0,  0,  0, 69,  0,  0,  0,593,  0,  0,  0,  0,  0,  0,  0,  0,595,  0,
    0,609,  0,  0,  0,  0,  0,605,605,  0,555,  0,  0,  0,  0,  0,  0,  0,
    0,  0,376,  0,  0,616,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69,  0,  0,
    0,  0,  0,547,  0,  0,425,376,  0,  0,  0,  0,  0,  0,  0,523,605,  0,
    0,  0,  0,547,  0,425,  0,  0,  0,  0,  0,  0,523,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};
static const unsigned char ag_key_ends[] = {
75,0, 69,0, 78,67,69,76,0, 84,0, 88,0, 58,0, 86,73,84,69,0, 
67,75,0, 83,58,0, 71,73,83,84,69,82,0, 50,46,48,0, 58,0, 
79,83,84,58,0, 83,69,82,73,78,70,79,58,0, 79,83,84,58,0, 
86,45,65,66,83,58,0, 83,69,82,73,78,70,79,58,0, 58,0, 73,79,78,0, 
65,86,69,82,58,0, 82,84,0, 73,84,72,77,0, 65,83,0, 
76,73,67,65,84,73,79,78,0, 73,79,0, 73,78,84,0, 83,69,0, 
85,78,68,65,82,89,0, 65,78,67,72,0, 69,0, 78,67,69,76,0, 
79,78,67,69,0, 77,80,0, 67,0, 71,69,83,84,0, 77,65,73,78,0, 
82,65,84,73,79,78,0, 82,76,89,45,79,78,76,89,0, 80,73,82,69,83,0, 
76,83,69,0, 66,0, 77,45,84,65,71,0, 84,0, 78,68,76,73,78,71,0, 
68,68,69,78,0, 79,78,0, 71,69,0, 
69,71,82,73,84,89,45,80,82,79,84,69,67,84,69,68,0, 73,84,69,0, 
78,0, 82,0, 68,82,0, 83,65,71,69,0, 72,79,68,0, 78,0, 
76,84,73,80,65,82,84,0, 88,84,78,79,78,67,69,0, 67,69,0, 84,0, 
81,85,69,0, 73,79,78,65,76,0, 73,71,0, 79,78,69,0, 67,75,0, 
83,58,0, 88,89,0, 80,0, 76,77,0, 69,73,86,69,68,0, 
73,82,69,67,84,0, 82,69,83,72,69,82,0, 73,83,84,69,82,0, 
68,69,82,0, 85,73,82,69,68,0, 80,79,78,83,69,0, 79,82,84,0, 
80,65,85,84,72,0, 84,0, 84,80,0, 83,73,79,78,0, 79,77,80,0, 
65,76,0, 58,0, 65,76,69,0, 78,0, 71,0, 80,0, 88,84,0, 85,0, 
83,0, 84,65,71,0, 69,78,73,90,69,68,45,66,89,0, 
78,83,80,79,82,84,0, 69,0, 76,0, 69,0, 80,0, 73,0, 65,77,69,0, 
67,0, 82,83,73,79,78,0, 68,69,79,0, 69,68,0, 69,83,0, 77,58,0, 
82,69,83,58,0, 58,0, 75,0, 69,82,84,0, 
80,76,73,67,65,84,73,79,78,0, 68,73,79,0, 89,69,0, 78,67,69,76,0, 
79,78,67,69,0, 73,71,69,83,84,0, 82,73,0, 79,78,0, 71,69,0, 
86,73,84,69,0, 83,83,65,71,69,0, 78,0, 76,84,73,80,65,82,84,0, 
88,84,78,79,78,67,69,0, 67,75,0, 83,58,0, 79,80,0, 
73,83,84,69,82,0, 68,69,82,0, 80,65,85,84,72,0, 84,0, 
83,83,73,79,78,0, 78,65,76,0, 58,0, 78,0, 88,84,0, 85,0, 69,0, 
73,68,69,79,0, 69,68,0, 78,79,78,67,69,0, 88,84,78,79,78,67,69,0, 
79,80,0, 83,80,65,85,84,72,0, 82,73,0, 79,78,0, 84,0, 78,0, 
85,0, 69,0, 69,68,0, 80,76,73,67,65,84,73,79,78,0, 68,73,79,0, 
77,65,71,69,0, 83,83,65,71,69,0, 76,84,73,80,65,82,84,0, 
69,88,84,0, 73,68,69,79,0, 76,69,82,84,0, 67,79,78,0, 
69,78,68,69,82,0, 83,83,73,79,78,0, 71,78,65,76,0, 67,75,0, 
89,69,0, 65,78,67,69,76,0, 78,86,73,84,69,0, 82,65,67,75,0, 
69,71,73,83,84,69,82,0, 73,71,69,83,84,0, 73,80,0, 77,58,0, 
82,69,83,58,0, 58,0, 58,0, 79,77,80,0, 82,0, 68,68,82,0, 
84,72,79,68,0, 82,73,71,0, 75,69,78,73,90,69,68,45,66,89,0, 
65,78,83,80,79,82,84,0, 76,0, 83,69,82,0, 73,80,47,50,46,48,0, 
71,80,80,45,73,77,83,43,88,77,76,0, 76,84,69,82,78,65,84,73,86,69,0, 
73,71,69,83,84,0, 83,85,80,0, 73,88,69,68,0, 76,65,73,78,0, 
83,73,71,0, 70,67,56,50,50,0, 68,80,0, 71,79,82,73,84,72,77,0, 
84,83,0, 78,79,78,67,69,0, 
78,84,69,71,82,73,84,89,45,80,82,79,84,69,67,84,69,68,0, 78,67,69,0, 
80,65,81,85,69,0, 79,80,0, 76,77,0, 80,79,78,83,69,0, 73,0, 
69,82,78,65,77,69,0, 76,71,79,82,73,84,72,77,0, 75,0, 
79,77,65,73,78,0, 75,0, 79,78,67,69,0, 80,65,81,85,69,0, 79,80,0, 
69,65,76,77,0, 84,65,76,69,0, 67,84,73,79,78,0, 
88,80,73,82,69,83,0, 82,0, 71,0, 69,67,0, 69,66,0, 78,0, 
79,86,0, 67,84,0, 69,80,0, 65,71,0, 73,78,84,0, 
65,82,76,89,45,79,78,76,89,0, 82,79,77,45,84,65,71,0, 
79,45,84,65,71,0, 69,70,82,69,83,72,69,82,0, 
65,78,68,76,73,78,71,0, 65,86,69,82,58,0, 71,79,58,0, 78,0, 
82,85,69,0, 85,82,65,84,73,79,78,0, 68,53,0, 73,71,67,79,77,80,0, 
80,0, 72,79,78,69,0, 67,84,80,0, 80,0, 83,0, 68,80,0, 83,69,0, 
85,78,68,65,82,89,0, 69,82,83,73,79,78,0, 79,0, 69,83,0, 
65,76,83,69,0, 82,85,69,0, 76,73,65,83,0, 82,65,78,67,72,0, 
79,77,80,0, 73,68,68,69,78,0, 65,68,68,82,0, 67,69,73,86,69,68,0, 
79,82,84,0, 84,76,0, 82,85,69,0, 82,79,88,89,0, 
69,68,73,82,69,67,84,0, 80,84,73,79,78,65,76,0, 
69,81,85,73,82,69,68,0, 58,0, 84,0, 84,67,0, 
};
#define AG_TCV(x) ag_tcv[(x)]
static const unsigned short ag_tcv[] = {
    5,580,580,580,580,580,580,580,580,567,581,580,580,581,580,580,580,580,
  580,580,580,580,580,580,580,580,580,580,580,580,580,580, 62,568, 84,577,
  578,568,324,568, 80,219,568,569, 64, 86,280, 78,371,374,570,570,570,570,
  570,570,570,570, 58, 74, 82, 69,351, 76, 71,459,571,571,571,571,571,572,
  572,572,572,460,572,572,572,572,572,572,572,572,572,572,461,572,572,572,
  572,276,108,277,579,573,574,459,571,571,571,571,571,572,572,572,572,460,
  572,572,572,572,572,572,572,572,572,572,461,572,572,572,572,575,579,575,
  568,580,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,
  579,576,576,579,579,579,579,579,576,579,579,579,579,579,579,579,579,579,
  579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,
  579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,
  579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,
  579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,
  579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,
  579,579,579,579
};
#ifndef SYNTAX_ERROR
#define SYNTAX_ERROR fprintf(stderr,"%s, line %d, column %d\n", \
  (PCB).error_message, (PCB).line, (PCB).column)
#endif
#ifndef FIRST_LINE
#define FIRST_LINE 1
#endif
#ifndef FIRST_COLUMN
#define FIRST_COLUMN 1
#endif
#ifndef PARSER_STACK_OVERFLOW
#define PARSER_STACK_OVERFLOW {fprintf(stderr, \
   "\nParser stack overflow, line %d, column %d\n",\
   (PCB).line, (PCB).column);}
#endif
#ifndef REDUCTION_TOKEN_ERROR
#define REDUCTION_TOKEN_ERROR {fprintf(stderr, \
    "\nReduction token error, line %d, column %d\n", \
    (PCB).line, (PCB).column);}
#endif
#ifndef INPUT_CODE
#define INPUT_CODE(T) (T)
#endif
typedef enum
  {ag_accept_key, ag_set_key, ag_jmp_key, ag_end_key, ag_no_match_key,
   ag_cf_accept_key, ag_cf_set_key, ag_cf_end_key} key_words;
static void ag_get_key_word(PCB_DECL, int ag_k) {
  int ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
  const  unsigned char *ag_p;
  int ag_ch;
  while (1) {
    switch (ag_key_act[ag_k]) {
    case ag_cf_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          int ag_k1 = ag_key_parm[ag_k];
          int ag_k2 = ag_key_pt[ag_k1];
          if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) goto ag_fail;
          (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1 + 1];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
      goto ag_fail;
    }
    case ag_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
    }
    case ag_no_match_key:
ag_fail:
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    case ag_cf_set_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      ag_k = ag_key_jmp[ag_k];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) break;
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      break;
    }
    case ag_set_key:
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
    case ag_jmp_key:
      ag_k = ag_key_jmp[ag_k];
      break;
    case ag_accept_key:
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
      return;
    case ag_cf_accept_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)])
        (PCB).la_ptr = (PCB).pointer + ag_save;
      else (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      return;
    }
    }
    ag_ch = CONVERT_CASE(*(PCB).la_ptr++);
    ag_p = &ag_key_ch[ag_k];
    while (*ag_p < ag_ch) ag_p++;
    if (*ag_p != ag_ch) {
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    }
    ag_k = (int) (ag_p - ag_key_ch);
  }
}
#ifndef AG_NEWLINE
#define AG_NEWLINE 10
#endif
#ifndef AG_RETURN
#define AG_RETURN 13
#endif
#ifndef AG_FORMFEED
#define AG_FORMFEED 12
#endif
#ifndef AG_TABCHAR
#define AG_TABCHAR 9
#endif
static void ag_track(PCB_DECL) {
  int ag_k = (int) ((PCB).la_ptr - (PCB).pointer);
  while (ag_k--) {
    switch (*(PCB).pointer++) {
    case AG_NEWLINE:
      (PCB).column = 1, (PCB).line++;
    case AG_RETURN:
    case AG_FORMFEED:
      break;
    case AG_TABCHAR:
      (PCB).column += (TAB_SPACING) - ((PCB).column - 1) % (TAB_SPACING);
      break;
    default:
      (PCB).column++;
    }
  }
}
static const int ag_rtt[] = {
  215,217,  0,215,217,  0,215,217,  0
};
static const unsigned short ag_tstt[] = {
574,573,572,571,570,569,568,461,460,459,374,371,347,346,345,344,343,342,341,
  340,339,338,337,336,335,280,246,244,240,239,162,119,118,117,116,115,114,
  86,52,48,46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,2,
  0,1,50,51,54,55,56,57,87,89,113,158,234,235,236,237,241,245,333,334,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,
271,259,0,238,247,250,256,270,
271,259,243,0,238,242,247,250,256,270,
271,259,243,0,238,242,247,250,256,270,
567,62,58,0,59,60,61,67,
62,0,61,159,
5,0,
5,0,
5,0,
5,0,
58,0,3,
5,0,
5,0,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
58,0,3,
572,571,570,461,460,459,374,371,276,0,185,196,258,272,
578,577,573,572,571,570,569,568,461,460,459,374,371,324,280,219,86,80,78,76,
  74,71,69,64,0,70,257,260,262,264,
567,443,351,84,76,74,62,5,0,73,248,289,
567,443,351,84,76,74,62,5,0,73,248,289,
572,571,570,569,461,460,459,374,371,280,86,0,222,223,226,
572,571,570,569,461,460,459,374,371,280,86,0,222,223,226,
567,62,0,
58,0,72,
572,571,570,569,567,461,460,459,374,371,280,246,244,240,239,86,62,58,0,
572,571,570,569,461,460,459,374,371,280,246,244,240,239,86,0,220,221,222,
  223,226,234,235,236,237,241,245,
570,374,371,62,0,61,160,163,
579,578,577,576,575,574,573,572,571,570,569,568,567,562,561,533,532,531,530,
  529,493,491,465,461,460,459,394,393,392,391,390,389,388,374,371,362,351,
  324,280,277,276,246,244,240,239,219,178,148,141,140,139,138,137,136,135,
  119,118,117,116,115,114,108,86,84,82,80,78,76,62,58,5,0,59,60,67,
572,571,570,569,461,460,459,374,371,280,86,0,53,222,223,226,
562,561,493,491,465,0,49,480,481,556,557,558,559,560,
576,575,574,573,572,571,570,569,568,461,460,459,374,371,351,280,277,276,219,
  108,86,84,82,80,78,76,58,0,47,90,92,125,547,
570,374,371,0,45,123,382,546,
570,374,371,0,43,123,382,538,
570,394,393,392,391,390,389,388,374,371,0,41,123,382,383,387,514,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,141,
  140,139,138,137,136,135,86,0,39,93,95,126,127,
574,573,572,571,570,569,568,533,532,531,530,529,461,460,459,374,371,280,86,
  0,37,87,89,526,527,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,35,87,89,523,524,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,5,0,33,87,89,523,524,
  525,
570,374,371,0,31,123,520,521,
570,374,371,0,29,123,521,522,
574,573,572,571,570,569,568,461,460,459,374,371,280,119,118,117,116,115,114,
  86,0,27,87,89,113,168,
574,573,572,571,570,569,568,461,460,459,374,371,280,148,86,0,25,87,89,474,
  475,
574,573,572,571,570,569,568,461,460,459,374,371,280,148,86,0,23,87,89,417,
  418,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,82,0,21,81,102,
  228,349,352,512,513,
574,573,572,571,570,569,568,461,460,459,374,371,280,178,86,0,19,87,89,169,
  170,171,175,
570,374,371,0,17,123,124,
576,575,574,573,572,571,570,569,568,461,460,459,374,371,351,280,277,276,219,
  108,86,84,82,80,78,76,58,0,15,90,92,125,
574,573,572,571,570,569,568,461,460,459,374,371,362,280,246,244,240,239,86,
  84,82,0,13,81,102,227,228,237,241,245,251,252,253,254,255,349,352,359,
  360,361,363,
570,394,393,392,391,390,389,388,374,371,0,11,383,384,385,387,395,
570,394,393,392,391,390,389,388,374,371,0,9,123,379,382,383,387,
574,573,572,571,570,569,568,461,460,459,374,371,280,246,244,240,239,86,84,
  82,0,7,81,102,227,228,237,241,245,251,252,253,254,255,348,349,352,
570,374,371,0,4,120,121,123,
573,572,571,570,461,460,459,374,371,280,86,0,275,
571,570,459,374,371,283,0,213,281,282,285,
58,0,72,
572,571,570,461,460,459,374,371,276,0,185,196,258,272,
578,577,573,572,571,570,569,568,461,460,459,374,371,324,280,219,86,80,78,76,
  74,69,64,0,
58,0,72,
71,0,70,
578,573,572,571,570,569,568,567,461,460,459,374,371,324,315,314,308,307,302,
  301,280,277,276,219,210,206,200,86,80,78,62,58,0,59,60,67,
74,0,73,
567,443,351,84,76,62,5,0,75,249,322,
567,443,351,84,76,62,5,0,75,249,322,
572,571,570,569,461,460,459,374,371,280,86,0,
58,0,72,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,59,
  60,67,
62,0,61,159,
570,374,371,0,
62,0,61,
5,0,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,64,62,5,0,59,60,67,
5,0,
576,575,574,573,572,571,570,569,568,461,460,459,374,371,351,280,277,276,219,
  108,86,84,82,80,78,76,58,0,
71,0,70,
567,74,62,5,0,59,60,67,
5,0,
570,374,371,0,
567,74,62,5,0,59,60,67,
5,0,
567,74,62,5,0,59,60,67,
5,0,
567,64,62,0,59,60,67,
567,80,74,62,5,0,59,60,67,
567,80,74,62,5,0,59,60,67,
5,0,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,86,
  0,
78,0,77,
5,0,
567,74,62,5,0,59,60,67,
5,0,
567,64,62,5,0,59,60,67,
64,0,65,
5,0,
64,0,65,
5,0,
570,374,371,0,
567,62,5,0,59,60,67,
5,0,
567,62,0,59,67,
567,62,5,0,59,60,67,
5,0,
567,64,62,5,0,59,60,67,
64,0,65,
5,0,
567,62,0,59,67,
567,62,0,59,67,
5,0,
567,62,0,59,67,
567,62,0,59,67,
5,0,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,82,62,58,0,353,
  354,355,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,103,
  104,105,106,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,
567,82,62,58,0,59,60,67,
572,571,570,569,567,461,460,459,374,371,280,246,244,240,239,86,62,0,59,60,
  67,
82,0,81,
567,74,64,62,5,0,59,60,67,
64,0,65,
5,0,
567,78,62,0,59,60,67,
567,62,0,59,67,
64,0,65,
5,0,
570,374,371,0,
567,62,5,0,59,60,67,
5,0,
567,62,5,0,59,60,67,
5,0,
58,0,72,
271,259,243,0,242,247,250,256,270,
271,259,243,0,242,247,250,256,270,
271,259,0,247,250,256,270,
82,0,81,
74,0,73,364,
567,74,64,62,5,0,59,60,67,
64,0,65,
5,0,
570,374,371,0,
567,62,0,59,67,
567,62,0,59,67,
567,62,5,0,59,60,67,
5,0,
567,62,5,0,59,60,67,
5,0,
74,0,73,350,
567,74,62,5,0,59,60,67,
5,0,
570,374,371,0,
567,62,0,59,67,
567,62,5,0,59,60,67,
5,0,
573,572,571,570,461,460,459,374,371,280,86,0,
571,570,459,374,371,0,
567,283,280,277,74,64,62,58,5,0,286,287,288,
571,570,567,459,374,371,280,277,74,64,62,5,0,282,284,285,
283,0,
280,0,
277,0,
570,374,371,0,123,184,
578,573,572,571,570,569,568,461,460,459,374,371,324,280,219,86,80,71,69,64,
  0,261,265,267,268,269,
572,571,570,461,460,459,374,371,276,0,185,196,258,272,
578,573,572,571,570,569,568,461,460,459,374,371,324,315,314,308,307,302,301,
  280,277,276,219,210,206,200,86,80,78,58,0,290,291,292,293,294,295,296,
  297,298,299,300,316,
578,573,572,571,570,569,568,567,461,460,459,374,371,324,315,314,308,307,302,
  301,280,277,276,219,210,206,200,86,80,78,62,58,0,59,60,67,
578,573,572,571,570,569,568,461,460,459,374,371,280,277,276,219,86,80,78,76,
  58,0,323,325,328,
324,0,
578,577,573,572,571,570,569,568,567,461,460,459,374,371,324,280,277,276,219,
  86,80,78,76,74,71,69,64,62,58,0,59,60,67,
580,579,578,577,576,575,574,573,572,571,570,569,568,461,460,459,374,371,351,
  324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,58,0,96,
162,62,0,61,158,
570,374,371,0,
579,578,577,576,575,574,573,572,571,570,569,568,461,460,459,374,371,351,324,
  280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,161,165,166,
  167,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
64,0,63,
576,575,574,573,572,571,570,569,568,461,460,459,374,371,351,280,277,276,219,
  108,86,84,82,80,78,76,58,0,90,92,
74,0,73,548,
74,5,0,73,155,540,
74,0,73,155,539,
64,0,63,
80,74,5,0,79,214,515,516,
80,74,5,0,79,214,515,516,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,150,
  149,148,147,146,145,144,143,142,86,0,93,95,128,
74,0,73,528,534,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
570,374,371,0,121,123,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,119,118,117,116,115,
  114,86,62,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,420,473,
574,573,572,571,570,569,568,509,501,496,493,491,488,486,465,461,460,459,453,
  446,444,433,374,371,280,86,0,89,422,424,425,428,430,450,476,477,478,479,
  480,481,482,483,484,485,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,420,473,
574,573,572,571,570,569,568,472,470,465,461,460,459,453,448,446,444,435,433,
  374,371,280,86,0,89,419,421,422,423,424,425,426,427,428,429,430,431,450,
567,62,0,353,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,82,80,78,76,74,71,69,64,62,58,5,0,103,
  104,
84,0,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,82,62,58,0,353,
  354,355,
572,571,570,569,461,460,459,374,371,280,246,244,240,239,86,0,221,222,223,
  226,234,235,236,237,241,245,
572,571,570,569,567,461,460,459,374,371,280,246,244,240,239,86,62,0,59,60,
  67,
74,0,73,155,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,84,82,62,0,59,60,
  67,
78,0,77,
572,571,570,461,460,459,374,371,276,0,172,185,196,272,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,178,86,62,0,59,60,
  67,
578,577,573,572,571,570,569,568,461,460,459,374,371,324,280,277,276,219,86,
  80,78,71,69,58,0,231,233,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,0,102,227,228,255,
  352,
567,76,74,64,62,5,0,59,60,67,
567,76,74,64,62,5,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,0,102,227,228,255,
  352,
567,76,74,64,62,5,0,59,60,67,
567,76,74,64,62,5,0,59,60,67,
567,76,74,64,62,5,0,59,60,67,
567,76,74,64,62,5,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,380,375,374,371,369,280,86,62,0,
  59,60,67,
74,0,73,
74,0,73,364,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,246,244,240,239,86,
  84,82,62,0,59,60,67,
409,408,407,406,405,404,403,402,401,400,399,398,0,396,
570,374,371,0,386,410,
574,573,572,571,570,569,568,567,461,460,459,374,371,357,280,86,62,0,59,60,
  67,
74,0,73,
74,0,73,350,
574,573,572,571,570,569,568,461,460,459,374,371,280,119,118,117,116,115,114,
  86,0,87,89,113,
571,570,459,374,371,0,
571,570,459,374,371,0,285,
58,0,286,
571,570,567,459,374,371,280,277,74,64,62,5,0,282,284,285,
570,374,371,0,278,279,
570,374,371,0,
578,573,572,571,570,569,568,461,460,459,374,371,324,280,219,86,80,69,64,0,
  267,
578,573,572,571,570,569,568,567,461,460,459,443,374,371,351,324,280,277,276,
  219,86,84,80,78,76,74,69,62,58,5,0,319,320,321,
69,0,68,317,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,443,374,371,351,280,86,84,76,74,
  69,62,5,0,68,312,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
578,573,572,571,570,569,568,461,460,459,374,371,324,315,314,308,307,302,301,
  280,277,276,219,210,206,200,86,80,78,58,0,290,291,292,293,294,295,296,
  297,298,299,300,316,
578,573,572,571,570,569,568,461,460,459,374,371,280,277,276,219,86,80,78,76,
  58,0,
69,0,
578,573,572,571,570,569,568,461,460,459,374,371,280,277,276,219,86,80,78,76,
  58,0,323,325,328,
578,577,573,572,571,570,569,568,461,460,459,374,371,324,280,277,276,219,86,
  80,78,76,74,71,69,64,58,0,224,230,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,99,
  100,101,
567,62,5,0,59,60,67,
579,578,577,576,575,574,573,572,571,570,569,568,461,460,459,374,371,351,324,
  280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,0,165,
574,573,572,571,570,569,568,567,469,468,461,460,459,374,371,280,86,84,62,0,
  59,60,67,
567,84,62,0,59,60,67,
567,84,62,0,59,60,67,
567,84,62,0,59,60,67,
571,570,567,459,374,371,62,0,59,60,67,
567,562,561,493,491,465,62,0,59,60,67,
574,573,572,571,570,569,568,567,555,554,553,461,460,459,374,371,280,86,62,0,
  59,60,67,
74,0,73,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
74,0,73,
74,0,73,539,
574,573,572,571,570,569,568,567,543,461,460,459,374,371,280,86,62,0,59,60,
  67,
567,74,62,5,0,59,60,67,
570,567,374,371,62,0,59,60,67,
581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,
  371,351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,0,
  215,216,
567,74,62,5,0,59,60,67,
74,0,73,517,
74,0,73,517,
567,74,62,5,0,59,60,67,
574,573,572,571,570,569,568,567,535,461,460,459,374,371,280,86,62,0,59,60,
  67,
567,74,62,5,0,59,60,67,
74,0,73,534,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,523,
567,62,0,59,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,119,118,117,116,115,114,
  86,0,87,89,113,
567,69,62,0,59,60,67,
64,0,63,
567,69,62,0,59,60,67,
464,463,0,451,454,458,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,69,62,0,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,64,62,5,0,59,60,67,
64,0,63,
64,0,63,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,69,62,0,67,
567,64,62,5,0,59,60,67,
64,0,63,
567,351,62,0,59,60,67,
572,571,570,569,461,460,459,374,371,280,246,244,240,239,86,0,221,222,223,
  226,234,235,236,237,241,245,
74,0,73,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,82,0,81,102,228,
  349,352,513,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
567,74,64,62,58,5,0,59,60,67,
74,64,5,0,173,
574,573,572,571,570,569,568,461,460,459,374,371,280,178,86,0,87,89,170,171,
  175,
578,577,573,572,571,570,569,568,461,460,459,374,371,324,280,277,276,219,86,
  80,78,71,69,58,0,
567,74,64,62,5,0,59,60,67,
76,74,64,5,0,75,249,322,
76,74,64,5,0,75,249,322,
76,74,64,5,0,75,249,322,
76,74,64,5,0,75,249,322,
76,74,64,5,0,75,249,322,
76,74,64,5,0,75,249,322,
574,573,572,571,570,569,568,461,460,459,380,375,374,371,369,280,86,0,87,89,
  195,365,366,367,368,
574,573,572,571,570,569,568,567,461,460,459,380,375,374,371,369,280,86,62,0,
  59,60,67,
74,0,73,
574,573,572,571,570,569,568,461,460,459,374,371,280,246,244,240,239,86,84,
  82,0,81,102,227,228,237,241,245,251,252,253,254,255,349,352,363,
567,62,0,59,67,
570,374,371,0,
58,0,72,
574,573,572,571,570,569,568,461,460,459,374,371,357,280,86,0,87,89,195,356,
  358,
574,573,572,571,570,569,568,567,461,460,459,374,371,357,280,86,62,0,59,60,
  67,
74,0,73,
571,570,459,374,371,0,
570,374,371,0,
280,0,
578,573,572,571,570,569,568,461,460,459,374,371,324,280,277,276,219,86,80,
  78,58,0,319,
578,573,572,571,570,569,568,567,461,460,459,374,371,324,280,277,276,219,86,
  80,78,62,58,0,59,60,67,
69,0,68,
69,0,68,
574,573,572,571,570,569,568,567,461,460,459,443,374,371,351,280,86,84,76,74,
  62,5,0,87,89,313,
311,310,309,0,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
578,573,572,571,570,569,568,567,461,460,459,443,374,371,351,324,280,277,276,
  219,86,84,80,78,76,74,71,64,62,58,5,0,326,330,331,332,
578,577,573,572,571,570,569,568,461,460,459,374,371,324,280,277,276,219,86,
  80,78,76,74,71,69,64,58,0,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,0,99,
574,573,572,571,570,569,568,469,468,461,460,459,374,371,280,86,84,0,83,490,
84,0,563,
84,0,102,445,492,
84,0,102,445,
571,570,459,374,371,0,494,495,500,
562,561,493,491,465,0,480,481,556,557,558,559,560,
574,573,572,571,570,569,568,555,554,553,461,460,459,374,371,280,86,0,87,89,
  194,195,549,550,551,552,
574,573,572,571,570,569,568,567,555,554,553,461,460,459,374,371,280,86,62,0,
  59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,156,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
567,74,62,5,0,59,60,67,
574,573,572,571,570,569,568,567,543,461,460,459,374,371,280,86,62,0,59,60,
  67,
574,573,572,571,570,569,568,543,461,460,459,374,371,280,86,0,87,89,156,541,
74,5,0,73,155,540,
570,374,371,0,385,395,
581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,
  371,351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,0,
  215,217,
574,573,572,571,570,569,568,567,519,461,460,459,374,371,280,86,62,0,59,60,
  67,
74,0,73,
74,0,73,
74,5,0,73,129,130,
574,573,572,571,570,569,568,535,461,460,459,374,371,280,86,0,87,89,156,
574,573,572,571,570,569,568,567,535,461,460,459,374,371,280,86,62,0,59,60,
  67,
567,74,62,5,0,59,60,67,
567,64,62,5,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,119,118,117,116,115,114,
  86,0,87,89,113,
567,64,62,5,0,59,60,67,
69,0,68,157,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
69,0,68,
574,573,572,571,570,569,568,462,461,460,459,374,371,280,86,0,87,89,457,
459,0,455,
567,84,64,62,5,0,452,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
567,69,62,0,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,84,62,0,353,354,
  355,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
574,573,572,571,570,569,568,567,509,501,496,493,491,488,486,465,461,460,459,
  453,446,444,433,374,371,280,86,62,0,59,60,67,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
69,0,68,436,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,69,62,0,89,432,
574,573,572,571,570,569,568,567,472,470,465,461,460,459,453,448,446,444,435,
  433,374,371,280,86,62,0,59,60,67,
351,0,
567,351,62,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,176,
58,0,72,
74,0,73,
567,74,69,64,62,5,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,380,375,374,371,369,280,86,0,87,89,
  195,365,366,367,368,
570,374,371,0,397,
570,374,371,0,411,
567,69,62,0,59,60,67,
567,74,62,5,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,357,280,86,0,87,89,195,356,
  358,
570,374,371,0,
570,374,371,0,279,
578,573,572,571,570,569,568,461,460,459,374,371,324,280,277,276,219,86,80,
  78,58,0,316,
572,571,570,567,461,460,459,374,371,276,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,212,86,62,0,59,60,
  67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,119,118,117,116,115,
  114,86,62,0,59,60,67,
572,571,570,567,461,460,459,374,371,276,62,0,59,60,67,
570,567,374,371,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,306,305,280,86,62,0,59,
  60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,183,182,181,180,86,
  62,0,59,60,67,
578,573,572,571,570,569,568,461,460,459,374,371,280,277,276,219,86,80,78,76,
  71,58,0,330,
574,573,572,571,570,569,568,469,468,461,460,459,374,371,280,86,0,87,89,467,
571,570,459,374,371,84,0,495,500,564,565,566,
571,570,459,374,371,0,495,500,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,74,69,62,5,0,68,
  312,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,74,62,5,0,59,60,67,
567,74,62,5,0,59,60,67,
567,74,62,5,0,59,60,67,
574,573,572,571,570,569,568,555,554,553,461,460,459,374,371,280,86,0,87,89,
  194,195,549,550,551,552,
567,74,69,64,62,5,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,156,
74,5,0,73,155,540,
574,573,572,571,570,569,568,543,461,460,459,374,371,280,86,0,87,89,156,541,
567,69,62,0,59,60,67,
567,62,0,59,67,
574,573,572,571,570,569,568,519,461,460,459,374,371,280,86,0,87,89,156,518,
574,573,572,571,570,569,568,567,519,461,460,459,374,371,280,86,62,0,59,60,
  67,
579,578,577,576,574,573,572,571,570,569,568,567,461,460,459,374,371,324,280,
  153,152,151,86,62,0,59,60,67,
74,0,73,
567,69,62,0,59,60,67,
574,573,572,571,570,569,568,535,461,460,459,374,371,280,86,0,87,89,156,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,84,62,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,473,
567,84,62,0,59,67,83,
460,0,
570,374,371,0,123,456,
567,84,62,0,59,60,67,
574,573,572,571,570,569,568,567,469,468,461,460,459,374,371,280,86,84,62,0,
  59,60,67,
567,511,510,62,0,59,60,67,
567,84,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,84,62,0,353,354,
  355,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,0,89,
567,84,62,0,59,60,67,
567,84,62,0,59,60,67,
567,84,62,0,59,60,67,
567,84,62,0,59,60,67,
567,84,62,0,59,60,67,
574,573,572,571,570,569,568,509,501,496,493,491,488,486,465,461,460,459,453,
  446,444,433,374,371,280,86,0,89,422,424,425,428,430,450,477,478,479,480,
  481,482,483,484,485,
567,84,62,0,59,60,67,
567,449,310,62,0,59,60,67,
84,0,471,
84,0,471,
567,84,62,0,59,60,67,437,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,69,62,0,353,354,
  355,
574,573,572,571,570,569,568,472,470,465,461,460,459,453,448,446,444,435,433,
  374,371,280,86,0,89,421,422,423,424,425,426,427,428,429,430,431,450,
351,0,
567,78,62,0,59,60,67,
570,567,374,371,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,210,209,207,206,204,
  200,198,197,86,62,0,59,60,67,
69,0,68,
69,0,68,
69,0,68,
69,0,68,
570,374,371,0,
570,374,371,0,
58,0,72,
69,0,68,
280,0,
572,571,570,461,460,459,374,371,276,0,185,196,272,
574,573,572,571,570,569,568,461,460,459,374,371,280,212,86,0,87,89,211,
574,573,572,571,570,569,568,461,460,459,374,371,280,119,118,117,116,115,114,
  86,0,87,89,113,
572,571,570,461,460,459,374,371,276,0,185,196,272,
570,374,371,0,201,
574,573,572,571,570,569,568,461,460,459,374,371,306,305,280,86,0,87,89,303,
  304,
574,573,572,571,570,569,568,461,460,459,374,371,280,183,182,181,180,86,0,87,
  89,179,
567,84,64,62,5,0,452,
571,570,459,374,371,0,495,500,564,
84,0,
571,570,459,374,371,0,495,500,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,74,62,5,0,87,89,
  313,
310,309,0,
69,0,68,
69,0,68,
69,0,68,157,
69,0,68,
570,374,371,0,386,410,
567,69,62,0,59,60,67,
567,74,62,5,0,59,60,67,
574,573,572,571,570,569,568,519,461,460,459,374,371,280,86,0,87,89,156,518,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,153,
  152,151,86,0,93,95,131,132,133,134,
579,578,577,576,574,573,572,571,570,569,568,567,461,460,459,374,371,324,280,
  153,152,151,86,62,0,59,60,67,
69,0,68,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,0,87,89,102,
84,0,83,
459,0,
570,374,371,0,
86,0,85,
84,0,83,489,
574,573,572,571,570,569,568,469,468,461,460,459,374,371,280,86,84,0,83,490,
511,510,0,
84,0,502,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,0,89,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,103,
  104,105,106,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,
84,0,102,447,
84,0,497,
84,0,102,445,
84,0,102,434,
84,0,102,487,
567,64,62,5,0,59,60,67,
84,0,83,
449,310,0,
571,570,459,374,371,0,110,112,
84,0,
69,0,
567,64,62,5,0,59,60,67,
78,0,77,
570,374,371,0,123,184,
574,573,572,571,570,569,568,461,460,459,374,371,280,210,209,207,206,204,200,
  198,197,86,0,87,89,174,186,187,188,189,190,191,192,193,194,195,199,202,
  205,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,276,86,84,62,0,59,
  60,67,
570,567,374,371,84,62,0,59,60,67,
567,378,377,62,0,59,60,67,
567,374,371,62,0,59,60,67,
570,374,371,0,
570,374,371,0,412,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
570,374,371,0,279,
570,374,371,0,
571,570,459,374,371,0,495,500,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
567,545,544,62,0,59,60,67,
69,0,68,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,74,62,5,0,59,60,67,
567,69,62,0,59,60,67,
567,74,62,5,0,59,60,67,
567,69,62,0,59,60,67,
567,74,62,5,0,59,60,67,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,153,
  152,151,86,0,93,95,131,132,133,134,
574,573,572,571,570,569,568,567,537,536,461,460,459,374,371,280,86,62,0,59,
  60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
461,0,
574,573,572,571,570,569,568,462,461,460,459,374,371,280,86,0,87,89,457,
572,571,570,569,461,460,459,374,371,280,246,244,240,239,86,0,220,221,222,
  223,226,234,235,236,237,241,245,
574,573,572,571,570,569,568,469,468,461,460,459,374,371,280,86,0,87,89,467,
572,571,570,569,461,460,459,374,371,78,0,504,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,103,
  104,105,106,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,
84,0,
571,570,567,459,374,371,84,62,0,59,60,67,495,498,500,
574,573,572,571,570,569,568,469,468,461,460,459,374,371,280,86,0,87,89,466,
  467,
571,570,459,374,371,0,
84,0,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,240,239,86,84,62,0,
  67,438,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,84,62,0,353,354,
  355,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,183,182,181,180,86,
  62,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,69,64,62,5,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
74,69,64,5,0,68,203,
567,69,62,0,59,60,67,
567,69,62,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,276,86,84,0,87,89,102,
  196,
570,374,371,84,0,83,123,381,382,
378,377,0,376,
374,371,0,370,
570,374,371,0,
570,374,371,0,
567,62,0,59,67,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,
570,374,371,0,
571,570,459,374,371,0,495,500,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,
545,544,0,542,
570,567,374,371,62,0,59,60,67,
69,0,68,154,
69,0,68,
69,0,68,
69,0,68,
567,74,62,5,0,59,60,67,
567,74,62,5,0,59,60,67,
567,74,62,5,0,59,60,67,
574,573,572,571,570,569,568,537,536,461,460,459,374,371,280,86,0,87,89,
84,0,
567,84,64,62,5,0,452,
572,571,570,569,508,507,461,460,459,374,371,84,78,0,505,506,
84,0,
84,0,
571,570,459,374,371,0,495,500,
84,0,
567,84,64,62,0,59,60,67,
567,62,0,
574,573,572,571,570,569,568,461,460,459,374,371,280,240,239,86,84,0,87,89,
  234,237,439,440,441,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,84,0,89,
574,573,572,571,570,569,568,461,460,459,374,371,280,183,182,181,180,86,0,87,
  89,177,179,
69,0,68,
69,0,68,
69,0,68,
570,567,374,371,62,0,59,60,67,
69,0,68,
69,0,68,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,394,393,392,391,390,389,388,62,0,59,60,67,
567,280,74,64,62,5,0,373,
567,280,74,64,62,5,0,373,
416,415,414,0,413,
571,570,459,374,371,0,495,500,
570,374,371,0,123,382,
579,578,577,576,574,573,572,571,570,569,568,567,461,460,459,374,371,324,280,
  86,84,62,0,59,60,67,
579,578,577,576,574,573,572,571,570,569,568,567,461,460,459,374,371,324,280,
  86,84,62,0,59,60,67,
579,578,577,576,574,573,572,571,570,569,568,567,461,460,459,374,371,324,280,
  86,84,62,0,59,60,67,
579,578,577,576,574,573,572,571,570,569,568,567,461,460,459,374,371,324,280,
  86,84,62,0,59,60,67,
84,0,
571,570,459,374,371,0,495,500,
64,0,63,
443,0,442,
567,84,62,0,67,438,
580,579,578,577,576,575,574,573,572,571,570,569,568,567,461,460,459,374,371,
  351,324,280,277,276,219,108,86,84,82,80,78,76,74,71,69,64,62,58,5,0,103,
  104,105,106,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,
572,571,570,567,461,460,459,374,371,276,62,0,59,60,67,
570,567,374,371,62,0,59,60,67,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,212,86,62,0,59,60,
  67,
570,374,371,0,123,184,
574,573,572,571,570,569,568,567,461,460,459,374,371,280,86,62,0,59,60,67,
571,570,567,459,374,371,283,62,0,59,60,67,
394,393,392,391,390,389,388,0,383,387,
570,567,374,371,74,64,62,5,0,372,
571,570,459,374,371,0,495,500,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,86,
  84,0,93,95,102,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,86,
  84,0,93,95,102,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,86,
  84,0,93,95,102,
579,578,577,576,574,573,572,571,570,569,568,461,460,459,374,371,324,280,86,
  84,0,93,95,102,
571,570,459,374,371,0,495,500,
574,573,572,571,570,569,568,567,469,468,461,460,459,374,371,280,86,62,0,59,
  60,67,
240,239,0,234,237,
84,0,
84,0,
572,571,570,461,460,459,374,371,276,0,185,196,272,
570,374,371,0,201,
574,573,572,571,570,569,568,461,460,459,374,371,280,212,86,0,87,89,211,
574,573,572,571,570,569,568,461,460,459,374,371,280,86,0,87,89,
571,570,459,374,371,283,0,208,213,281,282,285,
567,84,62,0,59,60,67,
570,374,371,0,
571,570,459,374,371,0,495,500,
567,74,62,5,0,59,60,67,
567,74,62,5,0,59,60,67,
571,570,459,374,371,0,495,500,
574,573,572,571,570,569,568,469,468,461,460,459,374,371,280,86,0,87,89,467,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
567,74,64,62,5,0,59,60,67,
84,0,
570,374,371,0,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
571,570,459,374,371,0,495,500,
};
static unsigned const char ag_astt[8129] = {
  1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,0,1,1,1,1,1,1,2,1,2,1,
  2,2,2,1,1,1,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,2,2,7,3,1,1,1,1,2,2,2,7,2,1,
  1,1,1,1,2,2,2,7,2,1,1,1,1,1,1,1,8,7,1,1,1,1,2,7,1,1,3,7,3,7,3,7,3,7,1,7,1,
  3,7,3,7,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,
  1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,
  1,1,1,1,1,1,1,1,7,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,
  7,1,1,1,2,1,4,4,4,4,4,2,4,4,7,1,1,1,4,4,4,4,4,2,4,4,7,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,9,9,4,2,7,1,4,4,4,4,5,4,4,4,
  4,4,4,4,4,4,4,4,5,5,7,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,7,1,1,2,1,1,2,2,2,1,1,
  1,1,1,1,2,7,3,1,1,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,1,5,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,1,1,1,1,1,7,1,2,2,2,1,
  2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,
  1,1,7,1,1,1,2,1,1,1,7,1,1,1,2,1,2,2,2,2,2,2,2,1,1,7,1,1,1,1,1,2,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,7,1,2,1,2,1,1,1,1,1,1,1,1,2,2,2,
  2,2,1,1,1,1,1,1,1,7,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,4,7,1,2,1,1,1,1,1,1,1,7,1,1,1,2,1,1,1,7,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,2,2,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,2,7,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,7,1,2,1,
  1,2,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,1,2,7,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,2,1,2,1,2,2,2,2,2,2,2,1,1,7,1,2,1,1,1,1,1,2,2,2,2,2,2,2,1,1,
  7,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,2,7,1,1,1,1,1,1,1,1,1,
  1,1,1,1,2,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,7,1,1,
  1,1,2,4,1,1,1,1,1,1,1,1,1,1,7,1,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,4,2,4,1,2,7,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,1,8,7,1,1,1,2,4,1,4,4,4,4,2,4,4,7,1,2,1,4,4,4,4,2,4,4,7,1,2,1,9,
  9,9,9,9,9,9,9,9,9,9,4,2,7,1,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,5,7,1,1,1,2,7,1,1,1,1,1,7,2,4,1,3,7,1,8,1,7,
  1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,5,7,1,
  1,1,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,2,4,1,1,8,
  1,5,7,1,1,1,3,7,9,9,9,4,1,8,1,5,7,1,1,1,3,7,1,8,1,5,7,1,1,1,3,7,1,8,1,7,1,
  1,1,1,8,5,1,5,7,1,1,1,1,8,5,1,5,7,1,1,1,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,4,2,7,1,3,7,1,8,1,5,7,1,1,1,3,7,1,5,1,5,7,2,2,1,2,5,1,3,7,2,5,1,3,
  7,9,9,9,4,1,1,5,7,2,2,1,3,7,1,1,7,1,1,1,1,5,7,2,2,1,3,7,1,5,1,5,7,2,2,1,2,
  5,1,3,7,1,1,7,1,1,1,1,7,1,1,3,7,1,1,7,1,1,1,1,7,1,1,3,7,5,5,5,5,5,5,5,1,5,
  5,5,5,5,5,5,5,1,5,7,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,5,
  1,5,7,2,2,1,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,1,8,5,1,5,7,1,
  1,1,2,5,1,3,7,1,8,1,7,1,1,1,1,1,7,1,1,2,5,1,3,7,9,9,9,4,1,1,5,7,2,2,1,3,7,
  1,1,5,7,2,2,1,3,7,2,7,1,2,2,2,7,1,1,1,1,1,2,2,2,7,1,1,1,1,1,2,2,7,1,1,1,1,
  2,4,1,2,4,1,1,1,8,5,1,5,7,1,1,1,2,5,1,3,7,2,2,2,4,1,1,7,1,1,1,1,7,1,1,1,1,
  5,7,2,2,1,3,7,1,1,5,7,2,2,1,3,7,2,4,1,1,1,8,1,5,7,1,1,1,3,7,9,9,9,4,1,1,7,
  1,1,1,1,5,7,2,2,1,3,7,9,9,9,9,9,9,9,9,9,9,9,4,1,1,1,1,1,5,5,5,5,5,5,5,5,1,
  5,7,1,1,3,1,1,5,1,1,1,5,5,5,5,5,5,7,3,3,1,1,5,1,5,2,7,1,1,1,7,1,2,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,7,2,2,1,1,2,1,1,1,1,1,1,1,1,1,7,1,2,2,2,1,
  1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,2,2,2,2,2,2,
  2,2,2,2,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,4,8,8,8,8,8,8,
  8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,7,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,2,2,2,7,3,1,2,2,2,7,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
  7,2,1,1,2,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,4,1,1,2,5,7,1,1,2,2,4,1,1,1,2,7,1,2,8,5,
  7,1,1,1,1,2,8,5,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,
  2,2,2,1,7,2,1,1,2,4,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,7,
  1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,
  1,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,2,2,2,2,2,2,2,2,2,2,1,
  9,9,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,9,9,
  9,9,9,9,9,9,9,9,5,3,3,2,7,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,1,5,7,1,1,2,1,1,
  1,1,1,1,1,1,1,1,2,2,2,2,1,7,1,2,1,1,2,2,2,1,1,1,8,8,8,8,1,8,8,8,8,8,8,8,8,
  8,8,8,1,7,1,1,1,2,4,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,
  1,1,1,1,1,1,1,1,1,7,1,1,2,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,
  1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,1,7,1,
  1,1,2,4,1,2,4,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,2,
  2,2,2,2,2,2,2,2,2,2,7,1,1,1,1,7,2,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,
  1,1,2,4,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,7,2,1,2,1,1,1,1,
  1,5,1,1,1,1,1,7,3,1,5,3,1,1,5,1,1,1,5,5,5,5,5,5,7,3,3,1,1,1,1,7,3,1,9,9,9,
  4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,1,1,1,1,1,1,1,5,1,1,1,5,1,1,5,
  1,1,1,1,1,1,5,1,1,5,5,5,5,1,5,7,1,1,2,2,4,1,2,1,8,1,7,1,1,1,1,8,1,7,1,1,1,
  8,8,8,8,8,8,8,5,8,8,8,5,8,8,5,8,8,5,5,5,2,5,5,7,1,1,1,8,1,7,1,1,1,1,8,1,7,
  1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,2,2,2,2,2,2,2,2,2,2,1,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
  7,1,1,2,1,1,5,7,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,5,3,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,8,1,7,1,1,1,1,8,
  1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,8,8,1,8,8,8,1,7,1,1,1,1,8,8,8,8,8,1,
  7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,8,8,8,8,8,8,8,
  1,8,8,8,8,8,8,8,1,7,1,1,1,2,5,1,2,4,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,
  7,1,1,1,1,8,1,5,7,1,1,1,8,1,8,8,1,7,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,1,1,1,5,1,5,7,2,2,1,2,4,1,
  1,2,4,1,1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,5,1,
  5,7,2,2,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,7,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,7,2,1,1,1,8,1,7,1,1,1,2,4,1,1,8,1,7,1,1,1,2,
  2,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,9,9,9,9,
  9,9,9,1,9,9,9,9,9,9,9,1,1,7,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,
  8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,2,4,1,2,4,1,1,8,1,7,1,1,1,1,8,1,
  7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,9,9,9,9,9,9,9,1,9,9,9,9,
  9,9,9,1,1,7,1,1,5,1,5,7,2,2,1,2,4,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,
  2,2,1,7,1,2,1,1,2,2,2,1,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,7,1,1,1,
  1,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,5,5,1,8,5,7,1,1,1,4,4,4,7,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,7,2,1,2,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,4,1,5,5,1,5,7,2,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,
  4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,1,
  7,1,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,2,7,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,2,1,1,7,1,1,2,2,2,7,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,
  1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,3,3,3,3,3,5,1,1,1,5,1,
  7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,8,1,8,8,8,8,8,
  8,8,8,8,8,8,8,8,1,8,7,1,1,1,2,7,1,2,7,1,1,1,1,1,1,1,1,5,1,1,1,5,1,1,5,1,1,
  5,5,5,5,5,7,2,1,2,2,2,2,5,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,1,1,1,1,1,1,1,5,1,
  1,1,5,1,1,5,5,1,1,1,1,1,5,1,1,1,5,1,5,5,1,5,7,2,1,1,2,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  2,7,1,1,1,7,2,1,7,2,2,2,1,7,2,2,1,1,1,1,1,7,2,1,1,1,1,1,1,1,7,2,2,3,1,2,2,
  2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,2,1,1,1,8,8,8,8,8,8,8,1,8,8,
  8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,8,8,8,8,8,8,
  8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,
  8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,1,2,5,7,1,1,2,1,1,1,7,1,
  1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,7,3,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,2,4,7,1,
  2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,
  1,7,1,1,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,
  2,2,2,1,7,2,1,2,1,5,1,5,7,2,2,1,2,7,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,
  1,1,1,2,7,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,7,2,1,2,1,7,1,5,2,5,5,5,7,2,2,7,
  1,2,7,1,2,7,1,2,7,1,9,1,9,7,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,
  1,2,7,1,2,7,1,2,7,1,2,7,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,1,7,1,1,1,2,7,1,2,7,1,2,7,1,2,7,1,2,7,2,1,1,1,1,1,1,1,1,9,1,1,1,1,1,
  1,1,1,9,7,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,
  7,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,2,4,1,2,4,1,1,5,8,5,1,
  5,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,
  5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,
  3,1,1,1,1,1,1,7,2,1,1,1,7,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,7,1,1,2,1,2,3,3,3,5,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,2,8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,
  8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,1,
  8,8,8,8,8,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,
  1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,7,2,1,1,1,
  1,1,1,1,8,7,1,1,1,1,1,1,1,1,1,1,4,1,1,8,8,8,8,8,8,8,5,8,8,8,8,8,8,8,5,2,5,
  5,7,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,
  5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,2,1,1,1,1,5,8,5,1,5,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,2,5,7,1,1,2,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,1,1,3,1,1,8,1,7,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,1,1,2,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,
  8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,5,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,1,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,7,1,1,3,1,2,1,4,1,1,2,1,7,1,1,1,7,1,1,1,8,1,7,1,1,1,5,5,5,
  5,5,5,5,1,5,5,5,5,5,5,5,5,5,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,8,1,7,1,1,1,8,8,
  8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,
  8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,2,2,2,2,1,1,2,2,2,2,2,
  2,2,2,1,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,7,2,1,7,2,1,5,1,7,2,2,1,1,9,9,9,9,9,
  9,9,1,9,9,9,9,9,9,9,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,7,1,1,2,2,2,2,2,2,2,2,2,2,1,2,7,1,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,
  8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,7,1,2,7,1,2,7,1,
  1,1,1,7,2,2,2,7,2,7,1,2,7,1,1,7,1,1,1,1,1,1,1,1,1,7,2,2,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,2,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,7,2,1,2,1,1,
  1,1,1,1,1,1,1,7,2,2,2,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,7,2,1,2,2,
  1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,7,2,1,2,5,2,5,5,5,7,2,9,9,9,9,9,5,3,3,
  3,2,7,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,5,5,5,7,2,1,2,2,2,5,2,
  7,1,2,7,1,2,4,1,2,2,7,1,1,1,1,7,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,1,1,1,1,1,2,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,2,4,2,1,7,9,9,9,4,2,7,1,2,7,1,3,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,7,1,1,2,2,7,1,7,2,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,
  1,1,1,1,1,1,1,1,7,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,1,7,2,2,1,7,2,1,7,
  2,2,1,7,2,2,1,7,2,2,1,5,1,5,7,2,2,1,2,7,1,2,2,7,1,1,1,1,1,7,1,1,1,7,1,7,1,
  5,1,5,7,2,2,1,2,7,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,
  1,1,1,8,1,8,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,1,1,4,1,1,1,7,
  1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,7,3,1,1,1,4,1,1,1,1,1,4,1,
  1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,
  7,1,1,1,1,8,8,1,7,1,1,1,2,7,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,
  1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,3,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,
  8,8,1,7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,2,7,1,1,1,1,1,1,1,2,1,1,
  1,1,1,1,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,7,1,1,2,1,1,2,2,2,1,1,1,1,
  1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,
  1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,2,7,1,1,1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,
  1,1,1,2,2,1,1,1,1,1,1,1,7,2,1,1,2,9,9,9,9,9,4,2,7,8,8,8,8,8,8,8,1,8,8,8,8,
  8,8,8,8,8,8,1,7,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,
  8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,5,5,1,5,7,3,3,1,
  1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,4,2,4,4,7,1,2,1,8,1,7,1,1,1,1,8,
  1,7,1,1,1,1,5,5,1,5,7,3,3,1,1,5,5,1,5,7,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,7,1,1,1,1,1,1,1,2,7,1,1,3,2,2,2,7,2,1,1,7,2,2,2,2,4,2,2,2,7,1,1,7,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,2,2,4,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,2,7,2,8,1,8,8,1,7,1,
  1,1,2,7,1,2,2,7,1,2,7,1,2,7,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,
  2,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,7,2,1,3,7,5,2,5,5,5,7,2,9,9,9,9,1,1,9,
  9,9,9,9,8,9,7,1,1,2,7,2,7,1,1,1,1,1,7,1,1,2,7,1,2,8,1,7,1,1,1,9,9,5,1,1,1,
  1,1,1,1,1,1,1,1,1,1,2,2,1,2,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,7,2,1,2,2,2,7,1,2,7,1,2,7,1,8,1,8,
  8,1,7,1,1,1,2,7,1,2,7,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,
  2,1,1,8,8,8,8,8,8,8,1,7,1,1,1,5,1,5,5,5,5,7,2,5,1,5,5,5,5,7,2,2,2,2,7,2,1,
  1,1,1,1,4,1,1,1,1,1,7,1,2,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,
  1,1,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,
  8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,
  8,1,7,1,1,1,2,7,1,1,1,1,1,7,1,1,2,7,1,1,5,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,5,8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,
  8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,7,1,2,8,8,8,8,8,8,8,1,8,8,
  8,8,8,8,8,1,7,1,1,1,8,8,1,8,8,8,8,1,7,1,1,1,2,2,2,2,2,2,2,7,1,1,1,5,1,1,5,
  5,5,5,7,3,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,1,1,
  1,1,1,7,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,2,7,3,1,2,7,3,7,
  1,1,1,1,1,1,1,1,1,7,1,2,2,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,7,2,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,7,1,2,1,1,1,1,8,1,7,1,1,1,1,
  1,1,5,2,2,2,2,2,4,2,2,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,7,1,1,1,1,
  1,1,1,1,1,2,2,1,1,1,1,1,1,1,7,2,1,2,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,
  5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,2,7,3,3,3,5,1,1,1,1,1,
  7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,
  1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,
  1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,
  1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,
  1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,
  1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,3,3,3,3,3,7,3,3
};
static const unsigned short ag_pstt[] = {
1,1,1,1,1,1,1,1,1,1,1,1,372,371,370,369,368,367,366,365,364,363,362,361,360,
  1,237,234,230,229,142,81,80,79,78,77,76,1,11,14,15,16,17,18,19,20,21,22,
  23,24,25,26,27,28,29,30,31,32,33,34,35,36,0,0,13,12,10,9,8,7,82,1,373,6,
  225,226,227,2,4,3,358,5,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,
270,255,2,228,40,39,38,37,
270,255,233,3,236,41,40,39,38,37,
270,255,233,4,232,42,40,39,38,37,
43,45,44,5,44,44,46,43,
34,6,47,47,
30,7,
29,8,
28,9,
27,10,
48,11,49,
25,12,
24,13,
48,14,50,
48,15,51,
48,16,52,
48,17,53,
48,18,54,
48,19,55,
48,20,56,
48,21,57,
48,22,58,
48,23,59,
48,24,60,
48,25,61,
48,26,62,
48,27,63,
48,28,64,
48,29,65,
48,30,66,
48,31,67,
48,32,68,
48,33,69,
48,34,70,
48,35,71,
48,36,72,
73,73,73,73,73,73,73,73,74,37,75,274,269,273,
77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,41,77,77,38,
  76,79,78,258,77,
301,301,301,301,301,43,301,301,39,80,82,81,
301,301,301,301,301,43,301,301,40,80,83,81,
84,84,84,84,84,84,84,84,84,84,84,41,235,85,84,
84,84,84,84,84,84,84,84,84,84,84,42,231,85,84,
38,38,39,
42,44,86,
34,34,34,34,37,34,34,34,34,34,34,34,34,34,34,34,37,37,45,
84,84,84,84,84,84,84,84,84,84,237,234,230,229,84,46,87,87,377,85,84,374,375,
  376,2,4,3,
88,88,88,34,47,139,89,89,
31,31,31,31,31,31,31,31,31,31,31,31,43,31,31,31,31,31,31,31,31,31,31,31,31,
  31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
  31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,43,31,31,48,33,
  33,43,
84,84,84,84,84,84,84,84,84,84,84,49,90,213,85,84,
92,94,95,93,91,50,97,673,671,668,96,672,674,675,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,
  98,98,51,101,99,98,100,101,
102,102,102,52,104,102,103,652,
102,102,102,53,106,102,105,641,
102,444,443,442,441,440,439,438,102,102,54,110,102,109,108,107,600,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
  110,109,108,107,106,105,111,55,113,112,111,93,112,
1,1,1,1,1,1,1,632,631,630,629,628,1,1,1,1,1,1,1,56,115,633,1,625,114,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,57,118,618,1,116,117,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,621,58,120,618,1,116,119,120,
121,121,121,59,123,121,122,614,
121,121,121,60,126,121,124,125,
1,1,1,1,1,1,1,1,1,1,1,1,1,81,80,79,78,77,76,1,61,129,82,1,127,128,
1,1,1,1,1,1,1,1,1,1,1,1,1,131,1,62,132,130,1,542,542,
1,1,1,1,1,1,1,1,1,1,1,1,1,134,1,63,135,133,1,472,472,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,47,64,144,140,
  139,141,142,138,143,596,
1,1,1,1,1,1,1,1,1,1,1,1,1,162,1,65,148,161,1,147,155,146,145,
149,149,149,66,151,149,150,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,
  98,98,67,153,99,98,152,
136,136,136,136,136,136,136,136,136,136,136,136,400,136,237,234,230,229,136,
  137,47,68,162,140,139,154,158,157,156,155,159,159,159,159,159,160,138,
  162,400,161,403,
163,444,443,442,441,440,439,438,163,163,69,167,436,166,165,107,164,
102,444,443,442,441,440,439,438,102,102,70,169,102,168,431,432,107,
136,136,136,136,136,136,136,136,136,136,136,136,136,237,234,230,229,136,137,
  47,71,172,140,139,154,158,157,156,155,170,170,170,170,170,378,171,138,
173,173,173,72,176,175,174,173,
177,177,177,177,177,177,177,177,177,177,177,275,177,
178,178,178,178,178,180,74,183,182,181,179,
42,271,184,
73,73,73,73,73,73,73,73,74,76,75,274,254,273,
260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,
  260,260,260,260,261,
42,256,185,
41,79,186,
187,187,187,187,187,187,187,43,187,187,187,187,187,187,187,187,187,187,187,
  187,187,187,187,187,187,187,187,187,187,187,43,187,80,187,187,43,
43,302,188,
344,344,344,344,44,344,344,82,189,239,190,
344,344,344,344,44,344,344,83,189,238,190,
216,216,216,216,216,216,216,216,216,216,216,217,
42,85,191,
192,192,192,192,192,192,192,192,192,192,192,192,192,43,192,192,192,192,192,
  192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,43,
  192,31,86,192,192,43,
34,87,193,193,
194,194,194,88,
34,141,195,
26,90,
43,196,43,91,196,196,43,
43,197,43,92,197,197,43,
43,198,43,93,198,198,43,
43,199,43,94,199,199,43,
43,200,43,95,200,200,43,
43,201,43,669,96,201,201,43,
23,97,
54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,
  54,54,55,
41,91,202,
43,203,43,31,100,203,203,43,
22,101,
86,86,86,433,
43,204,43,31,103,204,204,43,
21,104,
43,205,43,31,105,205,205,43,
20,106,
43,206,43,107,206,206,43,
43,207,31,43,31,108,207,207,43,
43,208,31,43,31,109,208,208,43,
19,110,
57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,
45,112,209,
18,113,
43,210,43,31,114,210,210,43,
17,115,
43,31,43,31,116,619,619,43,
36,622,211,
16,118,
36,624,211,
15,120,
86,86,86,615,
43,43,31,122,613,613,43,
14,123,
43,43,124,212,43,
43,43,31,125,616,616,43,
13,126,
43,31,43,31,127,152,152,43,
36,151,213,
12,129,
43,43,130,214,43,
43,43,131,215,43,
11,132,
43,43,133,216,43,
43,43,134,217,43,
10,135,
390,390,390,390,390,390,390,218,390,390,390,390,390,390,390,390,218,390,136,
  218,218,393,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,219,220,221,220,220,220,220,220,220,220,220,220,
  220,220,137,220,220,220,221,
222,222,222,222,222,222,222,222,222,222,222,222,222,222,386,
43,31,43,31,139,385,385,43,
223,223,223,223,43,223,223,223,223,223,223,223,223,223,223,223,43,140,223,
  223,43,
47,141,224,
43,225,31,43,31,142,225,225,43,
36,595,226,
9,144,
43,227,43,145,227,227,43,
43,43,146,228,43,
36,154,229,
8,148,
86,86,86,89,
43,43,31,150,88,88,43,
7,151,
43,43,31,152,90,90,43,
6,153,
42,154,230,
270,255,233,155,231,233,232,38,37,
270,255,233,156,234,236,235,38,37,
270,255,157,238,237,38,37,
47,218,224,
43,407,239,240,
43,241,31,43,31,160,241,241,43,
36,401,242,
5,162,
447,447,447,446,
43,43,164,243,43,
43,43,165,244,43,
43,43,31,166,434,434,43,
4,167,
43,43,31,168,427,427,43,
3,169,
43,381,245,246,
43,247,43,31,171,247,247,43,
2,172,
86,86,86,87,
43,43,174,248,43,
43,43,31,175,83,83,43,
1,176,
277,277,277,277,277,277,277,277,277,277,277,278,
249,249,249,249,249,297,
294,294,294,294,294,294,294,250,294,179,251,251,296,
178,178,287,178,178,178,287,287,287,287,287,287,180,290,290,179,
252,286,
253,284,
279,183,
254,254,254,184,254,272,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,266,255,
  255,185,257,262,255,255,262,
73,73,73,73,73,73,73,73,74,186,75,274,253,273,
256,256,256,256,256,256,256,256,256,256,256,256,256,334,258,260,261,264,265,
  256,256,256,256,259,262,263,256,256,256,256,187,303,305,306,307,308,309,
  310,311,312,313,314,257,
266,266,266,266,266,266,266,43,266,266,266,266,266,266,266,266,266,266,266,
  266,266,266,266,266,266,266,266,266,266,266,43,266,188,266,266,43,
267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,
  267,267,189,346,268,267,
269,345,
270,270,270,270,270,270,270,270,43,270,270,270,270,270,270,270,270,270,270,
  270,270,270,270,270,270,270,270,43,270,191,270,270,43,
271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,
  271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,470,
  471,
142,34,193,139,272,
150,150,150,194,
273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,
  273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,147,
  195,140,273,273,149,
40,196,274,
40,197,275,
40,198,276,
40,199,277,
40,200,278,
35,201,279,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,
  98,98,202,92,98,
43,656,280,281,
43,643,204,282,283,653,
43,642,285,284,286,
35,206,287,
46,290,601,207,288,289,290,290,
46,291,601,208,288,289,291,291,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,121,
  120,119,118,117,116,115,114,113,111,209,122,111,292,
43,627,293,295,294,
296,296,296,296,296,296,296,43,296,296,296,296,296,296,296,43,211,296,296,
  43,
173,173,173,212,297,173,
298,298,298,298,298,298,298,43,298,298,298,298,298,298,298,298,298,298,298,
  298,298,43,213,298,298,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,214,299,1,300,300,
307,307,307,307,307,307,307,305,306,309,95,93,303,312,304,307,307,307,301,
  308,310,311,307,307,307,307,215,307,549,550,553,555,560,302,314,313,548,
  551,552,554,556,557,558,559,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,216,299,1,315,315,
321,321,321,321,321,321,321,318,319,316,321,321,321,301,317,308,310,320,311,
  321,321,321,321,217,321,323,322,478,479,480,481,482,483,484,485,486,487,
  302,
389,389,391,389,
72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,
  72,72,72,72,72,72,72,72,72,72,72,72,72,72,219,
67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,
  219,67,67,67,67,67,67,67,67,67,67,67,67,69,67,67,
70,221,
390,390,390,390,390,390,390,218,390,390,390,390,390,390,390,390,218,390,222,
  218,218,392,
84,84,84,84,84,84,84,84,84,84,237,234,230,229,84,223,324,377,85,84,374,375,
  376,2,4,3,
325,325,325,325,43,325,325,325,325,325,325,325,325,325,325,325,43,224,325,
  325,43,
43,598,282,326,
327,327,327,327,327,327,327,43,327,327,327,327,327,327,327,327,327,43,226,
  327,327,43,
45,227,328,
73,73,73,73,73,73,73,73,74,228,330,329,274,273,
331,331,331,331,331,331,331,43,331,331,331,331,331,331,331,331,43,229,331,
  331,43,
332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,
  332,332,332,332,332,230,333,332,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,231,139,154,218,
  251,138,
43,334,31,31,43,31,232,334,334,43,
43,335,31,31,43,31,233,335,335,43,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,234,139,154,218,
  248,138,
43,336,31,31,43,31,235,336,336,43,
43,337,31,31,43,31,236,337,337,43,
43,338,31,31,43,31,237,338,338,43,
43,339,31,31,43,31,238,339,339,43,
340,340,340,340,340,340,340,43,340,340,340,340,340,340,340,340,340,340,43,
  239,340,340,43,
43,408,341,
43,405,239,342,
343,343,343,343,343,343,343,43,343,343,343,343,343,343,343,343,343,343,343,
  343,343,43,242,343,343,43,
459,458,457,456,455,454,453,452,451,450,449,448,243,344,
345,345,345,244,435,346,
347,347,347,347,347,347,347,43,347,347,347,347,347,347,347,347,43,245,347,
  347,43,
43,382,348,
43,379,245,349,
1,1,1,1,1,1,1,1,1,1,1,1,1,81,80,79,78,77,76,1,248,82,1,84,
350,350,350,350,350,298,
178,178,178,178,178,250,291,
250,295,293,
178,178,287,178,178,178,287,287,287,287,287,287,252,289,289,179,
351,351,351,253,285,352,
86,86,86,170,
265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,
  267,265,
353,353,353,353,353,353,353,340,353,353,353,340,353,353,340,353,353,353,353,
  353,353,340,353,353,340,340,340,340,353,340,256,353,353,342,
40,335,354,336,
43,355,43,258,355,355,43,
43,356,43,259,356,356,43,
357,357,357,357,357,357,357,327,357,357,357,327,357,357,327,357,357,327,327,
  327,40,327,327,260,358,357,
43,359,43,261,359,359,43,
43,360,43,262,360,360,43,
43,361,43,263,361,361,43,
43,362,43,264,362,362,43,
43,363,43,265,363,363,43,
256,256,256,256,256,256,256,256,256,256,256,256,256,334,258,260,261,264,265,
  256,256,256,256,259,262,263,256,256,256,256,266,304,305,306,307,308,309,
  310,311,312,313,314,257,
350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,
  350,350,351,
364,268,
267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,
  267,267,269,347,268,267,
365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,
  365,365,365,365,365,365,365,365,270,214,365,
366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,
  366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,
  366,62,271,366,366,64,
43,43,31,272,359,359,43,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
  146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,148,
  146,
31,31,31,31,31,31,31,43,31,31,31,31,31,31,31,31,31,367,43,274,367,367,43,
43,368,43,275,368,368,43,
43,369,43,276,369,369,43,
43,370,43,277,370,370,43,
371,371,43,371,371,371,43,278,371,371,43,
43,372,372,372,372,372,43,279,372,372,43,
373,373,373,373,373,373,373,43,373,373,373,373,373,373,373,373,373,373,43,
  280,373,373,43,
43,655,374,
375,375,375,375,375,375,375,43,375,375,375,375,375,375,375,43,282,375,375,
  43,
43,644,376,
43,646,378,377,
379,379,379,379,379,379,379,43,379,379,379,379,379,379,379,379,43,285,379,
  379,43,
43,380,43,31,286,380,380,43,
381,43,381,381,43,287,381,381,43,
209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,
  209,209,209,209,209,209,211,209,209,209,209,210,209,209,209,209,209,209,
  209,209,288,382,382,
43,31,43,31,289,607,607,43,
43,606,383,384,
43,604,383,385,
43,386,43,31,292,386,386,43,
387,387,387,387,387,387,387,43,387,387,387,387,387,387,387,387,43,293,387,
  387,43,
43,31,43,31,294,634,634,43,
43,626,388,389,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,296,618,1,390,
43,43,297,391,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,81,80,79,78,77,76,1,298,82,1,392,
43,393,43,299,393,393,43,
35,545,394,
43,395,43,301,395,395,43,
522,521,302,398,397,396,
43,399,43,303,399,399,43,
43,400,43,304,400,400,43,
43,401,43,305,401,401,43,
43,402,43,306,402,402,43,
51,51,51,51,51,51,51,403,51,51,51,51,51,51,51,404,403,307,403,
43,405,43,308,405,405,43,
43,406,43,309,406,406,43,
43,407,43,310,407,407,43,
43,408,43,311,408,408,43,
43,409,43,312,409,409,43,
43,31,43,31,313,546,546,43,
35,544,410,
35,475,394,
43,411,43,316,411,411,43,
43,412,43,317,412,412,43,
43,413,43,318,413,413,43,
43,414,43,319,414,414,43,
43,415,43,320,415,415,43,
51,51,51,51,51,51,51,416,51,51,51,51,51,51,51,404,416,321,416,
43,31,43,31,322,476,476,43,
35,474,417,
43,418,43,324,418,418,43,
84,84,84,84,84,84,84,84,84,84,237,234,230,229,84,325,419,377,85,84,374,375,
  376,2,4,3,
43,599,376,
136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,47,327,140,139,
  141,142,138,597,
420,420,420,420,420,420,420,43,420,420,420,420,420,420,420,43,328,420,420,
  43,
43,31,31,43,421,31,329,421,421,43,
158,158,158,330,422,
1,1,1,1,1,1,1,1,1,1,1,1,1,162,1,331,161,1,156,146,145,
223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,
  223,223,223,223,223,224,
43,31,31,43,31,333,252,252,43,
44,344,344,344,334,189,250,190,
44,344,344,344,335,189,249,190,
44,344,344,344,336,189,247,190,
44,344,344,344,337,189,246,190,
44,344,344,344,338,189,245,190,
44,344,344,344,339,189,244,190,
1,1,1,1,1,1,1,1,1,1,424,425,1,1,426,1,1,340,423,1,414,409,429,428,427,
430,430,430,430,430,430,430,43,430,430,430,430,430,430,430,430,430,430,43,
  341,430,430,43,
43,406,341,
136,136,136,136,136,136,136,136,136,136,136,136,136,237,234,230,229,136,137,
  47,343,140,139,154,158,157,156,155,159,159,159,159,159,160,138,404,
43,43,344,431,43,
464,464,464,345,
42,346,432,
1,1,1,1,1,1,1,1,1,1,1,1,433,1,1,347,423,1,398,434,395,
435,435,435,435,435,435,435,43,435,435,435,435,435,435,435,435,43,348,435,
  435,43,
43,380,348,
300,300,300,300,300,299,
436,436,436,281,
437,352,
339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,
  339,339,341,339,
438,438,438,438,438,438,438,43,438,438,438,438,438,438,438,438,438,438,438,
  438,438,43,438,354,438,438,43,
40,355,439,
40,356,440,
1,1,1,1,1,1,1,329,1,1,1,329,1,1,329,1,1,329,329,329,329,329,357,331,1,331,
326,325,324,328,
40,359,441,
40,360,442,
40,361,443,
40,362,444,
40,363,445,
446,446,446,446,446,446,446,355,446,446,446,355,446,446,355,355,446,446,446,
  446,446,355,446,446,446,355,446,355,355,446,355,364,348,446,446,357,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,220,220,221,
61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
  61,61,61,61,61,61,61,61,61,61,61,61,61,63,61,
447,447,447,447,447,447,447,447,447,447,447,447,447,447,447,447,48,367,447,
  447,
448,368,678,
137,369,504,569,568,
137,370,504,677,
449,449,449,449,449,371,570,449,449,
92,94,95,93,91,372,673,671,670,96,672,674,675,
1,1,1,1,1,1,1,450,451,452,1,1,1,1,1,1,1,373,423,1,662,662,657,455,454,453,
456,456,456,456,456,456,456,43,456,456,456,456,456,456,456,456,456,456,43,
  374,456,456,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,375,457,1,132,
458,458,458,458,458,458,458,43,458,458,458,458,458,458,458,43,376,458,458,
  43,
43,459,43,31,377,459,459,43,
460,460,460,460,460,460,460,43,460,460,460,460,460,460,460,460,43,378,460,
  460,43,
1,1,1,1,1,1,1,461,1,1,1,1,1,1,1,379,457,1,132,461,
43,643,380,282,283,645,
163,163,163,381,462,164,
209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,
  209,209,209,209,209,209,211,209,209,209,209,210,209,209,209,209,209,209,
  209,209,382,207,208,
463,463,463,463,463,463,463,43,463,463,463,463,463,463,463,463,43,383,463,
  463,43,
43,605,464,
43,603,464,
43,95,386,465,94,466,
1,1,1,1,1,1,1,467,1,1,1,1,1,1,1,387,457,1,635,
468,468,468,468,468,468,468,43,468,468,468,468,468,468,468,468,43,388,468,
  468,43,
43,31,43,31,389,636,636,43,
43,31,43,31,390,620,620,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,81,80,79,78,77,76,1,391,82,1,617,
43,31,43,31,392,153,153,43,
40,393,469,541,
470,470,470,470,470,470,470,43,470,470,470,470,470,470,470,43,394,470,470,
  43,
40,395,471,
1,1,1,1,1,1,1,519,1,1,1,1,1,1,1,396,520,1,517,
472,397,473,
509,511,509,509,509,398,511,
40,399,474,
40,400,475,
40,401,476,
40,402,477,
38,478,38,403,
479,479,479,479,479,479,479,218,479,479,479,479,479,479,479,479,218,404,218,
  218,479,
40,405,480,
40,406,481,
40,407,482,
40,408,483,
40,409,484,
485,485,485,485,485,485,485,43,485,485,485,485,485,485,485,485,485,485,485,
  485,485,485,485,485,485,485,485,43,410,485,485,43,
40,411,486,
40,412,487,
40,413,488,
40,414,489,
40,415,499,490,
491,491,491,491,491,491,491,38,491,491,491,491,491,491,491,478,38,416,491,
  488,
492,492,492,492,492,492,492,43,492,492,492,492,492,492,492,492,492,492,492,
  492,492,492,492,492,43,417,492,492,43,
384,418,
43,493,43,419,493,493,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,420,163,1,494,
42,171,495,
43,157,496,
43,31,497,31,43,31,423,497,497,43,
43,498,43,424,498,498,43,
43,499,43,425,499,499,43,
43,500,43,426,500,500,43,
43,31,31,43,31,427,413,413,43,
43,31,31,43,31,428,412,412,43,
43,31,31,43,31,429,411,411,43,
1,1,1,1,1,1,1,1,1,1,424,425,1,1,426,1,1,430,423,1,414,410,429,428,427,
501,501,501,431,445,
502,502,502,432,503,
43,504,43,433,504,504,43,
43,31,43,31,434,397,397,43,
1,1,1,1,1,1,1,1,1,1,1,1,433,1,1,435,423,1,398,434,396,
283,283,283,282,
351,351,351,437,505,
256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,
  256,256,438,343,
506,506,506,43,506,506,506,506,506,506,43,439,506,506,43,
507,507,507,507,507,507,507,43,507,507,507,507,507,507,507,507,43,440,507,
  507,43,
508,508,508,508,508,508,508,43,508,508,508,508,508,508,508,508,508,508,508,
  508,508,43,441,508,508,43,
509,509,509,43,509,509,509,509,509,509,43,442,509,509,43,
510,43,510,510,43,443,510,510,43,
511,511,511,511,511,511,511,43,511,511,511,511,511,511,511,511,511,43,444,
  511,511,43,
512,512,512,512,512,512,512,43,512,512,512,512,512,512,512,512,512,512,512,
  43,445,512,512,43,
354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,354,
  354,354,354,356,354,
1,1,1,1,1,1,1,528,527,1,1,1,1,1,1,1,447,529,1,513,
514,514,514,514,514,515,448,514,514,514,514,515,
516,516,516,516,516,571,516,516,
517,517,517,517,517,517,517,327,517,517,517,517,517,517,517,327,40,327,327,
  450,518,517,
43,519,43,451,519,519,43,
43,520,43,452,520,520,43,
43,31,43,31,453,661,661,43,
43,31,43,31,454,660,660,43,
43,31,43,31,455,659,659,43,
1,1,1,1,1,1,1,450,451,452,1,1,1,1,1,1,1,456,423,1,662,662,658,455,454,453,
43,31,521,31,43,31,457,521,521,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,458,457,1,133,
43,643,459,282,283,647,
1,1,1,1,1,1,1,461,1,1,1,1,1,1,1,460,457,1,133,461,
43,522,43,461,522,522,43,
43,43,462,523,43,
1,1,1,1,1,1,1,524,1,1,1,1,1,1,1,463,457,1,609,525,
526,526,526,526,526,526,526,43,526,526,526,526,526,526,526,526,43,464,526,
  526,43,
527,527,527,527,527,527,527,527,527,527,527,43,527,527,527,527,527,527,527,
  527,527,527,527,43,465,527,527,43,
43,96,528,
43,529,43,467,529,529,43,
1,1,1,1,1,1,1,467,1,1,1,1,1,1,1,468,457,1,637,
530,530,530,530,530,530,530,43,530,530,530,530,530,530,530,530,43,469,530,
  530,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,470,299,1,540,
43,48,43,512,531,43,513,
532,472,
533,533,533,473,533,534,
43,535,43,474,535,535,43,
31,31,31,31,31,31,31,43,31,31,31,31,31,31,31,31,31,536,43,475,536,536,43,
43,537,537,43,476,537,537,43,
43,538,43,477,538,538,43,
539,539,539,539,539,539,539,218,539,539,539,539,539,539,539,539,218,478,218,
  218,539,
541,541,541,541,541,541,541,541,541,541,541,541,541,541,540,479,541,
43,542,43,480,542,542,43,
43,543,43,481,543,543,43,
43,544,43,482,544,544,43,
43,545,43,483,545,545,43,
43,546,43,484,546,546,43,
307,307,307,307,307,307,307,305,306,309,95,93,303,312,304,307,307,307,301,
  308,310,311,307,307,307,307,485,307,549,550,553,555,560,302,547,548,551,
  552,554,556,557,558,559,
43,548,43,486,548,548,43,
43,549,549,43,487,549,549,43,
550,488,531,
550,489,530,
43,31,43,490,498,498,43,551,
51,51,51,51,51,51,51,218,51,51,51,51,51,51,51,552,218,491,218,218,552,
321,321,321,321,321,321,321,318,319,316,321,321,321,301,317,308,310,320,311,
  321,321,321,321,492,321,553,478,479,480,481,482,483,484,485,486,487,302,
383,493,
43,554,43,494,554,554,43,
555,43,555,555,43,495,555,555,43,
556,556,556,556,556,556,556,43,556,556,556,556,556,556,556,556,556,556,556,
  556,556,556,556,43,496,556,556,43,
40,183,557,
40,498,558,
40,499,559,
40,500,560,
561,561,561,501,
465,465,465,502,
42,503,562,
40,504,563,
564,505,
73,73,73,73,73,73,73,73,74,506,333,274,273,
1,1,1,1,1,1,1,1,1,1,1,1,1,203,1,507,204,1,332,
1,1,1,1,1,1,1,1,1,1,1,1,1,81,80,79,78,77,76,1,508,82,1,323,
73,73,73,73,73,73,73,73,74,509,322,274,273,
565,565,565,510,321,
1,1,1,1,1,1,1,1,1,1,1,1,319,318,1,1,511,320,1,316,317,
1,1,1,1,1,1,1,1,1,1,1,1,1,168,167,166,165,1,512,169,1,315,
509,676,509,509,509,513,676,
681,681,681,681,681,683,681,681,681,
684,515,
566,566,566,566,566,572,566,566,
1,1,1,1,1,1,1,329,1,1,1,1,1,1,1,329,329,329,517,667,1,667,
666,665,328,
40,519,567,
40,520,568,
40,134,469,135,
40,522,569,
345,345,345,523,437,346,
43,570,43,524,570,570,43,
43,31,43,31,525,608,608,43,
1,1,1,1,1,1,1,524,1,1,1,1,1,1,1,526,457,1,611,610,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,572,
  574,576,111,527,571,111,577,575,573,100,
578,578,578,578,578,578,578,578,578,578,578,43,578,578,578,578,578,578,578,
  578,578,578,578,43,528,578,578,43,
40,529,579,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,137,530,581,1,580,
48,514,515,
582,532,
86,86,86,523,
49,534,583,
48,535,584,563,
585,585,585,585,585,585,585,585,585,585,585,585,585,585,585,585,48,536,585,
  585,
594,593,537,
586,538,585,
588,588,588,588,588,588,588,588,588,588,588,588,588,588,587,539,588,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,219,220,589,220,220,220,220,220,220,220,220,220,
  220,220,540,220,220,220,589,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,533,
137,542,506,505,
590,543,579,
137,544,504,503,
137,545,490,489,
137,546,562,561,
43,31,43,31,547,547,547,43,
48,548,591,
508,507,549,
592,592,592,592,592,550,593,592,
594,551,
595,552,
43,31,43,31,553,477,477,43,
45,554,596,
254,254,254,555,254,597,
1,1,1,1,1,1,1,1,1,1,1,1,1,601,603,604,599,598,600,605,606,1,556,423,1,159,
  173,174,175,176,177,178,179,180,181,181,189,602,198,
607,607,607,607,607,607,607,43,607,607,607,607,607,607,607,607,607,43,557,
  607,607,43,
608,43,608,608,608,43,558,608,608,43,
43,609,609,43,559,609,609,43,
43,610,610,43,560,610,610,43,
611,611,611,460,
612,612,612,562,613,
614,614,614,614,614,614,614,43,614,614,614,614,614,614,614,43,563,614,614,
  43,
351,351,351,564,280,
615,615,615,191,
616,616,616,616,616,573,616,616,
617,617,617,617,617,617,617,43,617,617,617,617,617,617,617,43,567,617,617,
  43,
618,618,618,618,618,618,618,43,618,618,618,618,618,618,618,43,568,618,618,
  43,
43,619,619,43,569,619,619,43,
40,570,620,
43,621,43,571,621,621,43,
43,622,43,572,622,622,43,
43,31,43,31,573,99,99,43,
43,623,43,574,623,623,43,
43,31,43,31,575,98,98,43,
43,624,43,576,624,624,43,
43,31,43,31,577,97,97,43,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,572,
  574,576,111,578,571,111,627,626,625,104,
628,628,628,628,628,628,628,43,628,628,628,628,628,628,628,628,628,43,579,
  628,628,43,
43,31,31,43,31,580,137,137,43,
43,31,31,43,31,581,136,136,43,
518,582,
1,1,1,1,1,1,1,519,1,1,1,1,1,1,1,583,520,1,516,
84,84,84,84,84,84,84,84,84,84,237,234,230,229,84,584,629,629,377,85,84,374,
  375,376,2,4,3,
1,1,1,1,1,1,1,528,527,1,1,1,1,1,1,1,585,529,1,630,
631,631,631,631,631,631,631,631,631,631,586,631,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,219,220,632,220,220,220,220,220,220,220,220,220,
  220,220,587,220,220,220,632,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,535,
534,589,
634,634,43,634,634,634,633,43,590,633,633,43,634,635,634,
1,1,1,1,1,1,1,528,527,1,1,1,1,1,1,1,591,529,1,636,525,
74,74,74,74,74,75,
532,593,
638,638,638,638,638,638,638,637,638,638,638,638,638,638,638,638,638,638,637,
  594,637,638,
639,639,639,639,639,639,639,218,639,639,639,639,639,639,639,639,218,595,218,
  218,639,
640,640,640,640,640,640,640,43,640,640,640,640,640,640,640,640,640,640,640,
  43,596,640,640,43,
43,31,31,43,31,597,172,172,43,
43,31,31,31,43,31,598,195,195,43,
43,641,43,599,641,641,43,
43,642,43,600,642,642,43,
43,643,43,601,643,643,43,
196,40,196,196,602,644,194,
43,645,43,603,645,645,43,
43,646,43,604,646,646,43,
43,31,31,43,31,605,188,188,43,
43,31,31,43,31,606,187,187,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,74,1,137,607,649,1,648,647,
102,102,102,48,608,650,102,428,429,
426,425,609,424,
651,652,610,415,
462,462,462,461,
466,466,466,612,
43,43,613,653,43,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,614,394,1,
193,193,193,192,
654,654,654,654,654,574,654,654,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,617,664,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,618,663,1,
651,650,619,648,
655,43,655,655,43,620,655,655,43,
40,621,656,129,
40,622,657,
40,623,658,
40,624,659,
43,31,43,31,625,103,103,43,
43,31,43,31,626,102,102,43,
43,31,43,31,627,101,101,43,
1,1,1,1,1,1,1,639,638,1,1,1,1,1,1,1,628,640,1,
564,629,
509,567,509,509,509,630,567,
587,587,587,587,660,660,587,587,587,587,587,660,587,631,660,660,
536,632,
581,633,
661,661,661,661,661,634,661,661,
580,635,
43,524,662,43,636,662,662,43,
38,38,492,
1,1,1,1,1,1,1,1,1,1,1,1,1,230,229,1,493,638,497,1,663,2,664,663,664,
666,666,666,666,666,666,666,666,666,666,666,666,666,666,665,639,666,
1,1,1,1,1,1,1,1,1,1,1,1,1,168,167,166,165,1,640,169,1,160,164,
40,641,667,
40,642,668,
40,643,669,
670,43,670,670,43,644,670,670,43,
40,645,671,
40,646,672,
43,31,31,43,31,647,186,186,43,
43,31,31,43,31,648,185,185,43,
43,31,31,43,31,649,184,184,43,
43,673,673,673,673,673,673,673,43,650,673,673,43,
416,674,416,416,416,416,651,419,
416,674,416,416,416,416,652,418,
469,468,467,653,463,
675,675,675,675,675,575,675,675,
102,102,102,655,102,612,
676,676,676,676,676,676,676,676,676,676,676,43,676,676,676,676,676,676,676,
  676,676,43,656,676,676,43,
677,677,677,677,677,677,677,677,677,677,677,43,677,677,677,677,677,677,677,
  677,677,43,657,677,677,43,
678,678,678,678,678,678,678,678,678,678,678,43,678,678,678,678,678,678,678,
  678,678,43,658,678,678,43,
679,679,679,679,679,679,679,679,679,679,679,43,679,679,679,679,679,679,679,
  679,679,43,659,679,679,43,
590,660,
680,680,680,680,680,661,680,680,
35,662,681,
682,495,682,
637,683,637,664,637,683,
220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,
  220,220,220,220,220,220,219,220,684,220,220,220,220,220,220,220,220,220,
  220,220,665,220,220,220,684,
51,51,51,51,51,51,51,51,51,51,51,51,51,51,537,
685,685,685,43,685,685,685,685,685,685,43,667,685,685,43,
686,43,686,686,43,668,686,686,43,
687,687,687,687,687,687,687,43,687,687,687,687,687,687,687,687,43,669,687,
  687,43,
254,254,254,670,254,197,
688,688,688,688,688,688,688,43,688,688,688,688,688,688,688,43,671,688,688,
  43,
689,689,43,689,689,689,689,43,672,689,689,43,
444,443,442,441,440,439,438,673,690,107,
691,420,691,691,420,420,420,420,674,417,
692,692,692,692,692,576,692,692,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
  137,676,694,111,693,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
  137,677,127,111,128,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
  137,678,125,111,126,
111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
  137,679,123,111,124,
695,695,695,695,695,680,695,695,
696,696,696,696,696,696,696,43,696,696,696,696,696,696,696,696,696,43,681,
  696,696,43,
230,229,682,501,2,
494,683,
538,684,
73,73,73,73,73,73,73,73,74,685,697,274,273,
565,565,565,686,698,
1,1,1,1,1,1,1,1,1,1,1,1,1,203,1,687,204,1,699,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,688,700,1,
178,178,178,178,178,180,689,701,205,182,181,179,
43,702,43,690,702,702,43,
703,703,703,421,
578,578,578,578,578,577,578,578,
43,31,43,31,693,131,131,43,
43,31,43,31,694,130,130,43,
704,704,704,704,704,695,704,704,
1,1,1,1,1,1,1,528,527,1,1,1,1,1,1,1,696,529,1,526,
43,31,31,43,31,697,199,199,43,
43,31,31,43,31,698,190,190,43,
43,31,31,43,31,699,202,202,43,
43,31,31,43,31,700,201,201,43,
43,31,31,43,31,701,200,200,43,
430,702,
423,423,423,422,
705,705,705,705,705,704,705,705,
706,706,706,706,706,705,706,706,
707,707,707,707,707,706,707,707,
708,708,708,708,708,707,708,708,
709,709,709,709,709,708,709,709,
710,710,710,710,710,709,710,710,
711,711,711,711,711,710,711,711,
712,712,712,712,712,711,712,712,
713,713,713,713,713,712,713,713,
714,714,714,714,714,713,714,714,
715,715,715,715,715,714,715,715,
716,716,716,716,716,715,716,716,
717,717,717,717,717,716,717,717,
718,718,718,718,718,717,718,718,
719,719,719,719,719,718,719,719,
720,720,720,720,720,719,720,720,
721,721,721,721,721,720,721,721,
722,722,722,722,722,721,722,722,
723,723,723,723,723,722,723,723,
724,724,724,724,724,723,724,724,
725,725,725,725,725,724,725,725,
726,726,726,726,726,725,726,726,
727,727,727,727,727,726,727,727,
728,728,728,728,728,727,728,728,
729,729,729,729,729,728,729,729,
730,730,730,730,730,729,730,730,
582,582,582,582,582,730,582,582,
};
static const unsigned short ag_sbt[] = {
     0,  82,  97, 105, 115, 125, 133, 137, 139, 141, 143, 145, 148, 150,
   152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191,
   194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 235, 265, 277, 289,
   304, 319, 322, 325, 344, 371, 379, 454, 470, 484, 517, 525, 533, 550,
   582, 607, 627, 649, 657, 665, 691, 712, 733, 758, 781, 788, 820, 861,
   878, 895, 932, 940, 953, 964, 967, 981,1005,1008,1011,1047,1050,1061,
  1072,1084,1087,1130,1134,1138,1141,1143,1150,1157,1164,1171,1178,1186,
  1188,1216,1219,1227,1229,1233,1241,1243,1251,1253,1260,1269,1278,1280,
  1300,1303,1305,1313,1315,1323,1326,1328,1331,1333,1337,1344,1346,1351,
  1358,1360,1368,1371,1373,1378,1383,1385,1390,1395,1397,1419,1463,1478,
  1486,1507,1510,1519,1522,1524,1531,1536,1539,1541,1545,1552,1554,1561,
  1563,1566,1575,1584,1591,1594,1598,1607,1610,1612,1616,1621,1626,1633,
  1635,1642,1644,1648,1656,1658,1662,1667,1674,1676,1688,1694,1707,1723,
  1725,1727,1729,1735,1761,1775,1818,1854,1879,1881,1914,1952,1957,1961,
  2003,2006,2009,2012,2015,2018,2021,2051,2055,2061,2066,2069,2077,2085,
  2117,2122,2142,2148,2174,2193,2237,2256,2294,2298,2338,2379,2381,2403,
  2429,2450,2454,2476,2479,2493,2514,2541,2562,2572,2582,2603,2613,2623,
  2633,2643,2666,2669,2673,2699,2713,2719,2740,2743,2747,2771,2777,2784,
  2787,2803,2809,2813,2834,2868,2872,2879,2886,2912,2919,2926,2933,2940,
  2947,2990,3012,3014,3039,3069,3112,3119,3157,3180,3187,3194,3201,3212,
  3223,3246,3249,3269,3272,3276,3297,3305,3314,3356,3364,3368,3372,3380,
  3401,3409,3413,3431,3436,3460,3467,3470,3477,3483,3490,3497,3504,3511,
  3530,3537,3544,3551,3558,3565,3573,3576,3579,3586,3593,3600,3607,3614,
  3633,3641,3644,3651,3677,3680,3703,3723,3733,3738,3759,3784,3793,3801,
  3809,3817,3825,3833,3841,3866,3889,3892,3928,3933,3937,3940,3961,3982,
  3985,3991,3995,3997,4020,4047,4050,4053,4079,4083,4086,4089,4092,4095,
  4098,4134,4162,4202,4222,4225,4230,4234,4243,4256,4282,4305,4323,4343,
  4351,4372,4392,4398,4404,4446,4467,4470,4473,4479,4498,4519,4527,4535,
  4559,4567,4571,4591,4594,4613,4616,4623,4626,4629,4632,4635,4639,4660,
  4663,4666,4669,4672,4675,4707,4710,4713,4716,4719,4723,4743,4772,4774,
  4781,4799,4802,4805,4815,4822,4829,4836,4845,4854,4863,4888,4893,4898,
  4905,4913,4934,4938,4943,4966,4981,5002,5028,5043,5052,5074,5098,5122,
  5142,5154,5162,5184,5191,5198,5206,5214,5222,5248,5258,5276,5282,5302,
  5309,5314,5334,5355,5383,5386,5393,5412,5433,5451,5458,5460,5466,5473,
  5496,5504,5511,5532,5549,5556,5563,5570,5577,5584,5627,5634,5642,5645,
  5648,5656,5677,5714,5716,5723,5732,5760,5763,5766,5769,5772,5776,5780,
  5783,5786,5788,5801,5820,5844,5857,5862,5883,5905,5912,5921,5923,5931,
  5953,5956,5959,5962,5966,5969,5975,5982,5990,6010,6039,6067,6070,6089,
  6092,6094,6098,6101,6105,6125,6128,6131,6148,6192,6207,6211,6214,6218,
  6222,6226,6234,6237,6240,6248,6250,6252,6260,6263,6269,6308,6330,6340,
  6348,6356,6360,6365,6385,6390,6394,6402,6422,6442,6450,6453,6460,6467,
  6475,6482,6490,6497,6505,6534,6556,6565,6574,6576,6595,6622,6642,6654,
  6698,6713,6715,6730,6751,6757,6759,6781,6802,6826,6835,6845,6852,6859,
  6866,6873,6880,6887,6896,6905,6926,6935,6939,6943,6947,6951,6956,6973,
  6977,6985,7002,7019,7023,7032,7036,7039,7042,7045,7053,7061,7069,7088,
  7090,7097,7113,7115,7117,7125,7127,7135,7138,7163,7180,7203,7206,7209,
  7212,7221,7224,7227,7236,7245,7254,7267,7275,7283,7288,7296,7302,7328,
  7354,7380,7406,7408,7416,7419,7422,7428,7472,7487,7502,7511,7532,7538,
  7558,7570,7580,7590,7598,7622,7646,7670,7694,7702,7724,7729,7731,7733,
  7746,7751,7770,7787,7799,7806,7810,7818,7826,7834,7842,7862,7871,7880,
  7889,7898,7907,7909,7913,7921,7929,7937,7945,7953,7961,7969,7977,7985,
  7993,8001,8009,8017,8025,8033,8041,8049,8057,8065,8073,8081,8089,8097,
  8105,8113,8121,8129
};
static const unsigned short ag_sbe[] = {
    62,  96,  99, 108, 118, 128, 134, 138, 140, 142, 144, 146, 149, 151,
   153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192,
   195, 198, 201, 204, 207, 210, 213, 216, 219, 230, 259, 273, 285, 300,
   315, 321, 323, 343, 359, 375, 450, 465, 475, 511, 520, 528, 543, 576,
   601, 621, 642, 652, 660, 685, 706, 727, 749, 773, 784, 815, 841, 871,
   888, 915, 935, 951, 959, 965, 976,1004,1006,1009,1043,1048,1057,1068,
  1083,1085,1126,1131,1137,1139,1142,1146,1153,1160,1167,1174,1182,1187,
  1215,1217,1223,1228,1232,1237,1242,1247,1252,1256,1265,1274,1279,1299,
  1301,1304,1309,1314,1319,1324,1327,1329,1332,1336,1340,1345,1348,1354,
  1359,1364,1369,1372,1375,1380,1384,1387,1392,1396,1415,1458,1477,1482,
  1503,1508,1515,1520,1523,1527,1533,1537,1540,1544,1548,1553,1557,1562,
  1564,1569,1578,1586,1592,1595,1603,1608,1611,1615,1618,1623,1629,1634,
  1638,1643,1645,1652,1657,1661,1664,1670,1675,1687,1693,1703,1719,1724,
  1726,1728,1732,1755,1770,1805,1850,1875,1880,1910,1950,1954,1960,1998,
  2004,2007,2010,2013,2016,2019,2048,2052,2057,2062,2067,2072,2080,2113,
  2118,2138,2145,2170,2188,2219,2251,2279,2296,2337,2376,2380,2399,2418,
  2446,2451,2472,2477,2488,2510,2538,2556,2568,2578,2597,2609,2619,2629,
  2639,2662,2667,2670,2695,2711,2716,2736,2741,2744,2767,2776,2782,2785,
  2799,2806,2812,2832,2864,2869,2875,2882,2909,2915,2922,2929,2936,2943,
  2977,3011,3013,3035,3066,3108,3115,3155,3176,3183,3190,3197,3208,3219,
  3242,3247,3265,3270,3273,3293,3301,3310,3353,3360,3365,3369,3376,3397,
  3405,3410,3427,3433,3456,3463,3468,3473,3479,3486,3493,3500,3507,3528,
  3533,3540,3547,3554,3561,3569,3574,3577,3582,3589,3596,3603,3610,3631,
  3637,3642,3647,3666,3678,3696,3719,3729,3736,3753,3783,3789,3797,3805,
  3813,3821,3829,3837,3858,3885,3890,3912,3930,3936,3938,3955,3978,3983,
  3990,3994,3996,4018,4043,4048,4051,4075,4082,4084,4087,4090,4093,4096,
  4129,4161,4200,4219,4223,4226,4231,4239,4248,4273,4301,4319,4339,4347,
  4368,4387,4394,4401,4443,4463,4468,4471,4475,4494,4515,4523,4531,4555,
  4563,4568,4587,4592,4609,4614,4621,4624,4627,4630,4633,4638,4656,4661,
  4664,4667,4670,4673,4703,4708,4711,4714,4717,4720,4740,4768,4773,4777,
  4795,4800,4803,4811,4818,4825,4832,4841,4850,4859,4880,4891,4896,4901,
  4909,4928,4937,4941,4964,4977,4998,5024,5039,5048,5070,5094,5120,5138,
  5148,5159,5181,5187,5194,5202,5210,5218,5239,5254,5272,5278,5297,5305,
  5311,5329,5351,5379,5384,5389,5408,5429,5447,5454,5459,5463,5469,5492,
  5500,5507,5528,5547,5552,5559,5566,5573,5580,5610,5630,5638,5643,5646,
  5651,5673,5700,5715,5719,5728,5756,5761,5764,5767,5770,5775,5779,5781,
  5784,5787,5797,5816,5840,5853,5860,5878,5901,5910,5917,5922,5928,5949,
  5955,5957,5960,5963,5967,5972,5978,5986,6005,6032,6063,6068,6085,6090,
  6093,6097,6099,6102,6122,6127,6129,6146,6187,6206,6208,6212,6215,6219,
  6223,6230,6235,6239,6245,6249,6251,6256,6261,6266,6291,6326,6336,6344,
  6352,6359,6363,6381,6388,6393,6399,6418,6438,6446,6451,6456,6463,6471,
  6478,6486,6493,6501,6527,6552,6561,6570,6575,6591,6610,6638,6652,6693,
  6712,6714,6723,6746,6756,6758,6778,6798,6822,6831,6841,6848,6855,6862,
  6870,6876,6883,6892,6901,6921,6930,6937,6941,6946,6950,6953,6970,6976,
  6982,6999,7016,7021,7028,7033,7037,7040,7043,7049,7057,7065,7085,7089,
  7095,7110,7114,7116,7122,7126,7131,7137,7155,7178,7198,7204,7207,7210,
  7217,7222,7225,7232,7241,7250,7263,7273,7281,7286,7293,7299,7324,7350,
  7376,7402,7407,7413,7417,7420,7425,7467,7486,7498,7507,7528,7535,7554,
  7566,7577,7588,7595,7618,7642,7666,7690,7699,7720,7726,7730,7732,7742,
  7749,7766,7784,7793,7802,7809,7815,7822,7830,7839,7858,7867,7876,7885,
  7894,7903,7908,7912,7918,7926,7934,7942,7950,7958,7966,7974,7982,7990,
  7998,8006,8014,8022,8030,8038,8046,8054,8062,8070,8078,8086,8094,8102,
  8110,8118,8126,8129
};
static const unsigned char ag_fl[] = {
  1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,4,2,2,2,2,0,1,2,1,
  1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,2,0,1,2,1,1,2,0,1,
  3,1,2,1,2,1,1,1,1,1,1,1,1,2,3,1,2,1,2,1,2,1,3,1,5,0,1,4,4,4,3,5,5,5,4,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,3,4,4,3,4,2,3,4,4,1,2,
  5,3,1,1,1,1,2,0,1,1,3,1,2,5,1,1,4,4,0,4,9,1,1,1,1,1,1,1,1,1,1,2,6,1,1,
  1,1,1,1,1,1,1,1,2,6,6,6,2,2,1,6,1,2,3,2,2,0,3,1,6,6,6,6,1,1,1,1,2,3,1,
  1,1,1,1,4,1,2,1,1,1,2,1,1,2,1,1,1,1,2,1,1,3,2,1,1,3,2,1,3,3,1,1,1,1,4,
  4,4,4,3,4,4,3,4,4,3,1,1,3,1,1,2,1,1,1,1,2,0,1,1,2,1,1,3,1,1,1,1,2,2,3,
  5,1,2,3,1,3,1,0,1,3,2,2,1,2,0,1,2,1,2,3,4,0,1,3,4,1,1,1,1,1,1,1,1,1,1,
  5,5,5,1,1,1,5,5,5,3,3,3,0,1,0,1,3,5,5,1,1,2,1,1,2,0,1,2,3,0,1,2,3,3,1,
  2,1,1,1,2,0,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,2,6,5,
  2,1,1,1,2,0,1,3,2,5,3,4,2,1,1,1,1,1,1,4,2,3,1,2,3,4,2,2,2,1,5,0,2,2,2,
  0,1,2,3,5,1,1,2,5,1,5,1,1,1,2,3,1,7,1,1,1,1,1,1,1,5,1,2,1,1,1,1,1,1,1,
  1,1,1,1,1,2,3,4,7,2,2,2,1,1,1,4,5,1,1,3,3,2,5,1,1,1,1,1,1,1,1,1,1,3,5,
  1,0,1,7,9,1,1,1,1,1,1,3,1,5,1,5,1,5,5,0,1,3,3,4,4,5,5,2,4,1,1,1,1,1,7,
  1,5,1,1,1,4,4,3,4,6,5,7,5,7,1,4,3,1,1,3,3,2,5,1,1,1,1,1,1,1,1,1,1,1,1,
  1,5,1,5,3,0,1,7,5,1,5,1,2,3,4,5,6,7,8,5,3,3,32,1,1,5,1,2,0,1,4,1,1,5,5,
  1,1,4,2,3,1,0,1,4,3,4,3,2,4,3,4,4,5,2,1,1,2,5,1,2,5,0,1,1,1,1,3,2,1,1,
  1,1,1,1,2,3,3,4,7,7,7,1,2,0,1,5,3,6,7,1,1,1,1,3,1,3,2,3,4,2,2,2,1,5,5,
  3,3,3,1,1,5,1,1,1,1,1,7,5,5,1,1,2,0,1,3
};
static const unsigned short ag_ptt[] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 60, 60,  3, 61, 63,
   65, 67, 67, 59, 68, 70, 72, 73, 75, 77, 79, 81, 83, 85, 89, 89, 87, 92,
   92, 90, 95, 95, 93, 99,100,100,101,101, 96,104,105,105,106,106,102,103,
  103,112,112,110,113,113,113,113,113,113,113,  4,120,123,123,121, 17,124,
   15,125,125, 39,126,129,129,130,130,130,130,130,130,130,130,127,127,127,
  127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,131,131,132,
  132,133,133,134,154,154,155,155,156,156,157,157,159,159, 50, 50,158,160,
  165,166,166,167,167,161,163, 27,168,168, 19,169,169,170,173,173,171,175,
  175,176,177,179,179,179,179,179,184,172,172,174,174,174,174,174,174,174,
  174,174,194,195,195,195,195,186,187,188,199,201,201,201,192,202,203,203,
  189,205,190,191,193,211,211,208,216,216,214,215,215,215,220, 53,222,226,
  226,223,227,230,230,224,233,233,231, 56, 54, 55,234,237,237,235,235,242,
  241,236,236,245,238,238,251,251,251,251,252,252,253,253,253,254,254,254,
  255,247,247,256,257,257,260,264,264,262,261,267,268,268,269,269,265,250,
  270,258,258,185,185,272,275,275,272,196,278,279,279,279,213,213,281,284,
  284,281,281,286,287,287,288,288,282,285,285,285,285,248,248,289,289,290,
  290,290,290,290,290,290,290,290,290,291,292,292,303,303,304,293,294,295,
  296,296,296,312,312,313,313,296,297,298,299,300,300,319,320,320,321,321,
  316,317,249,249,322,322,323,328,328,325,330,331,331,332,332,326, 51,333,
  334,334,334,334,334,334,334,334,334,334,334,334,334,334,221,221,221,221,
    7,348,348,348,348,349,349,228,228,353,354,354,355,355,352,352,356,350,
  350,358,358, 13,359,359,360,361,361,363,363,363,363,364,364,365,365,365,
  365,366,373,373,370,370,372,372,372,372,367,376,376,  9,368,381,381,379,
  379,382, 11,384,384,383,387,387,387,387,387,387,387,385,395,395,396,396,
  396,396,396,396,396,396,396,396,396,396,397,397,397,386,410,411,412,413,
  413,413, 57, 57, 23,417,418,418,419,419,421,421,421,421,421,421,421,421,
  421,421,421,422,434,438,438,423,423,439,439,441,437,436,440,440,442,424,
  445,425,447,429,429,452,452,430,450,450,450,450,451,451,455,457,457,454,
  458,456,431,466,466,467,467,467,426,427,471,428,428,428,428,432,432,420,
  420,473, 25,474,475,475,476,476,477,477,477,477,477,477,477,477,477,477,
  477,477,477,478,487,485,489,490,490,484,480,492,481,494,494,494,494,494,
  494,494,494,479,497,497,498,500,495,482,504,504,506,506,502,505,505,483,
  483, 21,512,512,513,513, 41,516,516,514,514,514,514,515,517,517,517,517,
  518, 31,520,521, 29,522,523,524,524,525, 35, 33, 33, 37,526,526,527,527,
  527,527,527,527,528,528,528,528,534,534,534, 43,538,540,540,538,538,538,
  539,541,542,542, 45,546, 47,547,547,548,548,549,549,549,549,550,551,552,
  552,552, 49,556,556,557,557,557,557,557,560,558,559,564,565,565,566,566,
  563
};
static const unsigned short  *ag_valid(PCB_DECL, int ag_k) {
  const unsigned short  *ag_tp = &ag_tstt[ag_sbt[(PCB).sn+1]];
  while (*--ag_tp != (const unsigned short) ag_k) if (*ag_tp == 0) return NULL;
  return ag_tp;
}
int SipParser_change_reduction(PCB_DECL, SipParser_token_type ag_k) {
  if (!ag_valid(PCB_POINTER, ag_k)) return 0;
  (PCB).reduction_token = ag_k;
  return 1;
}
static void ag_default(PCB_DECL, const  int *ag_tp) {
  (PCB).ag_dsn = (PCB).sn;
  (PCB).ag_dtl = ag_tp;
  while (!ag_valid(PCB_POINTER, (SipParser_token_type) *ag_tp)) ag_tp++;
  (PCB).reduction_token = (SipParser_token_type) *ag_tp;
}
static void ag_ra(PCB_DECL)
{
  switch(ag_rpx[(PCB).ag_ap]) {
    case 1: ag_rp_1(PCB_POINTER); break;
    case 2: ag_rp_2(PCB_POINTER); break;
    case 3: ag_rp_3(PCB_POINTER); break;
    case 4: ag_rp_4(PCB_POINTER); break;
    case 5: ag_rp_5(PCB_POINTER); break;
    case 6: ag_rp_6(PCB_POINTER); break;
    case 7: ag_rp_7(PCB_POINTER); break;
    case 8: ag_rp_8(PCB_POINTER); break;
    case 9: ag_rp_9(PCB_POINTER); break;
    case 10: ag_rp_10(PCB_POINTER); break;
    case 11: ag_rp_11(PCB_POINTER); break;
    case 12: ag_rp_12(PCB_POINTER); break;
    case 13: ag_rp_13(PCB_POINTER); break;
    case 14: ag_rp_14(PCB_POINTER); break;
    case 15: ag_rp_15(PCB_POINTER); break;
    case 16: V(0,ParserBasicToken) = ag_rp_16(PCB_POINTER); break;
    case 17: V(0,ParserBasicToken) = ag_rp_17(PCB_POINTER); break;
    case 18: V(0,ParserBasicToken) = ag_rp_18(PCB_POINTER); break;
    case 19: V(0,ParserBasicToken) = ag_rp_19(PCB_POINTER); break;
    case 20: V(0,ParserQuotedString) = ag_rp_20(PCB_POINTER); break;
    case 21: V(0,ParserBasicToken) = ag_rp_21(PCB_POINTER); break;
    case 22: V(0,ParserMethod) = ag_rp_22(PCB_POINTER); break;
    case 23: V(0,ParserMethod) = ag_rp_23(PCB_POINTER); break;
    case 24: V(0,ParserMethod) = ag_rp_24(PCB_POINTER); break;
    case 25: V(0,ParserMethod) = ag_rp_25(PCB_POINTER); break;
    case 26: V(0,ParserMethod) = ag_rp_26(PCB_POINTER); break;
    case 27: V(0,ParserMethod) = ag_rp_27(PCB_POINTER); break;
    case 28: V(0,ParserMethod) = ag_rp_28(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 29: ag_rp_29(PCB_POINTER, V(0,ParserCSeq)); break;
    case 30: V(0,ParserCSeq) = ag_rp_30(PCB_POINTER, V(0,ParserSequenceNumber), V(2,ParserMethod)); break;
    case 31: V(0,ParserSequenceNumber) = ag_rp_31(PCB_POINTER); break;
    case 32: ag_rp_32(PCB_POINTER, V(0,ParserContentLength)); break;
    case 33: V(0,ParserContentLength) = ag_rp_33(PCB_POINTER); break;
    case 34: ag_rp_34(PCB_POINTER, V(0,ParserCallId)); break;
    case 35: V(0,ParserCallId) = ag_rp_35(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 36: V(0,ParserCallId) = ag_rp_36(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 37: ag_rp_37(PCB_POINTER); break;
    case 38: ag_rp_38(PCB_POINTER, V(0,ParserMediaType), V(2,ParserMediaSubType)); break;
    case 39: ag_rp_39(PCB_POINTER); break;
    case 40: ag_rp_40(PCB_POINTER, V(2,ParserBoundary)); break;
    case 41: ag_rp_41(PCB_POINTER, V(2,ParserBase)); break;
    case 42: ag_rp_42(PCB_POINTER, V(2,ParserBase)); break;
    case 43: ag_rp_43(PCB_POINTER); break;
    case 44: ag_rp_44(PCB_POINTER, V(3,ParserBoundary)); break;
    case 45: ag_rp_45(PCB_POINTER, V(3,ParserBase)); break;
    case 46: ag_rp_46(PCB_POINTER, V(3,ParserBase)); break;
    case 47: V(0,ParserMediaType) = ag_rp_47(PCB_POINTER); break;
    case 48: V(0,ParserMediaType) = ag_rp_48(PCB_POINTER); break;
    case 49: V(0,ParserMediaType) = ag_rp_49(PCB_POINTER); break;
    case 50: V(0,ParserMediaType) = ag_rp_50(PCB_POINTER); break;
    case 51: V(0,ParserMediaType) = ag_rp_51(PCB_POINTER); break;
    case 52: V(0,ParserMediaType) = ag_rp_52(PCB_POINTER); break;
    case 53: V(0,ParserMediaType) = ag_rp_53(PCB_POINTER); break;
    case 54: V(0,ParserMediaType) = ag_rp_54(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 55: V(0,ParserMediaSubType) = ag_rp_55(PCB_POINTER); break;
    case 56: V(0,ParserMediaSubType) = ag_rp_56(PCB_POINTER); break;
    case 57: V(0,ParserMediaSubType) = ag_rp_57(PCB_POINTER); break;
    case 58: V(0,ParserMediaSubType) = ag_rp_58(PCB_POINTER); break;
    case 59: V(0,ParserMediaSubType) = ag_rp_59(PCB_POINTER); break;
    case 60: V(0,ParserMediaSubType) = ag_rp_60(PCB_POINTER); break;
    case 61: V(0,ParserMediaSubType) = ag_rp_61(PCB_POINTER); break;
    case 62: V(0,ParserMediaSubType) = ag_rp_62(PCB_POINTER); break;
    case 63: V(0,ParserMediaSubType) = ag_rp_63(PCB_POINTER); break;
    case 64: V(0,ParserMediaSubType) = ag_rp_64(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 65: V(0,ParserBoundary) = ag_rp_65(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 66: V(0,ParserBoundary) = ag_rp_66(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 67: V(0,ParserBase) = ag_rp_67(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 68: V(0,ParserBase) = ag_rp_68(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 69: V(0,ParserBase) = ag_rp_69(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 70: V(0,ParserBase) = ag_rp_70(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 71: ag_rp_71(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 72: V(0,ParserGenericParamDataVal) = ag_rp_72(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 73: V(0,ParserGenericParamDataVal) = ag_rp_73(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 74: ag_rp_74(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 75: ag_rp_75(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 76: V(0,ParserGenericParamDataVal) = ag_rp_76(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 77: V(0,ParserGenericParamDataVal) = ag_rp_77(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 78: ag_rp_78(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode), V(4,ParserReasonPhrase)); break;
    case 79: ag_rp_79(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode)); break;
    case 80: V(0,ParserSipVersion) = ag_rp_80(PCB_POINTER); break;
    case 81: V(0,ParserReasonPhrase) = ag_rp_81(PCB_POINTER); break;
    case 82: V(0,ParserStatusCode) = ag_rp_82(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 83: ag_rp_83(PCB_POINTER, V(0,ParserMethod)); break;
    case 84: ag_rp_84(PCB_POINTER, V(3,ParserMethod)); break;
    case 85: ag_rp_85(PCB_POINTER); break;
    case 86: ag_rp_86(PCB_POINTER); break;
    case 87: ag_rp_87(PCB_POINTER); break;
    case 88: ag_rp_88(PCB_POINTER); break;
    case 89: ag_rp_89(PCB_POINTER, V(3,ParserViaParam)); break;
    case 90: ag_rp_90(PCB_POINTER, V(0,ParserProtocolName), V(4,ParserProtocolVersion), V(8,ParserTransport)); break;
    case 91: V(0,ParserProtocolName) = ag_rp_91(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 92: V(0,ParserProtocolName) = ag_rp_92(PCB_POINTER); break;
    case 93: V(0,ParserProtocolVersion) = ag_rp_93(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 94: V(0,ParserTransport) = ag_rp_94(PCB_POINTER, V(0,ParserTransport)); break;
    case 95: V(0,ParserTransport) = ag_rp_95(PCB_POINTER); break;
    case 96: V(0,ParserTransport) = ag_rp_96(PCB_POINTER); break;
    case 97: V(0,ParserTransport) = ag_rp_97(PCB_POINTER); break;
    case 98: V(0,ParserTransport) = ag_rp_98(PCB_POINTER); break;
    case 99: V(0,ParserTransport) = ag_rp_99(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 100: V(0,ParserPort) = ag_rp_100(PCB_POINTER); break;
    case 101: ag_rp_101(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 102: ag_rp_102(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserPort)); break;
    case 103: V(0,ParserViaParam) = ag_rp_103(PCB_POINTER); break;
    case 104: V(0,ParserViaParam) = ag_rp_104(PCB_POINTER); break;
    case 105: V(0,ParserViaParam) = ag_rp_105(PCB_POINTER, V(0,ParserTTLParam)); break;
    case 106: V(0,ParserViaParam) = ag_rp_106(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 107: V(0,ParserViaParam) = ag_rp_107(PCB_POINTER, V(0,ParserReceived)); break;
    case 108: V(0,ParserViaParam) = ag_rp_108(PCB_POINTER, V(0,ParserBranch)); break;
    case 109: V(0,ParserViaParam) = ag_rp_109(PCB_POINTER, V(0,ParserPort)); break;
    case 110: V(0,ParserViaParam) = ag_rp_110(PCB_POINTER, V(0,ParserCompParam)); break;
    case 111: V(0,ParserViaParam) = ag_rp_111(PCB_POINTER); break;
    case 112: ag_rp_112(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 113: ag_rp_113(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 114: ag_rp_114(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserQuotedString)); break;
    case 115: ag_rp_115(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 116: V(0,ParserTTLParam) = ag_rp_116(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 117: V(0,ParserTtlParam) = ag_rp_117(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 118: V(0,ParserBasicToken) = ag_rp_118(PCB_POINTER); break;
    case 119: V(0,ParserBasicToken) = ag_rp_119(PCB_POINTER); break;
    case 120: V(0,ParserBasicToken) = ag_rp_120(PCB_POINTER); break;
    case 121: V(0,ParserPort) = ag_rp_121(PCB_POINTER, V(1,ParserPort)); break;
    case 122: V(0,ParserPort) = ag_rp_122(PCB_POINTER); break;
    case 123: V(0,ParserPort) = ag_rp_123(PCB_POINTER, V(2,ParserPort)); break;
    case 124: V(0,ParserMaddrParam) = ag_rp_124(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 125: V(0,ParserMaddrParam) = ag_rp_125(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 126: V(0,ParserReceived) = ag_rp_126(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 127: V(0,ParserBranch) = ag_rp_127(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 128: V(0,ParserCompParam) = ag_rp_128(PCB_POINTER, V(4,ParserCompParam)); break;
    case 129: V(0,ParserCompParam) = ag_rp_129(PCB_POINTER); break;
    case 130: V(0,ParserCompParam) = ag_rp_130(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 131: V(0,ParserBasicToken) = ag_rp_131(PCB_POINTER); break;
    case 132: V(0,ParserBasicToken) = ag_rp_132(PCB_POINTER); break;
    case 133: ag_default(PCB_POINTER, &ag_rtt[0]); ag_rp_133(PCB_POINTER); break;
    case 134: ag_default(PCB_POINTER, &ag_rtt[3]); ag_rp_134(PCB_POINTER); break;
    case 135: ag_default(PCB_POINTER, &ag_rtt[6]); ag_rp_135(PCB_POINTER); break;
    case 136: ag_rp_136(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 137: V(0,ParserAbsoluteUri) = ag_rp_137(PCB_POINTER, V(0,ParserBasicToken), V(3,ParserBasicToken)); break;
    case 138: V(0,ParserBasicToken) = ag_rp_138(PCB_POINTER); break;
    case 139: V(0,ParserDisplayName) = ag_rp_139(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 140: V(0,ParserBasicToken) = ag_rp_140(PCB_POINTER); break;
    case 141: V(0,ParserBasicToken) = ag_rp_141(PCB_POINTER); break;
    case 142: ag_rp_142(PCB_POINTER); break;
    case 143: ag_rp_143(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 144: ag_rp_144(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 145: ag_rp_145(PCB_POINTER); break;
    case 146: ag_rp_146(PCB_POINTER); break;
    case 147: V(0,ParserAbsoluteUri) = ag_rp_147(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 148: V(0,ParserAbsoluteUri) = ag_rp_148(PCB_POINTER); break;
    case 149: ag_rp_149(PCB_POINTER); break;
    case 150: ag_rp_150(PCB_POINTER); break;
    case 151: V(0,ParserAbsoluteUri) = ag_rp_151(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 152: V(0,ParserAbsoluteUri) = ag_rp_152(PCB_POINTER); break;
    case 153: ag_rp_153(PCB_POINTER); break;
    case 154: ag_rp_154(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 155: ag_rp_155(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 156: ag_rp_156(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 157: ag_rp_157(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 158: ag_rp_158(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 159: ag_rp_159(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 160: ag_rp_160(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 161: ag_rp_161(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 162: ag_rp_162(PCB_POINTER, V(0,ParserDisplayName), V(2,ParserBasicToken)); break;
    case 163: ag_rp_163(PCB_POINTER); break;
    case 164: ag_rp_164(PCB_POINTER); break;
    case 165: ag_rp_165(PCB_POINTER); break;
    case 166: ag_rp_166(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 167: ag_rp_167(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 168: V(0,ParserBasicToken) = ag_rp_168(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 169: V(0,ParserBasicToken) = ag_rp_169(PCB_POINTER); break;
    case 170: V(0,ParserBasicToken) = ag_rp_170(PCB_POINTER); break;
    case 171: ag_rp_171(PCB_POINTER); break;
    case 172: ag_rp_172(PCB_POINTER); break;
    case 173: ag_rp_173(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 174: ag_rp_174(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserPort)); break;
    case 175: V(0,ParserBasicToken) = ag_rp_175(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 176: V(0,ParserBasicToken) = ag_rp_176(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 177: V(0,ParserBasicToken) = ag_rp_177(PCB_POINTER); break;
    case 178: V(0,ParserBasicToken) = ag_rp_178(PCB_POINTER); break;
    case 179: V(0,ParserBasicToken) = ag_rp_179(PCB_POINTER); break;
    case 180: ag_rp_180(PCB_POINTER); break;
    case 181: ag_rp_181(PCB_POINTER); break;
    case 182: ag_rp_182(PCB_POINTER); break;
    case 183: ag_rp_183(PCB_POINTER); break;
    case 184: ag_rp_184(PCB_POINTER, V(0,ParserTransport)); break;
    case 185: ag_rp_185(PCB_POINTER, V(0,ParserUserParam)); break;
    case 186: ag_rp_186(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 187: ag_rp_187(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 188: ag_rp_188(PCB_POINTER, V(0,ParserMethod)); break;
    case 189: ag_rp_189(PCB_POINTER, V(0,ParserLrParamType)); break;
    case 190: ag_rp_190(PCB_POINTER, V(0,ParserCompParam)); break;
    case 191: ag_rp_191(PCB_POINTER, V(0,ParserTokenizedByParam)); break;
    case 192: ag_rp_192(PCB_POINTER, V(0,RvBool)); break;
    case 193: ag_rp_193(PCB_POINTER); break;
    case 194: V(0,ParserTransport) = ag_rp_194(PCB_POINTER, V(4,ParserTransport)); break;
    case 195: V(0,ParserUserParam) = ag_rp_195(PCB_POINTER, V(4,RvSipUserParam)); break;
    case 196: V(0,ParserUserParam) = ag_rp_196(PCB_POINTER, V(4,ParserOtherUser)); break;
    case 197: V(0,RvSipUserParam) = ag_rp_197(PCB_POINTER); break;
    case 198: V(0,RvSipUserParam) = ag_rp_198(PCB_POINTER); break;
    case 199: V(0,ParserOtherUser) = ag_rp_199(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 200: V(0,ParserTtlParam) = ag_rp_200(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 201: V(0,ParserMaddrParam) = ag_rp_201(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 202: V(0,ParserMethod) = ag_rp_202(PCB_POINTER, V(4,ParserMethod)); break;
    case 203: V(0,ParserLrParamType) = ag_rp_203(PCB_POINTER); break;
    case 204: V(0,ParserLrParamType) = ag_rp_204(PCB_POINTER); break;
    case 205: V(0,ParserLrParamType) = ag_rp_205(PCB_POINTER); break;
    case 206: V(0,ParserLrParamType) = ag_rp_206(PCB_POINTER); break;
    case 207: V(0,ParserCompParam) = ag_rp_207(PCB_POINTER, V(4,ParserCompParam)); break;
    case 208: V(0,ParserTokenizedByParam) = ag_rp_208(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 209: V(0,RvBool) = ag_rp_209(PCB_POINTER); break;
    case 210: ag_rp_210(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 211: ag_rp_211(PCB_POINTER, V(0,ParserBasicToken), V(1,ParserBasicToken)); break;
    case 212: V(0,ParserBasicToken) = ag_rp_212(PCB_POINTER); break;
    case 213: V(0,ParserBasicToken) = ag_rp_213(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 214: V(0,ParserOptionalHeaders) = ag_rp_214(PCB_POINTER); break;
    case 215: V(0,ParserOptionalHeaders) = ag_rp_215(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 216: V(0,ParserBasicToken) = ag_rp_216(PCB_POINTER); break;
    case 217: V(0,ParserBasicToken) = ag_rp_217(PCB_POINTER); break;
    case 218: V(0,ParserBasicToken) = ag_rp_218(PCB_POINTER); break;
    case 219: V(0,ParserBasicToken) = ag_rp_219(PCB_POINTER); break;
    case 220: V(0,ParserBasicToken) = ag_rp_220(PCB_POINTER); break;
    case 221: ag_rp_221(PCB_POINTER); break;
    case 222: ag_rp_222(PCB_POINTER, V(0,ParserMethod), V(4,ParserSipVersion)); break;
    case 223: V(0,ParserMethod) = ag_rp_223(PCB_POINTER); break;
    case 224: V(0,ParserMethod) = ag_rp_224(PCB_POINTER); break;
    case 225: V(0,ParserMethod) = ag_rp_225(PCB_POINTER); break;
    case 226: V(0,ParserMethod) = ag_rp_226(PCB_POINTER); break;
    case 227: V(0,ParserMethod) = ag_rp_227(PCB_POINTER); break;
    case 228: V(0,ParserMethod) = ag_rp_228(PCB_POINTER); break;
    case 229: V(0,ParserMethod) = ag_rp_229(PCB_POINTER); break;
    case 230: V(0,ParserMethod) = ag_rp_230(PCB_POINTER); break;
    case 231: V(0,ParserMethod) = ag_rp_231(PCB_POINTER); break;
    case 232: V(0,ParserMethod) = ag_rp_232(PCB_POINTER); break;
    case 233: V(0,ParserMethod) = ag_rp_233(PCB_POINTER); break;
    case 234: V(0,ParserMethod) = ag_rp_234(PCB_POINTER); break;
    case 235: V(0,ParserMethod) = ag_rp_235(PCB_POINTER); break;
    case 236: V(0,ParserMethod) = ag_rp_236(PCB_POINTER, V(0,ParserMethod)); break;
    case 237: ag_rp_237(PCB_POINTER); break;
    case 238: ag_rp_238(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 239: ag_rp_239(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 240: ag_rp_240(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 241: ag_rp_241(PCB_POINTER); break;
    case 242: ag_rp_242(PCB_POINTER); break;
    case 243: ag_rp_243(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 244: ag_rp_244(PCB_POINTER); break;
    case 245: ag_rp_245(PCB_POINTER, V(1,ParserPartyParams)); break;
    case 246: ag_rp_246(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 247: ag_rp_247(PCB_POINTER); break;
    case 248: V(0,ParserDisplayName) = ag_rp_248(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 249: V(0,ParserDisplayName) = ag_rp_249(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 250: V(0,ParserBasicToken) = ag_rp_250(PCB_POINTER); break;
    case 251: V(0,ParserBasicToken) = ag_rp_251(PCB_POINTER); break;
    case 252: V(0,ParserTagParam) = ag_rp_252(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 253: V(0,ParserPartyParams) = ag_rp_253(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 254: V(0,ParserPartyParams) = ag_rp_254(PCB_POINTER, V(0,ParserPartyParams), V(3,ParserPartyParams)); break;
    case 255: V(0,ParserPartyParams) = ag_rp_255(PCB_POINTER, V(0,ParserTagParam)); break;
    case 256: V(0,ParserPartyParams) = ag_rp_256(PCB_POINTER); break;
    case 257: ag_rp_257(PCB_POINTER); break;
    case 258: ag_rp_258(PCB_POINTER); break;
    case 259: ag_rp_259(PCB_POINTER); break;
    case 260: ag_rp_260(PCB_POINTER); break;
    case 261: ag_rp_261(PCB_POINTER); break;
    case 262: ag_rp_262(PCB_POINTER); break;
    case 263: ag_rp_263(PCB_POINTER); break;
    case 264: ag_rp_264(PCB_POINTER, V(0,ParserQVal)); break;
    case 265: ag_rp_265(PCB_POINTER, V(0,ParserContactActionType)); break;
    case 266: ag_rp_266(PCB_POINTER); break;
    case 267: ag_rp_267(PCB_POINTER); break;
    case 268: V(0,ParserQVal) = ag_rp_268(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 269: V(0,ParserBasicToken) = ag_rp_269(PCB_POINTER); break;
    case 270: V(0,ParserBasicToken) = ag_rp_270(PCB_POINTER); break;
    case 271: V(0,ParserContactActionType) = ag_rp_271(PCB_POINTER, V(4,ParserContactActionType)); break;
    case 272: V(0,ParserContactActionType) = ag_rp_272(PCB_POINTER); break;
    case 273: V(0,ParserContactActionType) = ag_rp_273(PCB_POINTER); break;
    case 274: ag_rp_274(PCB_POINTER); break;
    case 275: ag_rp_275(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 276: ag_rp_276(PCB_POINTER, V(2,ParserSipDate)); break;
    case 277: ag_rp_277(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 278: ag_rp_278(PCB_POINTER, V(0,ParserSipDate)); break;
    case 279: V(0,ParserDeltaSeconds) = ag_rp_279(PCB_POINTER); break;
    case 280: ag_rp_280(PCB_POINTER, V(0,ParserSipDate)); break;
    case 281: V(0,ParserSipDate) = ag_rp_281(PCB_POINTER, V(0,ParserDDMMYY), V(2,ParserTime)); break;
    case 282: V(0,ParserSipDate) = ag_rp_282(PCB_POINTER, V(0,ParserSipDate)); break;
    case 283: V(0,ParserSipDate) = ag_rp_283(PCB_POINTER, V(0,RvSipDateWeekDay), V(4,ParserDDMMYY), V(6,ParserTime)); break;
    case 284: V(0,RvSipDateWeekDay) = ag_rp_284(PCB_POINTER); break;
    case 285: V(0,RvSipDateWeekDay) = ag_rp_285(PCB_POINTER); break;
    case 286: V(0,RvSipDateWeekDay) = ag_rp_286(PCB_POINTER); break;
    case 287: V(0,RvSipDateWeekDay) = ag_rp_287(PCB_POINTER); break;
    case 288: V(0,RvSipDateWeekDay) = ag_rp_288(PCB_POINTER); break;
    case 289: V(0,RvSipDateWeekDay) = ag_rp_289(PCB_POINTER); break;
    case 290: V(0,RvSipDateWeekDay) = ag_rp_290(PCB_POINTER); break;
    case 291: V(0,ParserDDMMYY) = ag_rp_291(PCB_POINTER, V(0,ParserInt32), V(2,RvSipDateMonth), V(4,ParserInt32)); break;
    case 292: V(0,ParserInt32) = ag_rp_292(PCB_POINTER, V(0,int)); break;
    case 293: V(0,ParserInt32) = ag_rp_293(PCB_POINTER, V(0,int), V(1,int)); break;
    case 294: V(0,RvSipDateMonth) = ag_rp_294(PCB_POINTER); break;
    case 295: V(0,RvSipDateMonth) = ag_rp_295(PCB_POINTER); break;
    case 296: V(0,RvSipDateMonth) = ag_rp_296(PCB_POINTER); break;
    case 297: V(0,RvSipDateMonth) = ag_rp_297(PCB_POINTER); break;
    case 298: V(0,RvSipDateMonth) = ag_rp_298(PCB_POINTER); break;
    case 299: V(0,RvSipDateMonth) = ag_rp_299(PCB_POINTER); break;
    case 300: V(0,RvSipDateMonth) = ag_rp_300(PCB_POINTER); break;
    case 301: V(0,RvSipDateMonth) = ag_rp_301(PCB_POINTER); break;
    case 302: V(0,RvSipDateMonth) = ag_rp_302(PCB_POINTER); break;
    case 303: V(0,RvSipDateMonth) = ag_rp_303(PCB_POINTER); break;
    case 304: V(0,RvSipDateMonth) = ag_rp_304(PCB_POINTER); break;
    case 305: V(0,RvSipDateMonth) = ag_rp_305(PCB_POINTER); break;
    case 306: V(0,ParserInt32) = ag_rp_306(PCB_POINTER, V(0,int), V(1,int)); break;
    case 307: V(0,ParserInt32) = ag_rp_307(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 308: V(0,ParserInt32) = ag_rp_308(PCB_POINTER, V(0,int), V(1,int), V(2,int), V(3,int)); break;
    case 309: V(0,ParserTime) = ag_rp_309(PCB_POINTER, V(0,ParserInt32), V(2,ParserInt32), V(4,ParserInt32), V(6,ParserTimeZone)); break;
    case 310: V(0,ParserInt32) = ag_rp_310(PCB_POINTER, V(0,int), V(1,int)); break;
    case 311: V(0,ParserInt32) = ag_rp_311(PCB_POINTER, V(0,int), V(1,int)); break;
    case 312: V(0,ParserInt32) = ag_rp_312(PCB_POINTER, V(0,int), V(1,int)); break;
    case 313: V(0,ParserTimeZone) = ag_rp_313(PCB_POINTER); break;
    case 314: V(0,ParserTimeZone) = ag_rp_314(PCB_POINTER); break;
    case 315: V(0,ParserTimeZone) = ag_rp_315(PCB_POINTER); break;
    case 316: ag_rp_316(PCB_POINTER, V(0,ParserMethod)); break;
    case 317: ag_rp_317(PCB_POINTER, V(0,ParserMethod), V(4,ParserBasicToken)); break;
    case 318: ag_rp_318(PCB_POINTER); break;
    case 319: ag_rp_319(PCB_POINTER); break;
    case 320: ag_rp_320(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 321: ag_rp_321(PCB_POINTER); break;
    case 322: ag_rp_322(PCB_POINTER); break;
    case 323: ag_rp_323(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 324: ag_rp_324(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 325: ag_rp_325(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 326: ag_rp_326(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 327: ag_rp_327(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 328: ag_rp_328(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 329: ag_rp_329(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 330: ag_rp_330(PCB_POINTER, V(0,RvSipAuthStale)); break;
    case 331: ag_rp_331(PCB_POINTER, V(0,ParserAlgorithm)); break;
    case 332: ag_rp_332(PCB_POINTER, V(0,ParserQopValue)); break;
    case 333: ag_rp_333(PCB_POINTER); break;
    case 334: V(0,ParserBasicToken) = ag_rp_334(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 335: V(0,ParserBasicToken) = ag_rp_335(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 336: V(0,ParserBasicToken) = ag_rp_336(PCB_POINTER); break;
    case 337: V(0,ParserBasicToken) = ag_rp_337(PCB_POINTER); break;
    case 338: ag_rp_338(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 339: ag_rp_339(PCB_POINTER); break;
    case 340: ag_rp_340(PCB_POINTER); break;
    case 341: V(0,ParserBasicToken) = ag_rp_341(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 342: V(0,ParserBasicToken) = ag_rp_342(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 343: V(0,ParserBasicToken) = ag_rp_343(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 344: V(0,ParserBasicToken) = ag_rp_344(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 345: V(0,RvSipAuthStale) = ag_rp_345(PCB_POINTER); break;
    case 346: V(0,RvSipAuthStale) = ag_rp_346(PCB_POINTER); break;
    case 347: V(0,ParserAlgorithm) = ag_rp_347(PCB_POINTER, V(1,ParserAlgorithm)); break;
    case 348: ag_rp_348(PCB_POINTER); break;
    case 349: ag_rp_349(PCB_POINTER); break;
    case 350: ag_rp_350(PCB_POINTER); break;
    case 351: ag_rp_351(PCB_POINTER); break;
    case 352: V(0,ParserAlgorithm) = ag_rp_352(PCB_POINTER, V(2,ParserBasicToken), V(4,ParserAlgorithm)); break;
    case 353: V(0,ParserAlgorithm) = ag_rp_353(PCB_POINTER, V(1,ParserAlgorithm)); break;
    case 354: ag_rp_354(PCB_POINTER); break;
    case 355: V(0,ParserAlgorithm) = ag_rp_355(PCB_POINTER); break;
    case 356: V(0,ParserAlgorithm) = ag_rp_356(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 357: ag_rp_357(PCB_POINTER); break;
    case 358: ag_rp_358(PCB_POINTER); break;
    case 359: V(0,ParserBasicToken) = ag_rp_359(PCB_POINTER); break;
    case 360: V(0,ParserQopValue) = ag_rp_360(PCB_POINTER, V(5,ParserQopValue)); break;
    case 361: V(0,ParserQopValue) = ag_rp_361(PCB_POINTER, V(0,ParserAuthQopOptions)); break;
    case 362: V(0,ParserQopValue) = ag_rp_362(PCB_POINTER, V(0,ParserQopValue), V(4,ParserAuthQopOptions)); break;
    case 363: V(0,ParserAuthQopOptions) = ag_rp_363(PCB_POINTER); break;
    case 364: V(0,ParserAuthQopOptions) = ag_rp_364(PCB_POINTER); break;
    case 365: V(0,ParserAuthQopOptions) = ag_rp_365(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 366: V(0,ParserBasicToken) = ag_rp_366(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 367: V(0,ParserBasicToken) = ag_rp_367(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 368: V(0,ParserBasicToken) = ag_rp_368(PCB_POINTER); break;
    case 369: V(0,ParserBasicToken) = ag_rp_369(PCB_POINTER); break;
    case 370: V(0,ParserBasicToken) = ag_rp_370(PCB_POINTER); break;
    case 371: V(0,ParserBasicToken) = ag_rp_371(PCB_POINTER); break;
    case 372: V(0,ParserBasicToken) = ag_rp_372(PCB_POINTER); break;
    case 373: ag_rp_373(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 374: ag_rp_374(PCB_POINTER); break;
    case 375: ag_rp_375(PCB_POINTER); break;
    case 376: ag_rp_376(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 377: ag_rp_377(PCB_POINTER); break;
    case 378: ag_rp_378(PCB_POINTER); break;
    case 379: ag_rp_379(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 380: ag_rp_380(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 381: ag_rp_381(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 382: ag_rp_382(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 383: ag_rp_383(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 384: ag_rp_384(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 385: ag_rp_385(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 386: ag_rp_386(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 387: ag_rp_387(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 388: ag_rp_388(PCB_POINTER, V(0,RvSipAuthIntegrityProtected)); break;
    case 389: ag_rp_389(PCB_POINTER, V(0,RvSipAuthQopOption)); break;
    case 390: ag_rp_390(PCB_POINTER); break;
    case 391: ag_rp_391(PCB_POINTER, V(0,ParserAlgorithm)); break;
    case 392: V(0,ParserBasicToken) = ag_rp_392(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 393: V(0,ParserBasicToken) = ag_rp_393(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 394: V(0,RvSipAuthQopOption) = ag_rp_394(PCB_POINTER, V(5,ParserAuthQopOptions)); break;
    case 395: V(0,ParserBasicToken) = ag_rp_395(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 396: V(0,ParserBasicToken) = ag_rp_396(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 397: V(0,ParserBasicToken) = ag_rp_397(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 398: V(0,ParserBasicToken) = ag_rp_398(PCB_POINTER); break;
    case 399: V(0,ParserBasicToken) = ag_rp_399(PCB_POINTER); break;
    case 400: V(0,ParserBasicToken) = ag_rp_400(PCB_POINTER); break;
    case 401: V(0,ParserBasicToken) = ag_rp_401(PCB_POINTER); break;
    case 402: V(0,ParserBasicToken) = ag_rp_402(PCB_POINTER); break;
    case 403: V(0,ParserBasicToken) = ag_rp_403(PCB_POINTER); break;
    case 404: V(0,ParserBasicToken) = ag_rp_404(PCB_POINTER); break;
    case 405: V(0,ParserBasicToken) = ag_rp_405(PCB_POINTER); break;
    case 406: V(0,ParserBasicToken) = ag_rp_406(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 407: V(0,ParserBasicToken) = ag_rp_407(PCB_POINTER); break;
    case 408: V(0,ParserBasicToken) = ag_rp_408(PCB_POINTER); break;
    case 409: V(0,ParserBasicToken) = ag_rp_409(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 410: V(0,ParserBasicToken) = ag_rp_410(PCB_POINTER); break;
    case 411: V(0,RvSipAuthIntegrityProtected) = ag_rp_411(PCB_POINTER); break;
    case 412: V(0,RvSipAuthIntegrityProtected) = ag_rp_412(PCB_POINTER); break;
    case 413: ag_rp_413(PCB_POINTER); break;
    case 414: ag_rp_414(PCB_POINTER); break;
    case 415: ag_rp_415(PCB_POINTER); break;
    case 416: ag_rp_416(PCB_POINTER); break;
    case 417: ag_rp_417(PCB_POINTER); break;
    case 418: ag_rp_418(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,ParserRetryParam)); break;
    case 419: ag_rp_419(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 420: ag_rp_420(PCB_POINTER, V(0,ParserSipDate), V(3,ParserRetryParam)); break;
    case 421: ag_rp_421(PCB_POINTER, V(0,ParserSipDate)); break;
    case 422: ag_rp_422(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 423: V(0,ParserRetryParam) = ag_rp_423(PCB_POINTER, V(2,ParserDeltaSeconds)); break;
    case 424: V(0,ParserRetryParam) = ag_rp_424(PCB_POINTER); break;
    case 425: V(0,ParserRetryParam) = ag_rp_425(PCB_POINTER, V(0,ParserRetryParam), V(3,ParserDeltaSeconds)); break;
    case 426: V(0,ParserRetryParam) = ag_rp_426(PCB_POINTER, V(0,ParserRetryParam)); break;
    case 427: V(0,ParserDeltaSeconds) = ag_rp_427(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 428: ag_rp_428(PCB_POINTER, V(0,ParserRSeq)); break;
    case 429: V(0,ParserRSeq) = ag_rp_429(PCB_POINTER, V(0,ParserResponseNum)); break;
    case 430: V(0,ParserResponseNum) = ag_rp_430(PCB_POINTER); break;
    case 431: ag_rp_431(PCB_POINTER); break;
    case 432: ag_rp_432(PCB_POINTER, V(0,ParserResponseNum), V(2,ParserSequenceNumber), V(4,ParserMethod)); break;
    case 433: V(0,ParserBasicToken) = ag_rp_433(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 434: ag_rp_434(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 435: ag_rp_435(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 436: ag_rp_436(PCB_POINTER); break;
    case 437: ag_rp_437(PCB_POINTER); break;
    case 438: ag_rp_438(PCB_POINTER, V(0,ParserDisposition), V(2,ParserDispositionParams)); break;
    case 439: ag_rp_439(PCB_POINTER, V(0,ParserDisposition)); break;
    case 440: V(0,ParserDisposition) = ag_rp_440(PCB_POINTER); break;
    case 441: V(0,ParserDisposition) = ag_rp_441(PCB_POINTER); break;
    case 442: V(0,ParserDisposition) = ag_rp_442(PCB_POINTER); break;
    case 443: V(0,ParserDisposition) = ag_rp_443(PCB_POINTER); break;
    case 444: V(0,ParserDisposition) = ag_rp_444(PCB_POINTER); break;
    case 445: V(0,ParserDisposition) = ag_rp_445(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 446: V(0,ParserDispositionParams) = ag_rp_446(PCB_POINTER, V(0,ParserDispositionParam)); break;
    case 447: V(0,ParserDispositionParams) = ag_rp_447(PCB_POINTER); break;
    case 448: V(0,ParserDispositionParams) = ag_rp_448(PCB_POINTER, V(0,ParserDispositionParams), V(1,ParserDispositionParam)); break;
    case 449: V(0,ParserDispositionParams) = ag_rp_449(PCB_POINTER, V(0,ParserDispositionParams)); break;
    case 450: V(0,ParserDispositionParam) = ag_rp_450(PCB_POINTER); break;
    case 451: V(0,ParserDispositionParam) = ag_rp_451(PCB_POINTER); break;
    case 452: V(0,ParserDispositionParam) = ag_rp_452(PCB_POINTER, V(6,ParserBasicToken)); break;
    case 453: ag_rp_453(PCB_POINTER, V(0,ParserSessionExpiresHeader)); break;
    case 454: V(0,ParserSessionExpiresHeader) = ag_rp_454(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 455: V(0,ParserSessionExpiresHeader) = ag_rp_455(PCB_POINTER, V(0,ParserDeltaSeconds), V(2,RvSipSessionExpiresRefresherType)); break;
    case 456: V(0,ParserSessionExpiresHeader) = ag_rp_456(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 457: V(0,ParserSessionExpiresHeader) = ag_rp_457(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,RvSipSessionExpiresRefresherType)); break;
    case 458: V(0,RvSipSessionExpiresRefresherType) = ag_rp_458(PCB_POINTER, V(6,RvSipSessionExpiresRefresherType)); break;
    case 459: V(0,RvSipSessionExpiresRefresherType) = ag_rp_459(PCB_POINTER); break;
    case 460: V(0,RvSipSessionExpiresRefresherType) = ag_rp_460(PCB_POINTER); break;
    case 461: ag_rp_461(PCB_POINTER, V(0,ParserMinSEHeader)); break;
    case 462: V(0,ParserMinSEHeader) = ag_rp_462(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 463: ag_rp_463(PCB_POINTER, V(0,ParserCallId)); break;
    case 464: ag_rp_464(PCB_POINTER, V(0,ParserCallId)); break;
    case 465: ag_rp_465(PCB_POINTER); break;
    case 466: ag_rp_466(PCB_POINTER); break;
    case 467: ag_rp_467(PCB_POINTER, V(0,ParserTagParam)); break;
    case 468: ag_rp_468(PCB_POINTER, V(0,ParserTagParam)); break;
    case 469: ag_rp_469(PCB_POINTER, V(0,ParserReplacesEarlyFlagParamType)); break;
    case 470: ag_rp_470(PCB_POINTER); break;
    case 471: V(0,ParserTagParam) = ag_rp_471(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 472: V(0,ParserTagParam) = ag_rp_472(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 473: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_473(PCB_POINTER); break;
    case 474: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_474(PCB_POINTER); break;
    case 475: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_475(PCB_POINTER); break;
    case 476: ag_rp_476(PCB_POINTER); break;
    case 477: ag_rp_477(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 478: ag_rp_478(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 479: ag_rp_479(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 480: ag_rp_480(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 481: ag_rp_481(PCB_POINTER); break;
    case 482: ag_rp_482(PCB_POINTER, V(5,ParserAuthQopOptions)); break;
    case 483: V(0,ParserBasicToken) = ag_rp_483(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 484: V(0,ParserBasicToken) = ag_rp_484(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 485: V(0,ParserBasicToken) = ag_rp_485(PCB_POINTER); break;
  }
  (PCB).la_ptr = (PCB).pointer;
}
static int ag_action_1_r_proc(PCB_DECL);
static int ag_action_2_r_proc(PCB_DECL);
static int ag_action_3_r_proc(PCB_DECL);
static int ag_action_4_r_proc(PCB_DECL);
static int ag_action_1_s_proc(PCB_DECL);
static int ag_action_3_s_proc(PCB_DECL);
static int ag_action_1_proc(PCB_DECL);
static int ag_action_2_proc(PCB_DECL);
static int ag_action_3_proc(PCB_DECL);
static int ag_action_4_proc(PCB_DECL);
static int ag_action_5_proc(PCB_DECL);
static int ag_action_6_proc(PCB_DECL);
static int ag_action_7_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int ag_action_9_proc(PCB_DECL);
static int ag_action_10_proc(PCB_DECL);
static int ag_action_11_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int (*const  ag_r_procs_scan[])(PCB_DECL) = {
  ag_action_1_r_proc,
  ag_action_2_r_proc,
  ag_action_3_r_proc,
  ag_action_4_r_proc
};
static int (*const  ag_s_procs_scan[])(PCB_DECL) = {
  ag_action_1_s_proc,
  ag_action_2_r_proc,
  ag_action_3_s_proc,
  ag_action_4_r_proc
};
static int (*const  ag_gt_procs_scan[])(PCB_DECL) = {
  ag_action_1_proc,
  ag_action_2_proc,
  ag_action_3_proc,
  ag_action_4_proc,
  ag_action_5_proc,
  ag_action_6_proc,
  ag_action_7_proc,
  ag_action_8_proc,
  ag_action_9_proc,
  ag_action_10_proc,
  ag_action_11_proc,
  ag_action_8_proc
};
static int ag_action_10_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    ag_track(PCB_POINTER);
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  } while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_11_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
    (PCB).ssx--;
    ag_track(PCB_POINTER);
    ag_ra(PCB_POINTER);
    if ((PCB).exit_flag != AG_RUNNING_CODE) return 0;
    (PCB).ssx++;
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  }
  while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_3_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_3_s_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;;
}
static int ag_action_4_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  return 1;
}
static int ag_action_2_proc(PCB_DECL) {
  if ((PCB).ssx >= 43) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  ag_track(PCB_POINTER);
  return 0;
}
static int ag_action_9_proc(PCB_DECL) {
  if ((PCB).ssx >= 43) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (PCB).vs[(PCB).ssx] = ag_null_value;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  (PCB).la_ptr =  (PCB).pointer;
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_2_r_proc(PCB_DECL) {
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  return 0;
}
static int ag_action_7_proc(PCB_DECL) {
  --(PCB).ssx;
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_proc(PCB_DECL) {
  ag_track(PCB_POINTER);
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_r_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_s_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_4_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_3_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_8_proc(PCB_DECL) {
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SYNTAX_ERROR_CODE;
  SYNTAX_ERROR;
  {(PCB).la_ptr = (PCB).pointer + 1; ag_track(PCB_POINTER);}
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_5_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else {
    if ((PCB).ssx >= 43) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_6_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  if (ag_sd) {
    (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  }
  else {
    if ((PCB).ssx >= 43) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).vs[(PCB).ssx] = ag_null_value;
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
void init_SipParser(SipParser_pcb_type *PCB_POINTER) {
  (PCB).la_ptr = (PCB).pointer;
  (PCB).error_message = "Syntax Error";
  (PCB).ss[0] = (PCB).sn = (PCB).ssx = 0;
  (PCB).exit_flag = AG_RUNNING_CODE;
  (PCB).line = FIRST_LINE;
  (PCB).column = FIRST_COLUMN;
}
void SipParser(SipParser_pcb_type *PCB_POINTER) {
  init_SipParser(PCB_POINTER);
  (PCB).exit_flag = AG_RUNNING_CODE;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbt[(PCB).sn];
    if (ag_tstt[ag_t1]) {
      unsigned ag_t2 = ag_sbe[(PCB).sn] - 1;
      (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
      (PCB).la_ptr++;
      if (ag_key_index[(PCB).sn]) {
        unsigned ag_k = ag_key_index[(PCB).sn];
        int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
        while (ag_key_ch[ag_k] < ag_ch) ag_k++;
        if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
      }
      do {
        unsigned ag_tx = (ag_t1 + ag_t2)/2;
        if (ag_tstt[ag_tx] > (const unsigned short)(PCB).token_number)
          ag_t1 = ag_tx + 1;
        else ag_t2 = ag_tx;
      } while (ag_t1 < ag_t2);
      if (ag_tstt[ag_t1] != (const unsigned short)(PCB).token_number)
        ag_t1 = ag_sbe[(PCB).sn];
    }
    (PCB).ag_ap = ag_pstt[ag_t1];
    (ag_gt_procs_scan[ag_astt[ag_t1]])((PCB_TYPE *)PCB_POINTER);
  }
}
#elif !defined(RV_SIP_IMS_DCS_HEADER_SUPPORT) && !defined(RV_SIP_IMS_HEADER_SUPPORT) && !defined(RV_SIP_EXTENDED_HEADER_SUPPORT) && !defined(RV_SIP_JSR32_SUPPORT) && !defined(RV_SIP_LIGHT) && !defined(RV_SIP_TEL_URI_SUPPORT) && !defined(RV_SIP_PRIMITIVES) && defined(RV_SIP_AUTH_ON) && defined(RV_SIP_SUBS_ON)
/*
 AnaGram Parsing Engine
 Copyright (c) 1993-1999, Parsifal Software.
 All Rights Reserved.
 Serial number 2P20671
 Registered to:
   Meir Fuchs
   RADVision Ltd.
*/
#ifndef PARSERENGINECLASSIC_H_1165245787
#include ".\ParserEngineClassic.h"
#endif
#ifndef PARSERENGINECLASSIC_H_1165245787
#error Mismatched header file
#endif
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define RULE_CONTEXT (&((PCB).cs[(PCB).ssx]))
#define ERROR_CONTEXT ((PCB).cs[(PCB).error_frame_ssx])
#define CONTEXT ((PCB).cs[(PCB).ssx])
#ifndef PCB_TYPE
#define PCB_TYPE SipParser_pcb_type
#endif
#define PCB (*pcb_pointer)
#define PCB_DECL PCB_TYPE *pcb_pointer
#define PCB_POINTER pcb_pointer
#define CHANGE_REDUCTION(x) SipParser_change_reduction(PCB_POINTER, SipParser_##x##_token)
int SipParser_change_reduction(PCB_DECL, SipParser_token_type);
#ifndef CONVERT_CASE
static const char agCaseTable[31] = {
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,    0,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
};
static int agConvertCase(int c) {
  if (c >= 'a' && c <= 'z') return c ^= 0x20;
  if (c >= 0xe0 && c < 0xff) c ^= agCaseTable[c-0xe0];
  return c;
}
#define CONVERT_CASE(c) agConvertCase(c)
#endif
#ifndef TAB_SPACING
#define TAB_SPACING 8
#endif
#define ag_rp_1(PCB_POINTER) (SET_HEADER_VALUE())
#define ag_rp_2(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_3(PCB_POINTER) (SIP_BEGIN_TOKEN())
static void ag_rp_4(PCB_DECL) {
/* Line 300, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        REMOVE_COMMA_BETWEEN_HEADERS();
    
}
#define ag_rp_5(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_6(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_7(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_8(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_9(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_10(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_11(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_12(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_13(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_14(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_15(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_16(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_17(PCB_POINTER) (CUR_STRING())
#define ag_rp_18(PCB_POINTER) (CUR_STRING())
#define ag_rp_19(PCB_POINTER) (CUR_STRING())
#define ag_rp_20(PCB_POINTER) (CUR_STRING())
#define ag_rp_21(PCB_POINTER) (CUR_STRING())
#define ag_rp_22(PCB_POINTER) (CUR_STRING())
#define ag_rp_23(PCB_POINTER) (CUR_STRING())
#define ag_rp_24(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_INVITE))
#define ag_rp_25(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_ACK))
#define ag_rp_26(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_BYE))
#define ag_rp_27(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_CANCEL))
#define ag_rp_28(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_REGISTER))
#define ag_rp_29(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_REFER))
#define ag_rp_30(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_NOTIFY))
#define ag_rp_31(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_SUBSCRIBE))
#define ag_rp_32(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_PRACK))
static ParserMethod ag_rp_33(PCB_DECL, ParserBasicToken t) {
/* Line 490, RV SIP Stack */
 ParserMethod method;
                            method.type = PARSER_METHOD_TYPE_OTHER;
                            method.other = t;
                            RV_UNUSED_ARG(pcb_pointer);
                            return method;
                          
}
static void ag_rp_34(PCB_DECL, ParserCSeq cseq) {
/* Line 506, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitCSeq(PCB.pParserMgr, PCB.pointer,&cseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
static ParserCSeq ag_rp_35(PCB_DECL, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 527, RV SIP Stack */
        ParserCSeq cseq;
        cseq.method = method;
		cseq.sequenceNumber = sequenceNumber;
        RV_UNUSED_ARG(pcb_pointer);
        return(cseq);
	 
}
#define ag_rp_36(PCB_POINTER) (CUR_STRING())
static void ag_rp_37(PCB_DECL, ParserContentLength contentLength) {
/* Line 549, RV SIP Stack */
          RvStatus status;
          contentLength.isCompact = PCB.isCompactForm;
          status = ParserInitContentLength(PCB.pParserMgr,PCB.pointer,&contentLength,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
     
}
static ParserContentLength ag_rp_38(PCB_DECL) {
/* Line 572, RV SIP Stack */
        ParserContentLength contentLength;
        contentLength.contentLenVal = CUR_STRING();
        return contentLength;
    
}
static void ag_rp_39(PCB_DECL, ParserCallId callId) {
/* Line 587, RV SIP Stack */
  
          RvStatus status;
          callId.isCompact = PCB.isCompactForm;
          status = ParserInitCallId(PCB.pParserMgr,PCB.pointer,&callId,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if(RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
    
}
static ParserCallId ag_rp_40(PCB_DECL, ParserBasicToken token) {
/* Line 609, RV SIP Stack */
         ParserCallId callId;
         callId.callIdVal = token;
         callId.isCompact = PCB.isCompactForm;
         return callId;
    
}
static ParserCallId ag_rp_41(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 616, RV SIP Stack */
        ParserCallId callId;
        token.len = (token2.len +token.len + 1);
        callId.callIdVal = token;
        callId.isCompact = PCB.isCompactForm;
        return callId;
    
}
static void ag_rp_42(PCB_DECL) {
/* Line 634, RV SIP Stack */
        RvStatus status;
        PCB.contentType.isCompactForm = PCB.isCompactForm;
        status = ParserInitContentType(PCB.pParserMgr,PCB.pointer,&(PCB.contentType),PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status) 
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_TYPE, &PCB);
     
}
static void ag_rp_43(PCB_DECL, ParserMediaType t, ParserMediaSubType st) {
/* Line 663, RV SIP Stack */
 
        PCB.contentType.mediaType    = t;
        PCB.contentType.mediaSubType = st;
        PCB.contentType.genericParamList = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             PCB.contentType.genericParamList=PCB.pExtParams;
        }
    
}
static void ag_rp_44(PCB_DECL) {
/* Line 676, RV SIP Stack */
 
	           PCB.contentType.params.isBoundary  = RV_FALSE;
  	           PCB.contentType.params.isVersion   = RV_FALSE;
               PCB.contentType.params.isBase      = RV_FALSE;
            
}
static void ag_rp_45(PCB_DECL, ParserBoundary b) {
/* Line 694, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_46(PCB_DECL, ParserBase v) {
/* Line 701, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_47(PCB_DECL, ParserBase b) {
/* Line 708, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
static void ag_rp_48(PCB_DECL) {
/* Line 716, RV SIP Stack */
        
        
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
    
}
static void ag_rp_49(PCB_DECL, ParserBoundary b) {
/* Line 731, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_50(PCB_DECL, ParserBase v) {
/* Line 736, RV SIP Stack */
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_51(PCB_DECL, ParserBase b) {
/* Line 741, RV SIP Stack */
        PCB.contentType.params.isBase = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
#define ag_rp_52(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_TEXT))
#define ag_rp_53(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_IMAGE))
#define ag_rp_54(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_AUDIO))
#define ag_rp_55(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_VIDEO))
#define ag_rp_56(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_APPLICATION))
#define ag_rp_57(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MULTIPART))
#define ag_rp_58(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MESSAGE))
static ParserMediaType ag_rp_59(PCB_DECL, ParserBasicToken t) {
/* Line 761, RV SIP Stack */
		ParserMediaType mediaType;
		mediaType.type = RVSIP_MEDIATYPE_OTHER;
		mediaType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaType;
	
}
#define ag_rp_60(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_PLAIN))
#define ag_rp_61(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_SDP))
#define ag_rp_62(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ISUP))
#define ag_rp_63(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_QSIG))
#define ag_rp_64(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_MIXED))
#define ag_rp_65(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ALTERNATIVE))
#define ag_rp_66(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_DIGEST))
#define ag_rp_67(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_RFC822))
#define ag_rp_68(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_3GPP_IMS_XML))
static ParserMediaSubType ag_rp_69(PCB_DECL, ParserBasicToken t) {
/* Line 787, RV SIP Stack */
		ParserMediaSubType mediaSubType;
		mediaSubType.type = RVSIP_MEDIASUBTYPE_OTHER;
		mediaSubType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaSubType;
	
}
#define ag_rp_70(PCB_POINTER, t) (t)
#define ag_rp_71(PCB_POINTER, t) (t)
#define ag_rp_72(PCB_POINTER, t) (t)
#define ag_rp_73(PCB_POINTER, t) (t)
#define ag_rp_74(PCB_POINTER, t) (t)
#define ag_rp_75(PCB_POINTER, t) (t)
static void ag_rp_76(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 820, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
      else
      {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
   
}
#define ag_rp_77(PCB_POINTER, token) (token)
#define ag_rp_78(PCB_POINTER, qs) (qs)
static void ag_rp_79(PCB_DECL, ParserBasicToken token) {
/* Line 858, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token.buf,token.len, PCB.pExtParams);
      }
      else
      {      
          
          APPEND_DATA(token.buf,token.len,PCB.pExtParams);
      }
    
}
static void ag_rp_80(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 872, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
        else
        {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
    
}
#define ag_rp_81(PCB_POINTER, token) (token)
#define ag_rp_82(PCB_POINTER, qs) (qs)
static void ag_rp_83(PCB_DECL, ParserSipVersion ver, ParserStatusCode status, ParserReasonPhrase reason) {
/* Line 906, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;
        statusLine.reasonPhrase = reason;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if (RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
static void ag_rp_84(PCB_DECL, ParserSipVersion ver, ParserStatusCode status) {
/* Line 926, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;       
        statusLine.reasonPhrase.buf=NULL;
        statusLine.reasonPhrase.len=0;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
#define ag_rp_85(PCB_POINTER) (CUR_STRING())
#define ag_rp_86(PCB_POINTER) (CUR_STRING())
static ParserStatusCode ag_rp_87(PCB_DECL, int D100, int D10, int D1) {
/* Line 964, RV SIP Stack */
        RvUint16 code;
        RV_UNUSED_ARG(pcb_pointer);
        code =  (RvUint16)((D100 - '0')*100 + (D10 - '0')*10 + (D1 - '0'));
        return code;
    
}
static void ag_rp_88(PCB_DECL, ParserMethod met) {
/* Line 983, RV SIP Stack */
 
        RvStatus   status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_89(PCB_DECL, ParserMethod met) {
/* Line 1000, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_90(PCB_DECL) {
/* Line 1028, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr, &PCB, PCB.pointer, &(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
           
       }
       
    
}
static void ag_rp_91(PCB_DECL) {
/* Line 1056, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr,&PCB, PCB.pointer,&(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
       }
    
}
static void ag_rp_92(PCB_DECL) {
/* Line 1083, RV SIP Stack */
 
        PCB.singleVia.sentProtocol = PCB.sentProtocol;
        PCB.singleVia.sentBy       = PCB.viaSentBy;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            if (PCB.singleVia.params.isOtherParams==RV_FALSE)
            {
                PCB.singleVia.params.isOtherParams = RV_TRUE;
                PCB.singleVia.params.otherParam = PCB.pExtParams;
            }
        }                
    
}
static void ag_rp_93(PCB_DECL) {
/* Line 1100, RV SIP Stack */
 
        PCB.singleVia.params.hidden     = RV_FALSE;
        PCB.singleVia.params.alias     = RV_FALSE;
        PCB.singleVia.params.isTtl      = RV_FALSE;
        PCB.singleVia.params.isMaddr    = RV_FALSE;
	    PCB.singleVia.params.isReceived = RV_FALSE;
        PCB.singleVia.params.isBranch   = RV_FALSE;
        PCB.singleVia.params.isOtherParams=RV_FALSE;  
        PCB.singleVia.params.isRport	= RV_FALSE;
        PCB.singleVia.params.isComp     = RV_FALSE;
    
}
static void ag_rp_94(PCB_DECL, ParserViaParam p) {
/* Line 1114, RV SIP Stack */
        switch( p.paramType )
        {
            case PARSER_PARAM_TYPE_HIDDEN :
                PCB.singleVia.params.hidden = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_ALIAS:
                PCB.singleVia.params.alias = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_TTL :
                PCB.singleVia.params.isTtl = RV_TRUE;
                PCB.singleVia.params.ttl   = p.param.ttl;
                break;
            
            case PARSER_PARAM_TYPE_MADDR :
                PCB.singleVia.params.isMaddr = RV_TRUE;
                PCB.singleVia.params.maddr   = p.param.maddr;
                break;
            
            case PARSER_PARAM_TYPE_RECEIVED :
                PCB.singleVia.params.isReceived = RV_TRUE;
                PCB.singleVia.params.received   = p.param.received;
                break;
            
            case PARSER_PARAM_TYPE_BRANCH :
                PCB.singleVia.params.isBranch = RV_TRUE;
                PCB.singleVia.params.branch   = p.param.branch;
                break;
            case PARSER_PARAM_TYPE_RPORT:
                PCB.singleVia.params.isRport = RV_TRUE;
                PCB.singleVia.params.rPort   = p.param.rport;
                break;
                 
            case PARSER_PARAM_TYPE_COMP :
                PCB.singleVia.params.isComp  = RV_TRUE;
                PCB.singleVia.params.comp    = p.param.comp;
                break;   
            default:
                if (p.isOther == RV_TRUE)
                {
                     PCB.singleVia.params.isOtherParams = RV_TRUE;
                     PCB.singleVia.params.otherParam   = p.otherParam;
                }                   
                break;
        }       
    
}
static void ag_rp_95(PCB_DECL, ParserProtocolName pn, ParserProtocolVersion pv, ParserTransport t) {
/* Line 1166, RV SIP Stack */
 
        PCB.sentProtocol.protocolName    = pn;
        PCB.sentProtocol.protocolVersion = pv;
        PCB.sentProtocol.transport       = t;
    
}
#define ag_rp_96(PCB_POINTER, t) (t)
#define ag_rp_97(PCB_POINTER) (CUR_STRING())
#define ag_rp_98(PCB_POINTER, t) (t)
#define ag_rp_99(PCB_POINTER, t) (t)
static ParserTransport ag_rp_100(PCB_DECL) {
/* Line 1193, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_UDP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_101(PCB_DECL) {
/* Line 1200, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TCP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_102(PCB_DECL) {
/* Line 1207, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_SCTP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_103(PCB_DECL) {
/* Line 1214, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TLS;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_104(PCB_DECL, ParserBasicToken token) {
/* Line 1221, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_OTHER;
        t.strTransport = token;
        RV_UNUSED_ARG(pcb_pointer);
        return t;
    
}
#define ag_rp_105(PCB_POINTER) (CUR_STRING())
static void ag_rp_106(PCB_DECL, ParserBasicToken host) {
/* Line 1240, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_FALSE;
        PCB.viaSentBy.hostName = host;
     
}
static void ag_rp_107(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 1246, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_TRUE;
        PCB.viaSentBy.hostName = host;
        PCB.viaSentBy.port     = port;
      
}
static ParserViaParam ag_rp_108(PCB_DECL) {
/* Line 1260, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_HIDDEN;                   
          viaParam.param.hidden = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_109(PCB_DECL) {
/* Line 1269, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_ALIAS;                   
          viaParam.param.alias = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_110(PCB_DECL, ParserTTLParam t) {
/* Line 1278, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_TTL;                   
          viaParam.param.ttl = t;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_111(PCB_DECL, ParserMaddrParam ma) {
/* Line 1287, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_MADDR;                   
          viaParam.param.maddr = ma;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_112(PCB_DECL, ParserReceived r) {
/* Line 1296, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RECEIVED;                   
          viaParam.param.received = r;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_113(PCB_DECL, ParserBranch b) {
/* Line 1305, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_BRANCH;                   
          viaParam.param.branch = b;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_114(PCB_DECL, ParserPort rport) {
/* Line 1315, RV SIP Stack */
          ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RPORT;                   
          viaParam.param.rport = rport;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_115(PCB_DECL, ParserCompParam comp) {
/* Line 1324, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType  = PARSER_PARAM_TYPE_COMP;                   
          viaParam.param.comp = comp;
	      viaParam.isOther    = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_116(PCB_DECL) {
/* Line 1333, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_OTHER; 
	      viaParam.isOther = RV_TRUE;
          viaParam.otherParam = PCB.pExtParams;
          return viaParam;    
        
}
static void ag_rp_117(PCB_DECL, ParserBasicToken token) {
/* Line 1350, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1, PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
    
}
static void ag_rp_118(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1365, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_119(PCB_DECL, ParserBasicToken token, ParserQuotedString token2) {
/* Line 1384, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_120(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1407, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
#define ag_rp_121(PCB_POINTER, t) (t)
#define ag_rp_122(PCB_POINTER, ttl) (ttl)
#define ag_rp_123(PCB_POINTER) (CUR_STRING())
#define ag_rp_124(PCB_POINTER) (CUR_STRING())
#define ag_rp_125(PCB_POINTER) (CUR_STRING())
#define ag_rp_126(PCB_POINTER, rport) (rport)
static ParserPort ag_rp_127(PCB_DECL) {
/* Line 1462, RV SIP Stack */
        ParserPort port;
        port.len = 0;
		port.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return port;
    
}
#define ag_rp_128(PCB_POINTER, port) (port)
#define ag_rp_129(PCB_POINTER, ma) (ma)
#define ag_rp_130(PCB_POINTER, host) (host)
#define ag_rp_131(PCB_POINTER, host) (host)
#define ag_rp_132(PCB_POINTER, t) (t)
#define ag_rp_133(PCB_POINTER, comp) (comp)
static ParserCompParam ag_rp_134(PCB_DECL) {
/* Line 1499, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_SIGCOMP;
        comp.strCompParam = CUR_STRING();
        return comp;
    
}
static ParserCompParam ag_rp_135(PCB_DECL, ParserBasicToken token) {
/* Line 1506, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_OTHER;
        comp.strCompParam = CUR_STRING();
        RV_UNUSED_ARG(token.buf);
        return comp;
    
}
#define ag_rp_136(PCB_POINTER) (CUR_STRING())
#define ag_rp_137(PCB_POINTER) (CUR_STRING())
static void ag_rp_138(PCB_DECL) {
/* Line 1543, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
    
}
static void ag_rp_139(PCB_DECL) {
/* Line 1547, RV SIP Stack */
        PCB.parenCount++;
    
}
static void ag_rp_140(PCB_DECL) {
/* Line 1551, RV SIP Stack */
        if (PCB.parenCount-- == 0) 
        {
            CHANGE_REDUCTION(END_COMMENT);
        }
    
}
static void ag_rp_141(PCB_DECL, ParserAbsoluteUri uri) {
/* Line 1737, RV SIP Stack */
       RvStatus status;
       status = ParserInitAbsUri(PCB.pParserMgr, &PCB, &uri, PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (status != RV_OK)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
    
}
static ParserAbsoluteUri ag_rp_142(PCB_DECL, ParserBasicToken scheme, ParserBasicToken id) {
/* Line 1757, RV SIP Stack */
        ParserAbsoluteUri uri;
        uri.scheme = scheme;
        uri.idefntifier = id;
        RV_UNUSED_ARG(pcb_pointer);
        return uri;
    
}
#define ag_rp_143(PCB_POINTER) (CUR_STRING())
#define ag_rp_144(PCB_POINTER, displayName) (displayName)
#define ag_rp_145(PCB_POINTER) (CUR_STRING())
#define ag_rp_146(PCB_POINTER) (CUR_STRING())
static void ag_rp_147(PCB_DECL) {
/* Line 2158, RV SIP Stack */
        RvStatus status;
        status = ParserInitUrl(PCB.pParserMgr,&PCB,&(PCB.sipUrl), PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_URL_PARAMETER, &PCB);
    
}
#define ag_rp_148(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
#define ag_rp_149(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
static void ag_rp_150(PCB_DECL) {
/* Line 2209, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_FALSE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
static void ag_rp_151(PCB_DECL) {
/* Line 2215, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_TRUE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
#define ag_rp_152(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_153(PCB_DECL) {
/* Line 2227, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
		uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
#define ag_rp_154(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_RV_ABS))
static void ag_rp_155(PCB_DECL) {
/* Line 2243, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_FALSE);
    
}
#define ag_rp_156(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_157(PCB_DECL) {
/* Line 2253, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
        uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
static void ag_rp_158(PCB_DECL) {
/* Line 2266, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_TRUE);
    
}
static void ag_rp_159(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2274, RV SIP Stack */
  
           
         PCB.sipUrl.optionalHeaders = hs;
         
         if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
         {
              PCB.sipUrl.urlParameters.genericParamList= PCB.pUrlExtParams;
              PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
         }          
  	
}
static void ag_rp_160(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2285, RV SIP Stack */
  
         
       PCB.sipUrl.optionalHeaders = hs;
       
       if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
       {
            PCB.sipUrl.urlParameters.genericParamList=PCB.pUrlExtParams;
            PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
       }          
	
}
static void ag_rp_161(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2315, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_162(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2324, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_163(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2351, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_164(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2360, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_165(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2372, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_166(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2381, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_167(PCB_DECL, ParserDisplayName scheme, ParserBasicToken id) {
/* Line 2395, RV SIP Stack */
          PCB.exUri.ExUriInfo.absUri.scheme = scheme;
          PCB.exUri.ExUriInfo.absUri.idefntifier = id;
          PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_ABS_URI;
      
}
static void ag_rp_168(PCB_DECL) {
/* Line 2405, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_TRUE;
    
}
static void ag_rp_169(PCB_DECL) {
/* Line 2410, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_170(PCB_DECL) {
/* Line 2417, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_USERINFO);
    
}
static void ag_rp_171(PCB_DECL, ParserBasicToken user) {
/* Line 2423, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_FALSE;
    
}
static void ag_rp_172(PCB_DECL, ParserBasicToken user, ParserBasicToken pass) {
/* Line 2428, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_TRUE;
        PCB.sipUrl.urlUserInfo.password   = pass;
     
}
#define ag_rp_173(PCB_POINTER, t) (t)
#define ag_rp_174(PCB_POINTER) (CUR_STRING())
#define ag_rp_175(PCB_POINTER) (CUR_STRING())
static void ag_rp_176(PCB_DECL) {
/* Line 2461, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_177(PCB_DECL) {
/* Line 2467, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_HOST);
    
}
static void ag_rp_178(PCB_DECL, ParserBasicToken host) {
/* Line 2475, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_FALSE;
    
}
static void ag_rp_179(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 2481, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_TRUE;
        PCB.sipUrl.urlHost.port     = port;
    
}
#define ag_rp_180(PCB_POINTER, t) (t)
#define ag_rp_181(PCB_POINTER, ip6ref) (ip6ref)
#define ag_rp_182(PCB_POINTER) (CUR_STRING())
#define ag_rp_183(PCB_POINTER) (CUR_STRING())
#define ag_rp_184(PCB_POINTER) (CUR_STRING())
#define ag_rp_185(PCB_POINTER) (RESET_URI_PARAMS())
static void ag_rp_186(PCB_DECL) {
/* Line 2535, RV SIP Stack */
	
       PCB.sipUrl.urlParameters.isValid = RV_TRUE;
    
}
static void ag_rp_187(PCB_DECL) {
/* Line 2548, RV SIP Stack */
 
        RESET_URI_PARAMS();  
         								
        switch( PCB.urlParameter.paramType )
        {
            case PARSER_TRANSPORT_PARAM: 
	            PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
	            PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
	            break;
            case PARSER_USER_PARAM: 
	            PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
	            PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
	            break;		
            case PARSER_TTL_PARAM: 
	            PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
	            PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
	            break;
            case PARSER_MADDR_PARAM: 
	            PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
	            break;
            case PARSER_METHOD_PARAM: 
	            PCB.sipUrl.urlParameters.isMethodParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.methodParam         = PCB.urlParameter.param.methodParam; 
	            break;
            case PARSER_LR_PARAM: 
	            PCB.sipUrl.urlParameters.lrParamType         = PCB.urlParameter.param.lrParamType;
	            break;
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam         = RV_TRUE;
                PCB.sipUrl.urlParameters.compParam           = PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
	            break;
             default:
                 PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                 PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;            
        } 	 														
    
}
static void ag_rp_188(PCB_DECL) {
/* Line 2595, RV SIP Stack */
 
         
        switch( PCB.urlParameter.paramType )
        {
	        case PARSER_TRANSPORT_PARAM: 
		        PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
		        PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
		        break;
	        case PARSER_USER_PARAM: 
		        PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
		        PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
		        break;	
	        case PARSER_TTL_PARAM: 
		        PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
		        PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
		        break;
	        case PARSER_MADDR_PARAM: 
		        PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
		        PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
		        break;  
            case PARSER_METHOD_PARAM: 
		        PCB.sipUrl.urlParameters.isMethodParam		= RV_TRUE;
		        PCB.sipUrl.urlParameters.methodParam		= PCB.urlParameter.param.methodParam; 
		        break; 
            case PARSER_LR_PARAM: 
		        PCB.sipUrl.urlParameters.lrParamType		= PCB.urlParameter.param.lrParamType;
		        break; 
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam		= RV_TRUE;
                PCB.sipUrl.urlParameters.compParam			= PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
		        PCB.sipUrl.urlParameters.isOtherParams		= RV_TRUE;
		        break; 
            default:
                PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;                  
        }	 
    
}
static void ag_rp_189(PCB_DECL, ParserTransport t) {
/* Line 2645, RV SIP Stack */
 
         PCB.urlParameter.paramType = PARSER_TRANSPORT_PARAM;
         PCB.urlParameter.param.transport = t;
    
}
static void ag_rp_190(PCB_DECL, ParserUserParam u) {
/* Line 2650, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_USER_PARAM;
		 PCB.urlParameter.param.userParam = u;
	
}
static void ag_rp_191(PCB_DECL, ParserTtlParam t) {
/* Line 2655, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_TTL_PARAM;
		 PCB.urlParameter.param.ttlParam = t;
	
}
static void ag_rp_192(PCB_DECL, ParserMaddrParam ma) {
/* Line 2660, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_MADDR_PARAM;
		 PCB.urlParameter.param.maddrParam = ma;
	
}
static void ag_rp_193(PCB_DECL, ParserMethod met) {
/* Line 2666, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_METHOD_PARAM;
		 PCB.urlParameter.param.methodParam =met;
    
}
static void ag_rp_194(PCB_DECL, ParserLrParamType lrParam) {
/* Line 2671, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_LR_PARAM;
		 PCB.urlParameter.param.lrParamType   = lrParam;
    
}
static void ag_rp_195(PCB_DECL, ParserCompParam comp) {
/* Line 2676, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_COMP_PARAM;
        PCB.urlParameter.param.compParam = comp;
    
}
static void ag_rp_196(PCB_DECL, ParserTokenizedByParam tokenizedBy) {
/* Line 2681, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_TOKENIZED_BY_PARAM;
        PCB.urlParameter.param.tokenizedByParam = tokenizedBy;
    
}
static void ag_rp_197(PCB_DECL, RvBool orig) {
/* Line 2686, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_ORIG_PARAM;
        PCB.urlParameter.param.bOrigParam = orig;
    
}
static void ag_rp_198(PCB_DECL) {
/* Line 2696, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_OTHER_PARAM;
    
}
#define ag_rp_199(PCB_POINTER, t) (t)
static ParserUserParam ag_rp_200(PCB_DECL, RvSipUserParam pt) {
/* Line 2711, RV SIP Stack */
 
        ParserUserParam userParam;
	    userParam.paramType = pt;
		userParam.otherUser.buf = NULL;
		userParam.otherUser.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
static ParserUserParam ag_rp_201(PCB_DECL, ParserOtherUser ou) {
/* Line 2720, RV SIP Stack */
 
        ParserUserParam userParam;
        userParam.paramType = RVSIP_USERPARAM_OTHER;
	    userParam.otherUser = ou;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
#define ag_rp_202(PCB_POINTER) (RVSIP_USERPARAM_PHONE)
#define ag_rp_203(PCB_POINTER) (RVSIP_USERPARAM_IP)
#define ag_rp_204(PCB_POINTER, t) (t)
#define ag_rp_205(PCB_POINTER, ttl) (ttl)
#define ag_rp_206(PCB_POINTER, host) (host)
#define ag_rp_207(PCB_POINTER, met) (met)
#define ag_rp_208(PCB_POINTER) (ParserLrParam1)
#define ag_rp_209(PCB_POINTER) (ParserLrParamTrue)
#define ag_rp_210(PCB_POINTER) (ParserLrParamOn)
#define ag_rp_211(PCB_POINTER) (ParserLrParamEmpty)
#define ag_rp_212(PCB_POINTER, comp) (comp)
#define ag_rp_213(PCB_POINTER, hostname) (hostname)
#define ag_rp_214(PCB_POINTER) (RV_TRUE)
static void ag_rp_215(PCB_DECL, ParserBasicToken token) {
/* Line 2792, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token.buf,token.len, PCB.pUrlExtParams);
          }
          else
          {      
              
              APPEND_DATA(token.buf,token.len,PCB.pUrlExtParams);
          }
    
}
static void ag_rp_216(PCB_DECL, ParserBasicToken token1, ParserBasicToken token2) {
/* Line 2806, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
          else
          {      
              
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
    
}
#define ag_rp_217(PCB_POINTER) (CUR_STRING())
#define ag_rp_218(PCB_POINTER, token) (token)
static ParserOptionalHeaders ag_rp_219(PCB_DECL) {
/* Line 2849, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_FALSE;
		optionalHeaders.body.buf = NULL;
		optionalHeaders.body.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
static ParserOptionalHeaders ag_rp_220(PCB_DECL, ParserBasicToken headersList) {
/* Line 2858, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_TRUE;
        optionalHeaders.body=headersList;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
#define ag_rp_221(PCB_POINTER) (CUR_STRING())
#define ag_rp_222(PCB_POINTER) (CUR_STRING())
#define ag_rp_223(PCB_POINTER) (CUR_STRING())
#define ag_rp_224(PCB_POINTER) (CUR_STRING())
#define ag_rp_225(PCB_POINTER) (CUR_STRING())
static void ag_rp_226(PCB_DECL) {
/* Line 2894, RV SIP Stack */
        RvStatus status;
        status = ParserInitRequsetLine(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.requestLine), PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REQUEST_LINE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        
    
}
static void ag_rp_227(PCB_DECL, ParserMethod met, ParserSipVersion ver) {
/* Line 2919, RV SIP Stack */
         PCB.requestLine.method = met;
         PCB.requestLine.sipVer = ver;
		 PCB.requestLine.exUri = PCB.exUri;         
    
}
#define ag_rp_228(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("m"))
#define ag_rp_229(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("i"))
#define ag_rp_230(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("c"))
#define ag_rp_231(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("v"))
#define ag_rp_232(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("t"))
#define ag_rp_233(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("f"))
#define ag_rp_234(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("r"))
#define ag_rp_235(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("b"))
#define ag_rp_236(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("k"))
#define ag_rp_237(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("x"))
#define ag_rp_238(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("o"))
#define ag_rp_239(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("u"))
#define ag_rp_240(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("l"))
#define ag_rp_241(PCB_POINTER, met) (met)
#define ag_rp_242(PCB_POINTER) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_SIP_URL, PCB.exUri.ExUriInfo.absUri))
#define ag_rp_243(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_PRES_URI, uri))
#define ag_rp_244(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_IM_URI, uri))
#define ag_rp_245(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_ABS_URI, uri))
static void ag_rp_246(PCB_DECL) {
/* Line 2974, RV SIP Stack */
 
         RvStatus status;
         status = ParserInitParty(PCB.pParserMgr,PCB.pointer,&(PCB.party), PCB.eHeaderType, PCB.eWhichHeader, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
        ParserCleanExtParams (PCB.pExtParams); 
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_PARTY, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
	 
}
static void ag_rp_247(PCB_DECL) {
/* Line 3000, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_248(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3009, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams = partyParams; 
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_249(PCB_DECL) {
/* Line 3018, RV SIP Stack */
 
	  PCB.party.nameAddr.isDisplayName = RV_FALSE;
      PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
	  PCB.party.nameAddr.exUri = PCB.exUri;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_250(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3028, RV SIP Stack */
 
        PCB.party.nameAddr.isDisplayName = RV_FALSE;
        PCB.party.partyParams = partyParams;
		PCB.party.nameAddr.exUri = PCB.exUri;       
        PCB.party.isCompact = PCB.isCompactForm;
      
	
}
static void ag_rp_251(PCB_DECL, ParserDisplayName name) {
/* Line 3040, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;    
        PCB.nameAddr.isDisplayName = RV_TRUE;  
	    PCB.nameAddr.name = name;
	
}
static void ag_rp_252(PCB_DECL) {
/* Line 3047, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;
        PCB.nameAddr.isDisplayName = RV_FALSE;  
    
}
#define ag_rp_253(PCB_POINTER, qs) (qs)
#define ag_rp_254(PCB_POINTER, mtot) (mtot)
#define ag_rp_255(PCB_POINTER) (CUR_STRING())
#define ag_rp_256(PCB_POINTER) (CUR_STRING())
#define ag_rp_257(PCB_POINTER, t) (t)
#define ag_rp_258(PCB_POINTER, ppd) (ppd)
static ParserPartyParams ag_rp_259(PCB_DECL, ParserPartyParams ppl, ParserPartyParams ppd) {
/* Line 3078, RV SIP Stack */
        if (RV_TRUE == ppd.isTag)
        {
            ppl.isTag = RV_TRUE;
            ppl.tag = ppd.tag;
        }
        if (RV_TRUE == ppd.isAddrParams) 
        {
            ppl.isAddrParams = RV_TRUE;
            ppl.addrParams = ppd.addrParams;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ppl;
    
}
static ParserPartyParams ag_rp_260(PCB_DECL, ParserTagParam tag) {
/* Line 3097, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isTag = RV_TRUE;
        partyParams.tag = tag;
        partyParams.isAddrParams = RV_FALSE;
        partyParams.addrParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return partyParams; 
    
}
static ParserPartyParams ag_rp_261(PCB_DECL) {
/* Line 3107, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isAddrParams = RV_TRUE;
        partyParams.isTag = RV_FALSE;
        partyParams.addrParams = PCB.pExtParams;
		partyParams.tag.buf = NULL;
		partyParams.tag.len = 0;
        return partyParams; 
    
}
static void ag_rp_262(PCB_DECL) {
/* Line 3133, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_TRUE; 
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr, &PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
    
}
static void ag_rp_263(PCB_DECL) {
/* Line 3166, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues  contactHeaderValues;
         contactHeaderValues.isStar        = RV_FALSE;
         contactHeaderValues.header        = PCB.contact;
         contactHeaderValues.isCompact     = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_264(PCB_DECL) {
/* Line 3199, RV SIP Stack */
         RvStatus                 status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_FALSE;
         contactHeaderValues.header = PCB.contact;
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_265(PCB_DECL) {
/* Line 3234, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_FALSE;
	
}
static void ag_rp_266(PCB_DECL) {
/* Line 3240, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_TRUE;
      
	
}
static void ag_rp_267(PCB_DECL) {
/* Line 3250, RV SIP Stack */
 
	  PCB.contact.nameAddr.isDisplayName = RV_FALSE;  
      PCB.contact.isParams = RV_FALSE;
	  PCB.contact.nameAddr.exUri = PCB.exUri;      
	
}
static void ag_rp_268(PCB_DECL) {
/* Line 3257, RV SIP Stack */
 
      PCB.contact.nameAddr.isDisplayName = RV_FALSE;
	  PCB.contact.isParams = RV_TRUE;      
      PCB.contact.nameAddr.exUri = PCB.exUri;
	
}
static void ag_rp_269(PCB_DECL, ParserQVal q) {
/* Line 3277, RV SIP Stack */
 
        PCB.contact.params.isQ = RV_TRUE;
        PCB.contact.params.q = q;
    
}
static void ag_rp_270(PCB_DECL, ParserContactActionType action) {
/* Line 3283, RV SIP Stack */
 
        PCB.contact.params.isAction = RV_TRUE;
        PCB.contact.params.action = action;
    
}
static void ag_rp_271(PCB_DECL) {
/* Line 3289, RV SIP Stack */
 
        PCB.contact.params.isExpires = RV_TRUE;
        PCB.contact.params.expires = PCB.expires;
    
}
static void ag_rp_272(PCB_DECL) {
/* Line 3295, RV SIP Stack */
  
        PCB.contact.params.isExtention = RV_TRUE;
		PCB.contact.params.exten = PCB.pExtParams;
    
}
#define ag_rp_273(PCB_POINTER, qVal) (qVal)
#define ag_rp_274(PCB_POINTER) (CUR_STRING())
#define ag_rp_275(PCB_POINTER) (CUR_STRING())
#define ag_rp_276(PCB_POINTER, actionVal) (actionVal)
#define ag_rp_277(PCB_POINTER) (PARSER_CONTACT_ACTION_PROXY)
#define ag_rp_278(PCB_POINTER) (PARSER_CONTACT_ACTION_REDIRECT)
static void ag_rp_279(PCB_DECL) {
/* Line 3341, RV SIP Stack */
       RvStatus status;
       status = ParserInitExpiresHeader(PCB.pParserMgr,PCB.pointer,&(PCB.expires),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_280(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3363, RV SIP Stack */
  
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_281(PCB_DECL, ParserSipDate date) {
/* Line 3369, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
static void ag_rp_282(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3378, RV SIP Stack */
   
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_283(PCB_DECL, ParserSipDate date) {
/* Line 3384, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
#define ag_rp_284(PCB_POINTER) (CUR_STRING())
static void ag_rp_285(PCB_DECL, ParserSipDate date) {
/* Line 3409, RV SIP Stack */
   
          RvStatus status;
          status = ParserInitDateHeader(PCB.pParserMgr,PCB.pointer,&date,PCB.eHeaderType,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
                
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
    
}
static ParserSipDate ag_rp_286(PCB_DECL, ParserDDMMYY date, ParserTime t) {
/* Line 3431, RV SIP Stack */
  
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_287(PCB_POINTER, date) (date)
static ParserSipDate ag_rp_288(PCB_DECL, RvSipDateWeekDay day, ParserDDMMYY date, ParserTime t) {
/* Line 3446, RV SIP Stack */
   
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
	    sipDate.eWeekDay = day; 
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_289(PCB_POINTER) (RVSIP_WEEKDAY_SUN)
#define ag_rp_290(PCB_POINTER) (RVSIP_WEEKDAY_MON)
#define ag_rp_291(PCB_POINTER) (RVSIP_WEEKDAY_TUE)
#define ag_rp_292(PCB_POINTER) (RVSIP_WEEKDAY_WED)
#define ag_rp_293(PCB_POINTER) (RVSIP_WEEKDAY_THU)
#define ag_rp_294(PCB_POINTER) (RVSIP_WEEKDAY_FRI)
#define ag_rp_295(PCB_POINTER) (RVSIP_WEEKDAY_SAT)
static ParserDDMMYY ag_rp_296(PCB_DECL, ParserInt32 dd, RvSipDateMonth mm, ParserInt32 yy) {
/* Line 3471, RV SIP Stack */
        ParserDDMMYY ddmmyy;
        ddmmyy.day = dd;
        ddmmyy.eMonth = mm;
        ddmmyy.year = yy;
        RV_UNUSED_ARG(pcb_pointer);
        return ddmmyy;
    
}
static ParserInt32 ag_rp_297(PCB_DECL, int d) {
/* Line 3483, RV SIP Stack */
    	RV_UNUSED_ARG(pcb_pointer);
    	return d - '0';	
    
}
static ParserInt32 ag_rp_298(PCB_DECL, int d1, int d2) {
/* Line 3488, RV SIP Stack */
		RV_UNUSED_ARG(pcb_pointer);
	    return 10 * (d1-'0') + (d2-'0');
    
}
#define ag_rp_299(PCB_POINTER) (RVSIP_MONTH_JAN)
#define ag_rp_300(PCB_POINTER) (RVSIP_MONTH_FEB)
#define ag_rp_301(PCB_POINTER) (RVSIP_MONTH_MAR)
#define ag_rp_302(PCB_POINTER) (RVSIP_MONTH_APR)
#define ag_rp_303(PCB_POINTER) (RVSIP_MONTH_MAY)
#define ag_rp_304(PCB_POINTER) (RVSIP_MONTH_JUN)
#define ag_rp_305(PCB_POINTER) (RVSIP_MONTH_JUL)
#define ag_rp_306(PCB_POINTER) (RVSIP_MONTH_AUG)
#define ag_rp_307(PCB_POINTER) (RVSIP_MONTH_SEP)
#define ag_rp_308(PCB_POINTER) (RVSIP_MONTH_OCT)
#define ag_rp_309(PCB_POINTER) (RVSIP_MONTH_NOV)
#define ag_rp_310(PCB_POINTER) (RVSIP_MONTH_DEC)
#define ag_rp_311(PCB_POINTER, d1, d2) (2000 + 10 * (d1-'0') + (d2-'0'))
#define ag_rp_312(PCB_POINTER, d1, d2, d3) (2000 + 100 * (d1-'0') + 10 * (d2-'0') + (d3-'0'))
#define ag_rp_313(PCB_POINTER, d1, d2, d3, d4) (1000 * (d1-'0') + 100*(d2-'0') + 10*(d3-'0') + (d4-'0'))
static ParserTime ag_rp_314(PCB_DECL, ParserInt32 hour, ParserInt32 min, ParserInt32 second, ParserTimeZone zone) {
/* Line 3518, RV SIP Stack */
        ParserTime t;
        t.hour   = hour;
        t.minute = min;
        t.second = second;
        t.zone   = zone;
        RV_UNUSED_ARG(pcb_pointer);
        return t;        
    
}
#define ag_rp_315(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_316(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_317(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_318(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMT)
#define ag_rp_319(PCB_POINTER) (SIPPARSER_TIME_ZONE_UTC)
#define ag_rp_320(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMST)
static void ag_rp_321(PCB_DECL, ParserMethod method) {
/* Line 3565, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value.buf = NULL;
        otherHeader.value.len = 0;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
        
    
}
static void ag_rp_322(PCB_DECL, ParserMethod method, ParserBasicToken fv) {
/* Line 3590, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value = fv;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_323(PCB_DECL) {
/* Line 3620, RV SIP Stack */
          RvStatus status; 
          status = ParserInitAuthentication(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.authentication),PCB.eHeaderType,PCB.eWhichHeader,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
               
               PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
               PCB.eStat = status;
          }
           
          ParserCleanExtParams (PCB.pExtParams);
          ParserCleanExtParams (PCB.pUrlExtParams);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_AUTHENTICATION, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);
    
}
static void ag_rp_324(PCB_DECL) {
/* Line 3650, RV SIP Stack */
    
        PCB.authentication.eAuthScheme = RVSIP_AUTH_SCHEME_DIGEST;
        PCB.authentication.isAuthParamList = RV_FALSE;
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);        
    
}
static void ag_rp_325(PCB_DECL, ParserBasicToken authScheme) {
/* Line 3657, RV SIP Stack */
        
        PCB.authentication.eAuthScheme = RVSIP_AUTH_SCHEME_OTHER;
        PCB.authentication.authScheme  = authScheme;
        PCB.authentication.isRealm =     RV_FALSE;
        PCB.authentication.isDomain =    RV_FALSE;
        PCB.authentication.isNonce =     RV_FALSE;
        PCB.authentication.isOpaque =    RV_FALSE;
        PCB.authentication.isAuthParam = RV_FALSE;
        PCB.authentication.eStale =      RVSIP_AUTH_STALE_UNDEFINED;
        PCB.authentication.algorithm.eAlgorithm = RVSIP_AUTH_ALGORITHM_UNDEFINED;
		PCB.authentication.algorithm.isAKAVersion = RV_FALSE;
		PCB.authentication.qopValue.eAuthQop    = RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authentication.qopValue.isOther = RV_FALSE;
        PCB.authentication.isAuthParamList = RV_TRUE;
		PCB.authentication.isIntegrityKey =	RV_FALSE;
		PCB.authentication.isCipherKey =	RV_FALSE;
        PCB.authentication.authParamList = PCB.pExtParams;
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);        
    
}
static void ag_rp_326(PCB_DECL) {
/* Line 3685, RV SIP Stack */
        PCB.authentication.eAuthScheme = RVSIP_AUTH_SCHEME_UNDEFINED;
        PCB.authentication.isRealm =     RV_FALSE;
        PCB.authentication.isDomain =    RV_FALSE;
        PCB.authentication.isNonce =     RV_FALSE;
        PCB.authentication.isOpaque =    RV_FALSE;
        PCB.authentication.isAuthParam = RV_FALSE;
        PCB.authentication.eStale =      RVSIP_AUTH_STALE_UNDEFINED;
        PCB.authentication.algorithm.eAlgorithm = RVSIP_AUTH_ALGORITHM_UNDEFINED;
		PCB.authentication.algorithm.isAKAVersion = RV_FALSE;
        PCB.authentication.qopValue.eAuthQop    = RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authentication.qopValue.isOther = RV_FALSE;
		PCB.authentication.isIntegrityKey =	RV_FALSE;
		PCB.authentication.isCipherKey =	RV_FALSE;
        switch (PCB.digestChallenge.eType)
        {
            case PARSER_DIGEST_TYPE_REALM:
            {
                PCB.authentication.isRealm = RV_TRUE;
                PCB.authentication.realm = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_DOMAIN:
            {
                PCB.authentication.isDomain = RV_TRUE;
                PCB.authentication.domain = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE:
            {
                PCB.authentication.isNonce = RV_TRUE;
                PCB.authentication.nonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPAQUE:
            {
                PCB.authentication.isOpaque = RV_TRUE;
                PCB.authentication.opaque = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_STALE:
            {
                PCB.authentication.eStale = PCB.digestChallenge.eStale;
                break;
            }
            case PARSER_DIGEST_TYPE_ALGORITHM:
            {
                PCB.authentication.algorithm = PCB.digestChallenge.algorithm;
                break;
            }
			case PARSER_DIGEST_TYPE_INTEGRITY_KEY:
            {
                PCB.authentication.integrityKey = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_CIPHER_KEY:
            {
                PCB.authentication.cipherKey = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPQ_OPTIONS:
            {
                PCB.authentication.qopValue = PCB.digestChallenge.qopVal;
                break;
            }
            case PARSER_DIGEST_TYPE_AUTH_PARAM:
            {
                PCB.authentication.isAuthParam = RV_TRUE;
                PCB.authentication.authParam = PCB.digestChallenge.challenge;
                break;
            }
            default:
                    PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                    PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
        }
    
}
static void ag_rp_327(PCB_DECL) {
/* Line 3763, RV SIP Stack */
        if (PCB.isNewChallenge == RV_FALSE)
        {
            switch (PCB.digestChallenge.eType)
            {
                case PARSER_DIGEST_TYPE_REALM:
                {
                    PCB.authentication.isRealm = RV_TRUE;
                    PCB.authentication.realm = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_DOMAIN:
                {
                    PCB.authentication.isDomain = RV_TRUE;
                    PCB.authentication.domain = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_NONCE:
                {
                    PCB.authentication.isNonce = RV_TRUE;
                    PCB.authentication.nonce = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_OPAQUE:
                {
                    PCB.authentication.isOpaque = RV_TRUE;
                    PCB.authentication.opaque = PCB.digestChallenge.challenge;
                    break;
                }
                case PARSER_DIGEST_TYPE_STALE:
                {
                    PCB.authentication.eStale = PCB.digestChallenge.eStale;
                    break;
                }
                case PARSER_DIGEST_TYPE_ALGORITHM:
                {
                    PCB.authentication.algorithm = PCB.digestChallenge.algorithm;
                    break;
                }
				case PARSER_DIGEST_TYPE_INTEGRITY_KEY:
				{
					PCB.authentication.isIntegrityKey = RV_TRUE;
					PCB.authentication.integrityKey = PCB.digestChallenge.challenge;
					break;
				}
				case PARSER_DIGEST_TYPE_CIPHER_KEY:
				{
					PCB.authentication.isCipherKey = RV_TRUE;
					PCB.authentication.cipherKey = PCB.digestChallenge.challenge;
					break;
				}
                case PARSER_DIGEST_TYPE_OPQ_OPTIONS:
                {
                    PCB.authentication.qopValue = PCB.digestChallenge.qopVal;
                    break;
                }
                case PARSER_DIGEST_TYPE_AUTH_PARAM:
                {
                    PCB.authentication.isAuthParam = RV_TRUE;
                    PCB.authentication.authParam = PCB.digestChallenge.challenge;
                    break;
                }
                default:
                        PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                            
                        PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
            }
        }
    
}
#define ag_rp_328(PCB_POINTER, realm) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_REALM, realm))
#define ag_rp_329(PCB_POINTER, domain) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_DOMAIN, domain))
#define ag_rp_330(PCB_POINTER, nonce) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_NONCE, nonce))
#define ag_rp_331(PCB_POINTER, opaque) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_OPAQUE, opaque))
#define ag_rp_332(PCB_POINTER, ik) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_INTEGRITY_KEY, ik))
#define ag_rp_333(PCB_POINTER, ck) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_CIPHER_KEY, ck))
#define ag_rp_334(PCB_POINTER, authParam) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_AUTH_PARAM, authParam))
static void ag_rp_335(PCB_DECL, RvSipAuthStale stale) {
/* Line 3844, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_STALE;
        PCB.digestChallenge.eStale = stale;
    
}
static void ag_rp_336(PCB_DECL, ParserAlgorithm algorithm) {
/* Line 3849, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_ALGORITHM;
        
        if(PCB.digestChallenge.algorithm.eAlgorithm == RVSIP_AUTH_ALGORITHM_UNDEFINED)
        {
            PCB.digestChallenge.algorithm = algorithm;
        }
    
}
static void ag_rp_337(PCB_DECL, ParserQopValue qopOptions) {
/* Line 3858, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_OPQ_OPTIONS;
        PCB.digestChallenge.qopVal = qopOptions;
    
}
static void ag_rp_338(PCB_DECL) {
/* Line 3864, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_NEW_CHALLENGE;
        PCB.digestChallenge.challenge.buf = "NewChallenge";
        PCB.isNewChallenge = RV_TRUE;
    
}
#define ag_rp_339(PCB_POINTER, t) (t)
#define ag_rp_340(PCB_POINTER, t) (t)
#define ag_rp_341(PCB_POINTER) (CUR_LINE())
#define ag_rp_342(PCB_POINTER) (CUR_LINE())
static void ag_rp_343(PCB_DECL, ParserBasicToken token) {
/* Line 3900, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
        RV_UNUSED_ARG(token.buf);
    
}
#define ag_rp_344(PCB_POINTER) (SIP_BEGIN_LINE())
#define ag_rp_345(PCB_POINTER) (SIP_BEGIN_LINE())
#define ag_rp_346(PCB_POINTER, t) (t)
#define ag_rp_347(PCB_POINTER, t) (t)
#define ag_rp_348(PCB_POINTER, t) (t)
#define ag_rp_349(PCB_POINTER, t) (t)
#define ag_rp_350(PCB_POINTER) (RVSIP_AUTH_STALE_TRUE)
#define ag_rp_351(PCB_POINTER) (RVSIP_AUTH_STALE_FALSE)
#define ag_rp_352(PCB_POINTER, algo) (algo)
static void ag_rp_353(PCB_DECL) {
/* Line 3962, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static void ag_rp_354(PCB_DECL) {
/* Line 3967, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static void ag_rp_355(PCB_DECL) {
/* Line 3972, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static void ag_rp_356(PCB_DECL) {
/* Line 3977, RV SIP Stack */
		DEFINE_AKAV_PREFIX();
		SIP_BEGIN_TOKEN();			
	
}
static ParserAlgorithm ag_rp_357(PCB_DECL, ParserBasicToken version, ParserAlgorithm algo) {
/* Line 3985, RV SIP Stack */
		algo.isAKAVersion = RV_TRUE;
		algo.nAKAVersion  = version;
		RV_UNUSED_ARG(pcb_pointer);
		return algo;
	
}
static ParserAlgorithm ag_rp_358(PCB_DECL, ParserAlgorithm algo) {
/* Line 3992, RV SIP Stack */
		algo.isAKAVersion = RV_FALSE;
		RV_UNUSED_ARG(pcb_pointer);
		return algo;
	
}
#define ag_rp_359(PCB_POINTER) (SIP_BEGIN_TOKEN())
static ParserAlgorithm ag_rp_360(PCB_DECL) {
/* Line 4004, RV SIP Stack */
        ParserAlgorithm algo;
        algo.eAlgorithm = RVSIP_AUTH_ALGORITHM_MD5;
		algo.algorithm.buf = NULL;
		algo.algorithm.len = 0;
		algo.nAKAVersion.buf = NULL;
		algo.nAKAVersion.len = 0;
		algo.isAKAVersion = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return algo;
    
}
static ParserAlgorithm ag_rp_361(PCB_DECL, ParserBasicToken t) {
/* Line 4016, RV SIP Stack */
        ParserAlgorithm algo;
        algo.eAlgorithm = RVSIP_AUTH_ALGORITHM_OTHER;
        algo.algorithm = t;
		algo.nAKAVersion.buf = NULL;
		algo.nAKAVersion.len = 0;
		algo.isAKAVersion = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return algo;
    
}
#define ag_rp_362(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_AKAV))
#define ag_rp_363(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_ALGORITHM))
#define ag_rp_364(PCB_POINTER) (CUR_STRING())
#define ag_rp_365(PCB_POINTER, qvList) (qvList)
static ParserQopValue ag_rp_366(PCB_DECL, ParserAuthQopOptions val) {
/* Line 4056, RV SIP Stack */
        ParserQopValue qop;
        qop.eAuthQop = RVSIP_AUTH_QOP_OTHER;
        qop.isOther  = RV_FALSE;
		qop.qop = NULL;
		
        if (RV_TRUE == val.isAuth)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_ONLY;    
        }
        else if (RV_TRUE == val.isAuthInt)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == val.isOther)
        {
            if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
            {
                APPEND_DATA(",", 1,PCB.pExtParams);
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop =  PCB.pExtParams;
            }
            else
            {
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop = PCB.pExtParams;
            }        
        }      
        return qop;        
    
}
static ParserQopValue ag_rp_367(PCB_DECL, ParserQopValue qop, ParserAuthQopOptions val) {
/* Line 4092, RV SIP Stack */
        if (RV_TRUE == val.isAuth && 
            RVSIP_AUTH_QOP_AUTHINT_ONLY == qop.eAuthQop)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_AND_AUTHINT;    
        }
        else if (RV_TRUE == val.isAuth)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_ONLY;    
        }
        else if (RV_TRUE == val.isAuthInt &&
                 RVSIP_AUTH_QOP_AUTH_ONLY == qop.eAuthQop)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTH_AND_AUTHINT;
        }
        else if (RV_TRUE == val.isAuthInt)
        {
            qop.eAuthQop = RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == val.isOther)
        {
            if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
            {
                APPEND_DATA(",", 1,PCB.pExtParams);
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop =  PCB.pExtParams;
            }
            else
            {
                
                APPEND_DATA(val.strOther.buf, val.strOther.len,PCB.pExtParams);
                qop.isOther = RV_TRUE;
                qop.qop = PCB.pExtParams;
            }        
        }
        return qop;
    
}
static ParserAuthQopOptions ag_rp_368(PCB_DECL) {
/* Line 4137, RV SIP Stack */
        ParserAuthQopOptions qopOption;
        qopOption.isAuthInt = RV_TRUE;
        qopOption.isAuth    = RV_FALSE; 
        qopOption.isOther   = RV_FALSE;
		qopOption.strOther.buf = NULL;
		qopOption.strOther.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return qopOption;
    
}
static ParserAuthQopOptions ag_rp_369(PCB_DECL) {
/* Line 4148, RV SIP Stack */
        ParserAuthQopOptions qopOption;
        qopOption.isAuth = RV_TRUE;
        qopOption.isAuthInt = RV_FALSE; 
        qopOption.isOther   = RV_FALSE;
		qopOption.strOther.buf = NULL;
		qopOption.strOther.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return qopOption;
    
}
static ParserAuthQopOptions ag_rp_370(PCB_DECL, ParserBasicToken t) {
/* Line 4160, RV SIP Stack */
        ParserAuthQopOptions qopOption;
        qopOption.isOther = RV_TRUE;
        qopOption.isAuthInt = RV_FALSE;
        qopOption.isAuth    = RV_FALSE; 
        qopOption.strOther = t;
        RV_UNUSED_ARG(pcb_pointer);
        return qopOption;
    
}
#define ag_rp_371(PCB_POINTER, ik) (ik)
#define ag_rp_372(PCB_POINTER, ck) (ck)
#define ag_rp_373(PCB_POINTER) (CUR_STRING())
#define ag_rp_374(PCB_POINTER) (CUR_STRING())
#define ag_rp_375(PCB_POINTER) (CUR_STRING())
#define ag_rp_376(PCB_POINTER) (CUR_STRING())
#define ag_rp_377(PCB_POINTER) (CUR_STRING())
static void ag_rp_378(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 4202, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(",", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
      else
      {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
   
}
static void ag_rp_379(PCB_DECL) {
/* Line 4229, RV SIP Stack */
   
          RvStatus status; 
          status = ParserInitAuthorization(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.authorization),PCB.eHeaderType,PCB.eWhichHeader,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
               
               PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
               PCB.eStat = status;
          }
          ParserCleanExtParams (PCB.pExtParams);
          ParserCleanExtParams (PCB.pUrlExtParams);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_AUTHORIZATION, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_DIGEST_CHALLENGE, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
          ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_380(PCB_DECL) {
/* Line 4260, RV SIP Stack */
        
        PCB.authorization.eAuthScheme = RVSIP_AUTH_SCHEME_DIGEST;  
        PCB.authorization.isAuthParamList = RV_FALSE;
    
}
static void ag_rp_381(PCB_DECL, ParserBasicToken authScheme) {
/* Line 4266, RV SIP Stack */
        
        PCB.authorization.eAuthScheme			= RVSIP_AUTH_SCHEME_OTHER;
        PCB.authorization.authScheme			= authScheme; 
        PCB.authorization.isUsername			= RV_FALSE;
        PCB.authorization.isRealm				= RV_FALSE;
        PCB.authorization.isNonce				= RV_FALSE;
        PCB.authorization.isResponse			= RV_FALSE;
        PCB.authorization.algorithm.eAlgorithm	= RVSIP_AUTH_ALGORITHM_UNDEFINED;   
        PCB.authorization.isCnonce				= RV_FALSE;
        PCB.authorization.isOpaque				= RV_FALSE;
        PCB.authorization.isNonceCount			= RV_FALSE;
        PCB.authorization.eAuthQop				= RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authorization.isAuthParam			= RV_FALSE;
		PCB.authorization.isAuts				= RV_FALSE;
		PCB.authorization.algorithm.isAKAVersion= RV_FALSE;
		PCB.authorization.eProtected			= RVSIP_AUTH_INTEGRITY_PROTECTED_UNDEFINED;
        PCB.authorization.isAuthParamList = RV_TRUE;
        PCB.authorization.authParamList = PCB.pExtParams;
    
}
static void ag_rp_382(PCB_DECL) {
/* Line 4296, RV SIP Stack */
      
        PCB.authorization.isUsername			= RV_FALSE;
        PCB.authorization.isRealm				= RV_FALSE;
        PCB.authorization.isNonce				= RV_FALSE;
        PCB.authorization.isResponse			= RV_FALSE;
        PCB.authorization.algorithm.eAlgorithm	= RVSIP_AUTH_ALGORITHM_UNDEFINED;   
        PCB.authorization.isCnonce				= RV_FALSE;
        PCB.authorization.isOpaque				= RV_FALSE;
        PCB.authorization.isNonceCount			= RV_FALSE;
        PCB.authorization.eAuthQop				= RVSIP_AUTH_QOP_UNDEFINED;
        PCB.authorization.isAuthParam			= RV_FALSE;
		PCB.authorization.isAuts				= RV_FALSE;
		PCB.authorization.algorithm.isAKAVersion= RV_FALSE;
		PCB.authorization.eProtected			= RVSIP_AUTH_INTEGRITY_PROTECTED_UNDEFINED;
        switch (PCB.digestChallenge.eType)
        {
             case PARSER_DIGEST_TYPE_USERNAME:
            {
                PCB.authorization.isUsername = RV_TRUE;
                PCB.authorization.userName = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_REALM:
            {
                PCB.authorization.isRealm = RV_TRUE;
                PCB.authorization.realm = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE:
            {
                PCB.authorization.isNonce = RV_TRUE;
                PCB.authorization.nonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_URI:
            {
                PCB.authorization.isUri = RV_TRUE;
                PCB.authorization.hDigestUri = PCB.digestChallenge.uri;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_RESPONSE:
            {
                PCB.authorization.isResponse = RV_TRUE;
                PCB.authorization.response = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_ALGORITHM:
            {
                PCB.authorization.algorithm = PCB.digestChallenge.algorithm;
                break;
            }
            case PARSER_DIGEST_TYPE_CNONCE:
            {
                PCB.authorization.isCnonce = RV_TRUE;
                PCB.authorization.cnonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPAQUE:
            {
                PCB.authorization.isOpaque = RV_TRUE;
                PCB.authorization.opaque = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE_COUNT:
            {
                PCB.authorization.isNonceCount = RV_TRUE;
                PCB.authorization.nonceCount = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_MESSAGE_QOP:
            {
                PCB.authorization.eAuthQop = PCB.digestChallenge.qopVal.eAuthQop;
                break;
            }
            case PARSER_DIGEST_TYPE_AUTH_PARAM:
            {
                PCB.authorization.isAuthParam = RV_TRUE;
                PCB.authorization.authParam = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_AUTS:
            {
                PCB.authorization.isAuts = RV_TRUE;
                PCB.authorization.auts = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_INTEGRITY_PROTECTED:
            {
                PCB.authorization.eProtected = PCB.digestChallenge.eProtected;
                break;
            }
            default:
				PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
				PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
        }
    
}
static void ag_rp_383(PCB_DECL) {
/* Line 4395, RV SIP Stack */
        switch (PCB.digestChallenge.eType)
        {
             case PARSER_DIGEST_TYPE_USERNAME:
            {
                PCB.authorization.isUsername = RV_TRUE;
                PCB.authorization.userName = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_REALM:
            {
                PCB.authorization.isRealm = RV_TRUE;
                PCB.authorization.realm = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE:
            {
                PCB.authorization.isNonce = RV_TRUE;
                PCB.authorization.nonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_URI:
            {
                PCB.authorization.isUri = RV_TRUE;
                PCB.authorization.hDigestUri = PCB.digestChallenge.uri;
                break;
            }
            case PARSER_DIGEST_TYPE_DIGEST_RESPONSE:
            {
                PCB.authorization.isResponse = RV_TRUE;
                PCB.authorization.response = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_ALGORITHM:
            {
                PCB.authorization.algorithm = PCB.digestChallenge.algorithm;
                break;
            }
            case PARSER_DIGEST_TYPE_CNONCE:
            {
                PCB.authorization.isCnonce = RV_TRUE;
                PCB.authorization.cnonce = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_OPAQUE:
            {
                PCB.authorization.isOpaque = RV_TRUE;
                PCB.authorization.opaque = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_NONCE_COUNT:
            {
                PCB.authorization.isNonceCount = RV_TRUE;
                PCB.authorization.nonceCount = PCB.digestChallenge.challenge;
                break;
            }
            case PARSER_DIGEST_TYPE_MESSAGE_QOP:
            {
                PCB.authorization.eAuthQop = PCB.digestChallenge.qopVal.eAuthQop;
                break;
            }
            case PARSER_DIGEST_TYPE_AUTH_PARAM:
            {
                PCB.authorization.isAuthParam = RV_TRUE;
                PCB.authorization.authParam = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_AUTS:
            {
                PCB.authorization.isAuts = RV_TRUE;
                PCB.authorization.auts = PCB.digestChallenge.challenge;
                break;
            }
			case PARSER_DIGEST_TYPE_INTEGRITY_PROTECTED:
            {
                PCB.authorization.eProtected = PCB.digestChallenge.eProtected;
                break;
            }
            default:
                    PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                    PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;
        }
    
}
#define ag_rp_384(PCB_POINTER, useranme) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_USERNAME, useranme))
#define ag_rp_385(PCB_POINTER, realm) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_REALM, realm))
#define ag_rp_386(PCB_POINTER, nonce) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_NONCE, nonce))
#define ag_rp_387(PCB_POINTER, response) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_DIGEST_RESPONSE, response))
#define ag_rp_388(PCB_POINTER, cnonce) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_CNONCE, cnonce))
#define ag_rp_389(PCB_POINTER, opaque) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_OPAQUE, opaque))
#define ag_rp_390(PCB_POINTER, nonceCount) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_NONCE_COUNT, nonceCount))
#define ag_rp_391(PCB_POINTER, authParam) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_AUTH_PARAM, authParam))
#define ag_rp_392(PCB_POINTER, auts) (CUR_AUTH_CHALLENGE(PARSER_DIGEST_TYPE_AUTS, auts))
static void ag_rp_393(PCB_DECL, RvSipAuthIntegrityProtected protected) {
/* Line 4490, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_INTEGRITY_PROTECTED;
        PCB.digestChallenge.eProtected = protected;
    
}
static void ag_rp_394(PCB_DECL, RvSipAuthQopOption messageQop) {
/* Line 4495, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_MESSAGE_QOP;
        PCB.digestChallenge.qopVal.eAuthQop = messageQop;
    
}
static void ag_rp_395(PCB_DECL) {
/* Line 4500, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_DIGEST_URI;
        PCB.digestChallenge.uri = PCB.exUri;
    
}
static void ag_rp_396(PCB_DECL, ParserAlgorithm algorithm) {
/* Line 4505, RV SIP Stack */
        PCB.digestChallenge.eType = PARSER_DIGEST_TYPE_ALGORITHM;
        
        if(PCB.digestChallenge.algorithm.eAlgorithm == RVSIP_AUTH_ALGORITHM_UNDEFINED)
        {
            PCB.digestChallenge.algorithm = algorithm;
        }
    
}
#define ag_rp_397(PCB_POINTER, username) (username)
#define ag_rp_398(PCB_POINTER, t) (t)
static RvSipAuthQopOption ag_rp_399(PCB_DECL, ParserAuthQopOptions qopVal) {
/* Line 4544, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
        if (RV_TRUE == qopVal.isAuth)
        {
            return RVSIP_AUTH_QOP_AUTH_ONLY;
        }
        else if (RV_TRUE == qopVal.isAuthInt)
        {
            return RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == qopVal.isOther)
        {
            return RVSIP_AUTH_QOP_OTHER;
        }
        else 
        {
             return RVSIP_AUTH_QOP_UNDEFINED;
        }
    
}
#define ag_rp_400(PCB_POINTER, cnonceVal) (cnonceVal)
#define ag_rp_401(PCB_POINTER, nonceVal) (nonceVal)
#define ag_rp_402(PCB_POINTER, ncVal) (ncVal)
#define ag_rp_403(PCB_POINTER) (CUR_STRING())
#define ag_rp_404(PCB_POINTER) (CUR_STRING())
#define ag_rp_405(PCB_POINTER) (CUR_STRING())
#define ag_rp_406(PCB_POINTER) (CUR_STRING())
#define ag_rp_407(PCB_POINTER) (CUR_STRING())
#define ag_rp_408(PCB_POINTER) (CUR_STRING())
#define ag_rp_409(PCB_POINTER) (CUR_STRING())
#define ag_rp_410(PCB_POINTER) (CUR_STRING())
#define ag_rp_411(PCB_POINTER, requestDigest) (requestDigest)
#define ag_rp_412(PCB_POINTER) (CUR_STRING())
#define ag_rp_413(PCB_POINTER) (CUR_STRING())
#define ag_rp_414(PCB_POINTER, autsValue) (autsValue)
#define ag_rp_415(PCB_POINTER) (CUR_STRING())
#define ag_rp_416(PCB_POINTER) (RVSIP_AUTH_INTEGRITY_PROTECTED_NO)
#define ag_rp_417(PCB_POINTER) (RVSIP_AUTH_INTEGRITY_PROTECTED_YES)
static void ag_rp_418(PCB_DECL) {
/* Line 4663, RV SIP Stack */
         RvStatus status;
         status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_419(PCB_DECL) {
/* Line 4686, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_420(PCB_DECL) {
/* Line 4713, RV SIP Stack */
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_FALSE;
        PCB.route.eRouteType = PCB.eWhichHeader;
    
}
static void ag_rp_421(PCB_DECL) {
/* Line 4718, RV SIP Stack */
 
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_TRUE;
        PCB.route.eRouteType = PCB.eWhichHeader;
          
         if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
         {
             PCB.route.routeParams = PCB.pExtParams;
         }                
     
}
static void ag_rp_422(PCB_DECL) {
/* Line 4744, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitRetryAfterHeader(PCB.pParserMgr,PCB.pointer,&(PCB.retryAfter),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
        
         ParserCleanExtParams (PCB.pExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RETRY_AFTER, &PCB);
    
}
static void ag_rp_423(PCB_DECL, ParserDeltaSeconds delta, ParserRetryParam param) {
/* Line 4769, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_424(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4779, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_425(PCB_DECL, ParserSipDate date, ParserRetryParam param) {
/* Line 4790, RV SIP Stack */
        PCB.retryAfter.sipDate   = date;
        PCB.retryAfter.isSipDate = RV_TRUE;
        if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
        PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_426(PCB_DECL, ParserSipDate date) {
/* Line 4801, RV SIP Stack */
         PCB.retryAfter.sipDate   = date;
         PCB.retryAfter.isSipDate = RV_TRUE;
         
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_427(PCB_DECL, ParserBasicToken comment) {
/* Line 4816, RV SIP Stack */
        PCB.retryAfter.comment = comment;
        PCB.retryAfter.isComment = RV_TRUE;
    
}
static ParserRetryParam ag_rp_428(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4824, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_TRUE;
        param.deltaSeconds   = delta;
        param.genericParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return param;
    
}
static ParserRetryParam ag_rp_429(PCB_DECL) {
/* Line 4833, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_FALSE;
		param.deltaSeconds.buf = NULL;
		param.deltaSeconds.len = 0;
        param.genericParams = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             param.genericParams=PCB.pExtParams;
        }
        return param;
    
}
static ParserRetryParam ag_rp_430(PCB_DECL, ParserRetryParam params, ParserDeltaSeconds delta) {
/* Line 4847, RV SIP Stack */
        params.isDeltaSeconds = RV_TRUE;
        params.deltaSeconds   = delta;   
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserRetryParam ag_rp_431(PCB_DECL, ParserRetryParam params) {
/* Line 4854, RV SIP Stack */
        params.genericParams  = NULL;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            params.genericParams = PCB.pExtParams;
        }    
        return params;
    
}
#define ag_rp_432(PCB_POINTER, delta) (delta)
static void ag_rp_433(PCB_DECL, ParserRSeq rseq) {
/* Line 4880, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRSeq(PCB.pParserMgr,PCB.pointer,&rseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
#define ag_rp_434(PCB_POINTER, responseNum) (responseNum)
#define ag_rp_435(PCB_POINTER) (CUR_STRING())
static void ag_rp_436(PCB_DECL) {
/* Line 4918, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRack(PCB.pParserMgr,PCB.pointer,&(PCB.rack),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RACK, &PCB);
    
}
static void ag_rp_437(PCB_DECL, ParserResponseNum responseNum, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 4940, RV SIP Stack */
		PCB.rack.method = method;
		PCB.rack.sequenceNumber = sequenceNumber;
        PCB.rack.responseNum = responseNum;
	 
}
#define ag_rp_438(PCB_POINTER, t) (t)
static void ag_rp_439(PCB_DECL, ParserBasicToken tag) {
/* Line 4956, RV SIP Stack */
 
          RvStatus       status; 
          ParserOptionTag option; 
          option.headerType = PCB.eWhichHeader;
          option.optionTag = tag;
          status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
              
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
           
          ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_440(PCB_DECL, ParserBasicToken opTag) {
/* Line 4980, RV SIP Stack */
 
           RvStatus       status;
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag = opTag;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
           }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_441(PCB_DECL) {
/* Line 5005, RV SIP Stack */
 
           RvStatus       status; 
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag.len = 0;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
			  PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
		   }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_442(PCB_DECL) {
/* Line 5064, RV SIP Stack */
         RvStatus status;
         status = ParserInitReferTo(PCB.pParserMgr,PCB.pointer,&(PCB.referTo),PCB.eHeaderType,PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REFER_TO, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_443(PCB_DECL) {
/* Line 5090, RV SIP Stack */
        PCB.referTo.nameAddr.exUri = PCB.exUri;
        PCB.referTo.nameAddr.isDisplayName = RV_FALSE;
        PCB.referTo.isCompact = PCB.isCompactForm;
        PCB.referTo.isExtention = RV_FALSE;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            PCB.referTo.exten = PCB.pExtParams;
            PCB.referTo.isExtention = RV_TRUE;
        }
    
}
static void ag_rp_444(PCB_DECL) {
/* Line 5102, RV SIP Stack */
 
	  PCB.referTo.nameAddr = PCB.nameAddr;
      PCB.referTo.isCompact = PCB.isCompactForm;
      PCB.referTo.isExtention = RV_FALSE;
      
      if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
      {
          PCB.referTo.exten = PCB.pExtParams;
          PCB.referTo.isExtention = RV_TRUE;
      }
	
}
static void ag_rp_445(PCB_DECL) {
/* Line 5135, RV SIP Stack */
         RvStatus status;
         status = ParserInitRefferredBy(PCB.pParserMgr,PCB.pointer,&(PCB.referredBy),PCB.eHeaderType,PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REFERRED_BY, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_446(PCB_DECL) {
/* Line 5161, RV SIP Stack */
        PCB.referredBy.referrerAddrSpec = PCB.nameAddr;
        PCB.referredBy.isCompact = PCB.isCompactForm;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            PCB.referredBy.genericParams = PCB.pExtParams;
        } 
    
}
static void ag_rp_447(PCB_DECL) {
/* Line 5172, RV SIP Stack */
 
        PCB.referredBy.genericParams = NULL;
	
}
static void ag_rp_448(PCB_DECL) {
/* Line 5179, RV SIP Stack */
 
        PCB.nameAddr.isDisplayName = RV_FALSE; 
        PCB.nameAddr.exUri = PCB.exUri;
        PCB.referredBy.genericParams = NULL;
	
}
static void ag_rp_449(PCB_DECL, ParserQuotedString cid) {
/* Line 5192, RV SIP Stack */
 
        PCB.referredBy.isCid = RV_TRUE;
        PCB.referredBy.cidParam = cid;
    
}
static void ag_rp_450(PCB_DECL) {
/* Line 5197, RV SIP Stack */
  
        PCB.referredBy.genericParams = PCB.pExtParams;     
    
}
#define ag_rp_451(PCB_POINTER, cid) (cid)
#define ag_rp_452(PCB_POINTER) (CUR_STRING())
static void ag_rp_453(PCB_DECL) {
/* Line 5231, RV SIP Stack */
        RvStatus status;
        PCB.event.isCompact = PCB.isCompactForm;
        status = ParserInitEvent(PCB.pParserMgr,PCB.pointer,&(PCB.event), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EVENT_HEADER, &PCB);
        
     
}
static void ag_rp_454(PCB_DECL, ParserEventType type) {
/* Line 5255, RV SIP Stack */
        PCB.event.isEventParams = RV_TRUE;
        PCB.event.eventType = type;
    
}
static void ag_rp_455(PCB_DECL, ParserEventType type) {
/* Line 5260, RV SIP Stack */
        PCB.event.isEventParams = RV_FALSE;
        PCB.event.eventType = type;
    
}
static ParserEventType ag_rp_456(PCB_DECL, ParserBasicToken package, ParserBasicToken eventTemplate) {
/* Line 5268, RV SIP Stack */
        ParserEventType evType;
        evType.package = package;
        evType.isTemplate = RV_TRUE;
        evType.templateVal = eventTemplate;
        RV_UNUSED_ARG(pcb_pointer);
        return evType;
    
}
static ParserEventType ag_rp_457(PCB_DECL, ParserBasicToken package) {
/* Line 5277, RV SIP Stack */
        ParserEventType evType;
        evType.package = package;
        evType.isTemplate = RV_FALSE;
		evType.templateVal.buf = NULL;
		evType.templateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return evType;
    
}
#define ag_rp_458(PCB_POINTER, t) (t)
#define ag_rp_459(PCB_POINTER, t) (t)
static void ag_rp_460(PCB_DECL, ParserBasicToken id) {
/* Line 5300, RV SIP Stack */
 
        PCB.event.eventParams.isEventId = RV_TRUE;
        PCB.event.eventParams.eventId = id;
    
}
static void ag_rp_461(PCB_DECL) {
/* Line 5305, RV SIP Stack */
  
        PCB.event.eventParams.isExtention = RV_TRUE;
        PCB.event.eventParams.exten = PCB.pExtParams;
                         
    
}
#define ag_rp_462(PCB_POINTER, idVal) (idVal)
static void ag_rp_463(PCB_DECL, ParserEventType type) {
/* Line 5334, RV SIP Stack */
        ParserAllowEvents allowEvents;
        RvStatus         status;
        allowEvents.eventType = type;
        allowEvents.isCompact = PCB.isCompactForm;
        status = ParserInitAllowEvents(PCB.pParserMgr,&PCB,PCB.pointer,&allowEvents,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        
    
}
static void ag_rp_464(PCB_DECL, ParserEventType type) {
/* Line 5356, RV SIP Stack */
        RvStatus status;
        ParserAllowEvents allowEvents;
        
        allowEvents.eventType = type;
        allowEvents.isCompact = PCB.isCompactForm;
        status = ParserInitAllowEvents(PCB.pParserMgr,&PCB,PCB.pointer,&allowEvents,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        
    
}
static void ag_rp_465(PCB_DECL) {
/* Line 5388, RV SIP Stack */
        RvStatus status;
        status = ParserInitSubsState(PCB.pParserMgr,PCB.pointer,&(PCB.subsState), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
		{
			PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
			SYNTAX_ERROR;
		}
		else if (RV_OK != status)
		{
			
			PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
			PCB.eStat = status;
		}
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SUBS_STATE_HEADER, &PCB);
     
}
static void ag_rp_466(PCB_DECL, ParserSubsStateValue value) {
/* Line 5408, RV SIP Stack */
            PCB.subsState.substateValue = value;
            PCB.subsState.isParams = RV_TRUE;
        
}
static void ag_rp_467(PCB_DECL, ParserSubsStateValue value) {
/* Line 5413, RV SIP Stack */
            PCB.subsState.substateValue = value;
            PCB.subsState.isParams = RV_FALSE;
        
}
static ParserSubsStateValue ag_rp_468(PCB_DECL) {
/* Line 5420, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_ACTIVE;
		val.otherSubstateVal.buf = NULL;
		val.otherSubstateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static ParserSubsStateValue ag_rp_469(PCB_DECL) {
/* Line 5429, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_PENDING;
		val.otherSubstateVal.buf = NULL;
		val.otherSubstateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static ParserSubsStateValue ag_rp_470(PCB_DECL) {
/* Line 5438, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_TERMINATED;
		val.otherSubstateVal.buf = NULL;
		val.otherSubstateVal.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static ParserSubsStateValue ag_rp_471(PCB_DECL, ParserBasicToken t) {
/* Line 5447, RV SIP Stack */
 
        ParserSubsStateValue val;
        val.substateVal = PARSER_SUBS_STATE_VAL_OTHER;
        val.otherSubstateVal = t;
        RV_UNUSED_ARG(pcb_pointer);
        return val;
    
}
static void ag_rp_472(PCB_DECL, ParserSubsStateReason reason) {
/* Line 5462, RV SIP Stack */
 
        PCB.subsState.substateParams.isReason    = RV_TRUE;
        PCB.subsState.substateParams.eReasonType = reason.substateReason;
        PCB.subsState.substateParams.otherReason = reason.otherSubstateReason;
    
}
static void ag_rp_473(PCB_DECL, ParserBasicToken retryAfter) {
/* Line 5468, RV SIP Stack */
 
        PCB.subsState.substateParams.isRetryAfter = RV_TRUE;
        PCB.subsState.substateParams.retryAfter = retryAfter;
                
    
}
static void ag_rp_474(PCB_DECL, ParserBasicToken expires) {
/* Line 5474, RV SIP Stack */
 
        PCB.subsState.substateParams.isExpires = RV_TRUE;
        PCB.subsState.substateParams.expires = expires;
    
}
static void ag_rp_475(PCB_DECL) {
/* Line 5479, RV SIP Stack */
  
        PCB.subsState.substateParams.isExtention = RV_TRUE;
        PCB.subsState.substateParams.exten = PCB.pExtParams;
                 
    
}
#define ag_rp_476(PCB_POINTER, retryAfter) (retryAfter)
#define ag_rp_477(PCB_POINTER, expires) (expires)
#define ag_rp_478(PCB_POINTER, reasonVal) (reasonVal)
#define ag_rp_479(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_DEACTIVATED))
#define ag_rp_480(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_PROBATION))
#define ag_rp_481(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_REJECTED))
#define ag_rp_482(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_TIMEOUT))
#define ag_rp_483(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_GIVEUP))
#define ag_rp_484(PCB_POINTER) (CUR_SUBS_STATE_REASON(PARSER_SUBS_STATE_REASON_NORESOURCE))
static ParserSubsStateReason ag_rp_485(PCB_DECL, ParserBasicToken t) {
/* Line 5507, RV SIP Stack */
        ParserSubsStateReason reason;
        reason.substateReason = PARSER_SUBS_STATE_REASON_OTHER;
        reason.otherSubstateReason = t;
        RV_UNUSED_ARG(pcb_pointer);
        return reason;
     
}
static void ag_rp_486(PCB_DECL) {
/* Line 5536, RV SIP Stack */
            RvStatus status;
            status = ParserInitContentDisposition(PCB.pParserMgr,PCB.pointer,&(PCB.contentDisposition), PCB.eHeaderType, PCB.pSipObject);
            if(RV_ERROR_ILLEGAL_SYNTAX == status)
			{
				PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
				SYNTAX_ERROR;
			}
			else if (RV_OK != status)
            {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
            }
            ParserCleanExtParams (PCB.pExtParams);
            ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_DISPOSITION, &PCB);
         
}
static void ag_rp_487(PCB_DECL, ParserDisposition type, ParserDispositionParams params) {
/* Line 5556, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams = params;
    
}
static void ag_rp_488(PCB_DECL, ParserDisposition type) {
/* Line 5561, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN;
        PCB.contentDisposition.dispositionParams.isGenericParam = RV_FALSE;
    
}
#define ag_rp_489(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_RENDER))
#define ag_rp_490(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SESSION))
#define ag_rp_491(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ICON))
#define ag_rp_492(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ALERT))
#define ag_rp_493(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SIGNAL))
static ParserDisposition ag_rp_494(PCB_DECL, ParserBasicToken otherType) {
/* Line 5576, RV SIP Stack */
        ParserDisposition disposition;
        disposition.eDispositionType = PARSER_DISPOSITION_TYPE_OTHER;
        disposition.otherDispositionType = otherType;
        RV_UNUSED_ARG(pcb_pointer);
        return disposition;
    
}
static ParserDispositionParams ag_rp_495(PCB_DECL, ParserDispositionParam param) {
/* Line 5587, RV SIP Stack */
        ParserDispositionParams params;
        params.handlingParam    = param;
        params.genericParamList = NULL;
        params.isGenericParam = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParams ag_rp_496(PCB_DECL) {
/* Line 5597, RV SIP Stack */
        ParserDispositionParams params;
		
		params.isGenericParam = RV_TRUE;
		params.genericParamList = NULL;
		params.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.handlingParam.otherHandlingParam.buf = NULL;
		params.handlingParam.otherHandlingParam.len = 0;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             params.genericParamList=PCB.pExtParams;
        }
        
        return params;
    
}
static ParserDispositionParams ag_rp_497(PCB_DECL, ParserDispositionParams ps, ParserDispositionParam p) {
/* Line 5615, RV SIP Stack */
        if (p.eParam != PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN)
        {
            ps.handlingParam = p;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ps;
    
}
static ParserDispositionParams ag_rp_498(PCB_DECL, ParserDispositionParams ps) {
/* Line 5624, RV SIP Stack */
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             ps.genericParamList=PCB.pExtParams;
        }
        ps.isGenericParam = RV_TRUE;
        return ps;
    
}
static ParserDispositionParam ag_rp_499(PCB_DECL) {
/* Line 5637, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OPTIONAL;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_500(PCB_DECL) {
/* Line 5646, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_REQUIRED;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_501(PCB_DECL, ParserBasicToken other) {
/* Line 5655, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.otherHandlingParam = other;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static void ag_rp_502(PCB_DECL, ParserSessionExpiresHeader sessionExpires) {
/* Line 5674, RV SIP Stack */
        RvStatus status;
        sessionExpires.isCompact = PCB.isCompactForm;
        status = ParserInitSessionExpiresHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
												PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserSessionExpiresHeader ag_rp_503(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5696, RV SIP Stack */
 
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
        sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
		RV_UNUSED_ARG(pcb_pointer);
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_504(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5708, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_505(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5723, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_506(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5739, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
#define ag_rp_507(PCB_POINTER, refType) (refType)
#define ag_rp_508(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAC)
#define ag_rp_509(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAS)
static void ag_rp_510(PCB_DECL, ParserMinSEHeader sessionExpires) {
/* Line 5779, RV SIP Stack */
       RvStatus status;
       status = ParserInitMinSEHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
                                      PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
       ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserMinSEHeader ag_rp_511(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5799, RV SIP Stack */
 
        ParserMinSEHeader minSE;
		minSE.deltaSeconds = delta;
        minSE.isExtention = RV_FALSE;
		minSE.exten = NULL;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            minSE.exten = PCB.pExtParams;
            minSE.isExtention = RV_TRUE;
        }
        return minSE;
    
}
static void ag_rp_512(PCB_DECL, ParserCallId callId) {
/* Line 5834, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, &(PCB.replacesParams), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_513(PCB_DECL, ParserCallId callId) {
/* Line 5853, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, NULL, PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_514(PCB_DECL) {
/* Line 5875, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_515(PCB_DECL) {
/* Line 5896, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_516(PCB_DECL, ParserTagParam toTag) {
/* Line 5919, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_TO_TAG; 
	  PCB.replacesParam.paramVal = toTag;
        
    
}
static void ag_rp_517(PCB_DECL, ParserTagParam fromTag) {
/* Line 5925, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_FROM_TAG; 
	  PCB.replacesParam.paramVal = fromTag;
    
}
static void ag_rp_518(PCB_DECL, ParserReplacesEarlyFlagParamType earlyFlag) {
/* Line 5931, RV SIP Stack */
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG; 
      PCB.replacesParam.eEarlyFlagType = earlyFlag;
    
}
static void ag_rp_519(PCB_DECL) {
/* Line 5935, RV SIP Stack */
 
      PCB.replacesParam.paramType  = PARSER_REPLACES_PARAM_TYPE_OTHER; 
      PCB.replacesParam.isOther    = RV_TRUE;
	  PCB.replacesParam.otherParam = PCB.pExtParams;
    
}
#define ag_rp_520(PCB_POINTER, t) (t)
#define ag_rp_521(PCB_POINTER, t) (t)
#define ag_rp_522(PCB_POINTER) (ParserReplacesEarlyFlagParam1)
#define ag_rp_523(PCB_POINTER) (ParserReplacesEarlyFlagParamTrue)
#define ag_rp_524(PCB_POINTER) (ParserReplacesEarlyFlagParamEmpty)
static void ag_rp_525(PCB_DECL) {
/* Line 5971, RV SIP Stack */
   
		RvStatus status; 
		status = ParserInitAuthenticationInfo(PCB.pParserMgr,PCB.pointer,&(PCB.auth_info),PCB.eHeaderType,PCB.pSipObject);
		if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
		{
			
			PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
			PCB.eStat = status;
		}
		ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_AUTHENTICATION_INFO,&PCB);
    
}
static void ag_rp_526(PCB_DECL, ParserBasicToken nc) {
/* Line 5995, RV SIP Stack */
		PCB.auth_info.isNonceCount  = RV_TRUE;
		PCB.auth_info.strNonceCount = nc;
	
}
static void ag_rp_527(PCB_DECL, ParserBasicToken nv) {
/* Line 6000, RV SIP Stack */
		PCB.auth_info.isNextNonce   = RV_TRUE;
		PCB.auth_info.strNextNonce  = nv;
	
}
static void ag_rp_528(PCB_DECL, ParserBasicToken cn) {
/* Line 6005, RV SIP Stack */
		PCB.auth_info.isCNonce      = RV_TRUE;
		PCB.auth_info.strCNonce     = cn;
	
}
static void ag_rp_529(PCB_DECL, ParserBasicToken rd) {
/* Line 6010, RV SIP Stack */
		PCB.auth_info.isRspAuth     = RV_TRUE;
		PCB.auth_info.strRspAuth    = rd;
	
}
static void ag_rp_530(PCB_DECL) {
/* Line 6015, RV SIP Stack */
		PCB.auth_info.isMsgQop      = RV_TRUE;
	
}
static void ag_rp_531(PCB_DECL, ParserAuthQopOptions qopVal) {
/* Line 6023, RV SIP Stack */
		if (RV_TRUE == qopVal.isAuth)
        {
            PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_AUTH_ONLY;
        }
        else if (RV_TRUE == qopVal.isAuthInt)
        {
            PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_AUTHINT_ONLY;
        }
        else if (RV_TRUE == qopVal.isOther)
        {
            PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_OTHER;
        }
        else 
        {
	    PCB.auth_info.eMsgQop = RVSIP_AUTH_QOP_UNDEFINED;
        }
		
		PCB.auth_info.strMsgQop = qopVal.strOther;
	
}
#define ag_rp_532(PCB_POINTER, nv) (nv)
#define ag_rp_533(PCB_POINTER, val) (val)
#define ag_rp_534(PCB_POINTER) (CUR_STRING())
#define READ_COUNTS 
#define WRITE_COUNTS 
#undef V
#define V(i,t) (*(t *) (&(PCB).vs[(PCB).ssx + i]))
#undef VS
#define VS(i) (PCB).vs[(PCB).ssx + i]
#ifndef GET_CONTEXT
#define GET_CONTEXT CONTEXT = (PCB).input_context
#endif
typedef enum {
  ag_action_1,
  ag_action_2,
  ag_action_3,
  ag_action_4,
  ag_action_5,
  ag_action_6,
  ag_action_7,
  ag_action_8,
  ag_action_9,
  ag_action_10,
  ag_action_11,
  ag_action_12
} ag_parser_action;
#ifndef NULL_VALUE_INITIALIZER
#define NULL_VALUE_INITIALIZER = { 0 }
#endif
static SipParser_vs_type const ag_null_value NULL_VALUE_INITIALIZER;
static const unsigned short ag_rpx[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  1,  2,  3,  4,  5,  0,  0,  6,  7,  8,  9, 10, 11, 12, 13, 14,
   15, 16,  0,  0, 17,  0,  0, 18,  0,  0, 19,  0,  0, 20,  0,  0,  0,  0,
    0, 21,  0,  0,  0,  0,  0, 22,  0,  0,  0,  0, 23, 24, 25, 26, 27, 28,
   29, 30, 31, 32, 33, 34, 35,  0,  0, 36, 37, 38, 39, 40, 41, 42, 43, 44,
    0, 45, 46, 47, 48, 49, 50, 51,  0, 52, 53, 54, 55, 56, 57, 58, 59, 60,
   61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
    0,  0, 79, 80, 81, 82,  0,  0, 83, 84, 85,  0,  0,  0,  0,  0,  0, 86,
   87,  0, 88, 89,  0, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,
  103,104,105,106,107,108,109,110,111,112,113,114,115,116,  0,117,118,119,
  120,  0,  0,121,122,123,124,125,126,  0,127,128,129,130,131,132,133,134,
  135,136,  0,  0,137,138,139,140,  0,141,142,  0,  0,143,144,  0,  0,145,
    0,  0,146,147,148,149,  0,150,151,152,153,154,155,156,157,158,159,160,
    0,  0,  0,  0,161,162,163,164,  0,165,166,  0,167,168,169,170,171,172,
  173,  0,  0,174,175,  0,  0,  0,  0,  0,  0,176,177,178,179,180,181,182,
    0,  0,183,184,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,185,186,187,188,189,190,191,192,193,194,195,
  196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,  0,  0,  0,
    0,211,212,213,214,215,216,  0,  0,  0,  0,  0,217,218,219,220,221,222,
  223,  0,  0,224,  0,  0,  0,  0,  0,225,226,227,228,229,230,231,232,233,
  234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,
  252,253,254,  0,  0,  0,  0,  0,255,256,257,258,259,260,261,  0,262,  0,
    0,263,264,265,266,267,268,  0,  0,269,270,271,272,273,  0,  0,274,275,
    0,  0,  0,  0,276,277,278,279,  0,280,281,282,283,284,285,286,287,288,
  289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,
  307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,  0,
  324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,  0,
    0,341,342,  0,  0,343,344,345,  0,  0,  0,346,347,348,349,350,351,  0,
    0,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,
  369,370,371,372,373,374,375,376,377,  0,  0,  0,  0,378,379,  0,380,381,
  382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,  0,
    0,  0,  0,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,
    0,  0,  0,414,  0,  0,  0,  0,415,  0,  0,416,417,  0,418,419,420,421,
  422,  0,  0,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,
  438,439,440,441,  0,  0,  0,442,  0,  0,443,444,445,  0,  0,446,447,448,
    0,  0,449,450,451,452,  0,  0,  0,  0,  0,453,454,455,456,457,458,459,
    0,  0,460,461,462,  0,463,464,465,466,467,468,469,470,471,  0,  0,472,
  473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,
  491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,  0,
  508,509,510,511,  0,512,513,514,515,516,517,518,519,520,521,522,523,524,
  525,  0,  0,526,527,528,529,530,531,532,533,  0,  0,  0,  0,  0,534
};
static const unsigned char ag_key_itt[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0
};
static const unsigned short ag_key_pt[] = {
  0,  2,  0,  6,  0,  8,  0, 10,  0, 12,  0, 14,  0, 16,  0, 18,
  0, 20,  0, 22,  0, 24,  0, 26,  0, 28,  0, 30,  0, 32,  0, 34,
  0, 36,  0, 38,  0, 40,  0, 42,  0, 44,  0, 46,  0, 48,  0, 50,
  0, 52,  0, 54,  0, 56,  0, 58,  0, 62,  0,129,  0,130,  0,131,
  0,132,  0,133,  0,134,  0,135,  0,136,  0,137,  0,153,  0,154,
  0,155,  0,156,  0,157,  0,158,  0,159,  0,160,  0,161,  0,162,
  0,163,  0,164,  0,165,  0,166,  0,167,  0,168,  0,169,  0,170,
  0,171,  0,196,  0,198,  0,199,  0,200,  0,201,  0,215,  0,216,
  0,218,  0,222,  0,224,  0,225,  0,227,  0,228,  0,230,  0,318,
  0,319,  0,322,  0,323,  0,324,  0,325,  0,326,  0,327,  0,328,
  0,331,  0,332,  0,352,  0,353,  0,354,  0,355,  0,356,  0,357,
  0,358,  0,359,  0,360,  0,361,  0,362,  0,363,  0,364,  0,374,
  0,379,  0,386,  0,392,  0,394,  0,395,  0,397,  0,405,  0,406,
  0,407,  0,408,  0,409,  0,410,  0,411,  0,415,  0,416,  0,417,
  0,418,  0,419,  0,420,  0,421,  0,422,  0,423,  0,424,  0,425,
  0,426,  0,431,  0,432,  0,433,  0,450,  0,452,  0,461,  0,463,
  0,465,  0,466,  0,470,  0,479,  0,482,  0,485,  0,486,  0,487,
  0,489,  0,503,  0,505,  0,508,  0,510,  0,513,  0,518,  0,526,
  0,527,  0,528,  0,536,  0,551,  0,565,  0,570,  0,571,  0,572,
  0,577,  0,578,  0,580,  0,581,  0,582,  0,583,  0,584,  0,585,
  0,589,  0,590,  0,591,  0,592,  0,593,  0,595,  0,596,  0,597,
  0,602,  0,603,  0,604,  0,612,  0,613,  0,614,  0,620,  0,621,
0
};
static const unsigned char ag_key_ch[] = {
    0, 49, 50, 67, 69, 73, 87,255, 89,255, 65, 68, 73, 76, 79, 83, 84,255,
   86, 88,255, 77, 78,255, 83,255, 84,255, 65, 69,255, 82,255, 70, 71,255,
   65, 66, 69, 72, 75, 80, 81, 84,255, 47, 58, 83,255, 80,255, 69, 73, 80,
   83, 85,255, 82,255, 73,255, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78,
   79, 80, 82, 83, 84, 85, 86, 88,255, 32,255, 72, 85,255, 72, 82, 85,255,
   79, 86,255, 73,255, 75, 84,255, 58, 82,255, 79,255, 69, 71, 73,255, 80,
   82,255, 45,255, 72, 83,255, 68, 71, 84,255, 67, 75, 76, 80, 85,255, 65,
   79, 82, 89,255, 65, 73, 75, 78, 79,255, 65, 67,255, 69, 73, 79, 85,255,
   65, 88,255, 73, 79,255, 65, 69, 82,255, 83, 84,255, 73, 77,255, 65, 73,
  255, 58, 65,255, 84, 86,255, 67, 68, 75, 77, 78, 80,255, 76, 78,255, 65,
   85,255, 68, 82, 89,255, 83, 84,255, 65, 69, 79, 85,255, 78, 82, 84, 86,
  255, 67, 69, 79,255, 65, 84,255, 67, 80, 82,255, 66, 88,255, 65, 69, 79,
  255, 69, 72, 82,255, 79,255, 76, 83,255, 69, 82,255, 65, 67, 68, 70, 71,
   74, 78, 81, 83, 84,255, 69, 80, 83,255, 80, 83,255, 67, 78,255, 58, 83,
  255, 71, 80,255, 66, 78,255, 65, 67, 69, 73, 84, 85,255, 82, 88,255, 45,
   75,255, 65, 85,255, 65, 67, 69, 72, 73, 76, 79, 82, 84, 85,255, 67, 83,
  255, 78,255, 82,255, 69,255, 65, 68, 82, 83, 84,255, 69, 73,255, 42, 58,
   65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83,
   84, 85, 86, 87, 89,255, 58, 83,255, 80,255, 73,255, 73, 80, 83,255, 75,
   84,255, 67, 76, 80, 85,255, 65, 78,255, 58, 65,255, 67, 77, 78,255, 69,
   79, 85,255, 67, 69, 79,255, 65, 69,255, 69, 82,255, 70, 71, 78,255, 69,
   83,255, 58, 83,255, 71, 80,255, 66, 78,255, 65, 69, 73, 85,255, 82, 88,
  255, 69, 72, 85,255, 42, 65, 66, 67, 68, 70, 73, 77, 78, 80, 81, 82, 83,
   84, 86, 87,255, 67, 69,255, 67, 78, 81, 82,255, 65, 80, 84,255, 65, 85,
  255, 72, 85,255, 70, 77, 83, 84, 87,255, 80, 85,255, 69, 85,255, 65, 73,
   77, 84, 86,255, 69, 73,255, 65, 73, 82, 83,255, 70, 71,255, 69,255, 65,
   66, 67, 73, 78, 80, 82, 83,255, 68,255, 83,255, 58, 83,255, 80,255, 73,
  255, 42, 73, 80, 83,255, 58,255, 65, 69,255, 79, 82, 84,255, 67, 76, 77,
   79, 84, 85,255, 83,255, 67,255, 51, 65, 68, 73, 77, 80, 81, 82, 83,255,
   76, 85,255, 67, 79,255, 65, 83,255, 69,255, 82, 83,255, 65, 67, 73, 78,
   79, 81, 82, 85,255, 65, 67, 68, 73, 78, 79, 81, 82, 83,255, 65, 69, 81,
  255, 80, 85,255, 76, 78,255, 65, 85,255, 82, 89,255, 65,255, 65, 68, 70,
   74, 77, 78, 79, 83,255, 84,255, 45,255, 72,255, 84,255, 85,255, 65,255,
   65, 84,255, 69,255, 69, 82,255, 73,255, 69, 70, 84,255, 82,255, 72,255,
   75, 76,255, 65,255, 32, 49, 79, 84,255, 68,255, 77,255, 83,255, 73, 80,
  255, 67, 76,255, 83, 84, 85,255, 65, 79,255, 66, 86,255, 78, 89,255, 70,
   84,255, 69, 80,255, 65, 66, 67, 72, 77, 82, 84,255, 49, 84,255, 80, 82,
  255, 68, 71, 78, 80, 82, 84,255, 67, 83,255, 65,255, 85,255, 79, 82,255,
   58, 83,255, 80,255, 73,255, 83,255, 61,255, 61,255, 83, 84,255, 77,255,
   71, 85,255
};
static const unsigned char ag_key_act[] = {
  0,5,5,7,5,5,5,4,7,4,7,5,5,5,5,5,5,4,5,5,4,3,7,4,5,4,5,4,7,3,4,6,4,7,7,
  4,5,5,2,5,5,5,5,5,4,3,0,3,4,2,4,5,2,5,5,7,4,5,4,5,4,2,6,6,7,2,5,6,5,5,
  6,7,6,2,6,2,5,6,6,5,4,0,4,3,3,4,3,3,3,4,7,7,4,2,4,5,2,4,0,7,4,2,4,7,2,
  7,4,7,5,4,7,4,6,5,4,7,5,2,4,2,3,2,2,2,4,7,7,7,7,4,7,7,5,7,7,4,7,5,4,2,
  7,7,7,4,7,7,4,5,7,4,7,7,2,4,7,5,4,7,2,4,7,7,4,0,7,4,7,7,4,7,5,5,2,2,5,
  4,5,5,4,7,2,4,7,5,5,4,7,7,4,2,2,7,7,4,7,7,7,5,4,5,7,6,4,7,7,4,7,2,7,4,
  7,7,4,7,3,2,4,7,7,2,4,7,4,7,7,4,7,7,4,2,7,7,2,7,7,7,7,7,7,4,2,7,7,4,5,
  7,4,7,7,4,0,3,4,2,6,4,7,5,4,7,7,2,2,7,2,4,7,7,4,7,7,4,7,7,4,7,7,2,7,7,
  7,2,2,7,7,4,5,5,4,7,4,6,4,2,4,2,7,7,2,7,4,7,7,4,5,3,2,2,2,2,2,2,2,2,2,
  2,7,2,2,2,2,6,2,2,2,2,2,7,7,4,0,3,4,2,4,2,4,3,3,2,4,5,7,4,2,7,7,7,4,7,
  7,4,0,7,4,7,2,7,4,7,7,7,4,5,7,7,4,7,3,4,7,2,4,7,7,7,4,2,7,4,0,3,4,7,6,
  4,7,5,4,7,7,2,2,4,7,7,4,2,7,7,4,5,2,7,2,7,7,2,2,2,2,7,2,2,2,7,7,4,5,7,
  4,7,2,7,7,4,7,7,7,4,7,7,4,7,7,4,7,7,2,2,7,4,7,7,4,7,7,4,2,7,2,7,7,4,7,
  7,4,7,7,7,2,4,7,7,4,2,4,7,7,7,7,7,7,2,7,4,7,4,7,4,0,3,4,2,4,2,4,5,3,3,
  2,4,3,4,7,7,4,7,7,7,4,7,7,2,7,2,7,4,3,4,7,4,7,7,7,7,7,7,7,7,7,4,7,7,4,
  5,7,4,7,7,4,2,4,7,7,4,2,7,7,2,7,7,2,2,4,7,7,7,7,7,7,7,7,7,4,7,7,5,4,7,
  7,4,5,5,4,7,2,4,5,5,4,2,4,2,7,7,2,2,7,7,7,4,7,4,7,4,6,4,2,4,2,4,2,4,7,
  7,4,2,4,7,2,4,7,4,7,7,7,4,7,4,7,4,3,3,4,2,4,0,5,7,7,4,7,4,7,4,7,4,7,7,
  4,7,7,4,7,2,7,4,7,7,4,2,7,4,7,7,4,7,7,4,7,7,4,7,7,7,7,7,2,7,4,5,7,4,7,
  7,4,7,7,7,7,7,7,4,5,5,4,2,4,2,4,7,7,4,0,3,4,2,4,2,4,2,4,0,4,1,4,7,5,4,
  2,4,2,7,4
};
static const unsigned short ag_key_parm[] = {
    0, 18, 20, 60, 50, 54, 22,  0, 62,  0, 64, 32, 10, 12,  8,  0, 34,  0,
   48,  4,  0,264, 58,  0, 40,  0, 30,  0, 74,262,  0,  2,  0, 68, 66,  0,
   36, 46,  0, 16, 24, 42, 26, 44,  0,180,257,258,  0,  0,  0, 38,  0, 28,
   52, 72,  0, 56,  0, 14,  0,  0,178,168,  6,  0,174,166,180,188,164, 70,
  184,  0,176,  0,172,186,170,182,  0,460,  0,289,277,  0,289,261,277,  0,
  196,298,  0,  0,  0, 60,  0,  0,481,260,  0,  0,  0,326,  0,126,  0, 84,
  224,  0,266,  0,268,284,  0, 80,232,  0,  0,  0,480,  0,  0,  0,  0,112,
  108,136, 62,  0, 64,294,272,278,138,  0,308,240,  0,  0,102,250,292,  0,
  346,202,  0,214,344,  0,258,220,  0,  0,246,242,  0,316,  0,  0,330,124,
    0,264, 78,  0,286, 58,  0,324,296,270,  0,  0,148,  0,230,228,  0,218,
    0,  0,132,222,226,  0, 88,150,  0,  0,  0,206, 86,  0,252,318, 70,238,
    0,280,348,288,  0,254,332,  0,236,  0,162,  0,310,198,  0, 74,262,  0,
    0,300,146,  0,  0,264,  0,248,306,  0, 68,336,  0,  0,134,200,  0, 66,
  312,320,334,282,304,  0,  0,130,350,  0,234,322,  0,140,328,  0,257,258,
    0,  0,114,  0, 72,204,  0,216,120,  0,  0,256,  0,  0,302, 76,  0,342,
  160,  0,142,156,  0,190,118,  0,212,314,122,  0,  0,128,208,  0,338,340,
    0,274,  0,144,  0,  0,  0,  0,116,276,  0,244,  0,110, 82,  0,192,300,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,152,  0,  0,  0,  0,194,  0,  0,
    0,  0,  0,210,290,  0,257,258,  0,  0,  0,  0,  0,264,262,  0,  0, 60,
  298,  0,  0,326, 84, 80,  0, 64,278,  0,264, 78,  0,324,  0, 58,  0, 88,
  206, 86,  0,280,348, 70,  0, 74,262,  0,300,  0,  0, 68, 66,320,  0,  0,
  350,  0,257,258,  0,328,114,  0, 72,204,  0,216,322,  0,  0,  0,302, 76,
    0,  0,212,208,  0,192,  0, 62,  0,102,214,  0,  0,  0,  0,264,  0,  0,
    0, 82,210,  0,280,348,  0,278,  0,264,350,  0,298,300,302,  0,216,204,
    0,212,208,  0,214,206,  0,  0,210,  0, 84, 80,  0, 88, 86,  0,  0, 78,
    0, 76, 82,  0,322,328,  0,326,324,320,  0,  0, 68, 66,  0,  0,  0, 60,
   62, 64, 58, 70, 74,  0, 72,  0,102,  0,114,  0,257,258,  0,  0,  0,  0,
    0,192,264,262,  0,  0,300,  0,132,150,  0,160,142,128,  0,138,152,  0,
  162,  0,144,  0,180,  0,294,  0,106,100,102, 94, 98, 90, 96,104, 92,  0,
  260,284,  0,280,252,  0,248,282,  0,  0,  0,276,274,  0,  0,278,286,  0,
  254,264,  0,  0,  0,260,272,250,270,252,254,264,248,256,  0,196,202,194,
    0,224,232,  0,230,228,  0,218,  0,  0,222,226,  0,  0,  0,  0,240,220,
    0,  0,238,236,234,  0,190,  0,266,  0,268,  0,  0,  0,  0,  0,  0,  0,
  306,304,  0,  0,  0,202,  0,  0,296,  0,346,344,342,  0,336,  0,330,  0,
  480,481,  0,  0,  0,460,154,158,156,  0,292,  0,262,  0,140,  0,148,146,
    0,118,122,  0,120,  0,116,  0,112,108,  0,  0,110,  0,288,290,  0,258,
  156,  0,134,130,  0,126,136,138,124,132,  0,128,  0,154,156,  0,198,200,
    0,308,316,318,310,312,314,  0,338,340,  0,  0,  0,  0,  0,332,334,  0,
  257,258,  0,  0,  0,  0,  0,  0,  0,525,  0,524,  0,246,242,  0,  0,  0,
    0,244,  0
};
static const unsigned short ag_key_jmp[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  4,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 11, 13,  0,  0,  0,  0,  0, 24, 27,  0, 28,  0, 30, 33,  0,
    0,  0, 33,  0,  0,  0,  0,  0,  0, 39,  0, 43,  0, 45,  0,  0, 49,  0,
    0, 45,  0,  0,  0,  0,  0,  1,  8, 10,  9, 18,  0, 21,  0,  0, 24, 18,
   26, 31, 36, 51,  0, 57, 59,  0,  0,  0,  0, 53, 58,  0, 67, 72, 79,  0,
   90, 92,  0, 90,  0,  0, 93,  0,  0,103,  0, 98,  0,100,101,108,  0,111,
    0,  0,123,  0,110,  0,  0,120,  0,112,  0, 95, 94,103,107,115,  0,127,
  130,137,142,  0,144,149,  0,151,156,  0,159,  0,  0,136,168,173,178,  0,
  185,194,  0,  0,206,  0,200,204,147,  0,217,  0,  0,212,154,  0,219,226,
    0,  0,234,  0,237,254,  0,231,  0,  0,163,166,  0,  0,  0,  0,  0,258,
  176,  0,262,  0,  0,  0,265,270,  0,182,186,274,276,  0,292,295,303,  0,
    0,  0,284,194,  0,309,313,  0,307,203,319,  0,338,344,  0,332,335,210,
    0,322,328,213,  0,346,  0,348,350,  0,365,367,  0,223,353,359,226,373,
  379,385,389,395,401,  0,229,410,414,  0,  0,425,  0,430,434,  0,  0,437,
    0,247,250,  0,443,  0,  0,420,422,244,253,439,256,  0,454,462,  0,474,
  478,  0,488,495,  0,450,452,266,464,466,472,269,272,497,499,  0,  0,  0,
    0,505,  0,289,  0,291,  0,286,501,503,293,509,  0,511,517,  0,  0, 88,
  119,125,130,139,144,150,157,160,169,179,260,189,199,206,217,221,240,259,
  275,295,301,521,524,  0,  0,535,  0,330,  0,333,  0,527,530,335,  0,  0,
  537,  0,341,541,545,555,  0,562,567,  0,  0,584,  0,581,352,587,  0,592,
  598,600,  0,  0,608,616,  0,627,630,  0,621,367,  0,636,639,645,  0,373,
  649,  0,  0,667,  0,663,380,  0,669,  0,  0,655,657,383,386,  0,676,684,
    0,394,686,688,  0,  0,344,559,349,572,578,355,359,363,370,633,377,389,
  397,690,695,  0,  0,704,  0,698,418,712,715,  0,722,728,735,  0,751,753,
    0,755,757,  0,745,748,430,433,759,  0,762,772,  0,781,787,  0,442,776,
  445,795,799,  0,819,825,  0,804,809,813,454,  0,859,862,  0,462,  0,830,
  833,836,842,848,854,465,868,  0,877,  0,883,  0,  0,894,  0,480,  0,483,
    0,  0,886,889,485,  0,896,  0,904,908,  0,917,928,936,  0,898,902,494,
  913,497,938,  0,942,  0,949,  0,952,964,975,981,985,990,995,999,1005,  0,
  1008,1016,  0,  0,1044,  0,1057,1060,  0,528,  0,1066,1068,  0,522,1019,
  1025,525,1048,1054,531,533,  0,1075,1084,1086,1092,1094,1099,1105,1108,
  1113,  0,1118,1124,  0,  0,1131,1133,  0,  0,  0,  0,1141,562,  0,  0,
    0,  0,568,  0,559,1135,1138,565,571,1143,1146,1149,  0,1152,  0,1155,
    0,584,  0,586,  0,588,  0,590,  0,1166,1170,  0,594,  0,1159,597,  0,
  1179,  0,1181,1191,1199,  0,1205,  0,1214,  0,1222,1228,  0,612,  0,  0,
    0,1232,1234,  0,1238,  0,1246,  0,1249,  0,1256,1258,  0,1267,1269,  0,
  1263,631,1271,  0,1274,1277,  0,638,1284,  0,1291,1293,  0,1296,1301,  0,
  1331,1338,  0,1305,1310,1316,1320,1326,650,1342,  0,  0,1345,  0,1349,
  1354,  0,1362,1373,1379,1389,1398,1406,  0,  0,  0,  0,674,  0,677,  0,
  1413,1421,  0,  0,1429,  0,684,  0,687,  0,689,  0,  0,  0,693,  0,1431,
    0,  0,697,  0,700,1433,  0
};
static const unsigned short ag_key_index[] = {
   61, 81, 83, 86, 86,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0, 81, 81,  0,  0,304,  0,337,337,  0,401,
    0,421,426,  0,  0,337,337,  0,  0,  0,436,448,457,  0,  0,  0,  0,467,
  476,476,  0,478,  0,  0,487,436,436,337,  0, 81,492, 81,  0,  0,  0,  0,
  501, 81, 81, 81,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 86, 86, 83,  0,  0,337,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0, 81,492,492,  0,492,  0,  0,  0,  0,  0,501,501,  0, 81,
    0,  0,508,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,337,337,510,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,512,  0,  0,  0,467,  0,536,  0,545,  0,  0,
    0,  0,478,555,  0,  0,337,573,  0,582,  0,  0,467,492,  0,492,  0,  0,
   81,  0, 81, 81,  0,  0, 81,  0,  0,  0,  0,  0,501,  0,  0,  0,  0,  0,
    0,  0,592,  0,  0,  0,  0,421,599,  0,  0,602,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,337,510,510,  0,  0,604,  0,  0,608,  0,  0,  0,  0,  0,
    0,  0,610,  0,  0,  0,  0,467,  0,  0,  0,615,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,478,555,555,  0,337,  0,  0,  0,582,582,  0,492,  0,  0, 81,  0,
    0,  0, 81,617,  0,  0,  0,  0,  0, 81,  0,  0,592,  0,  0,  0,  0,421,
  599,599,602,602,  0,  0,  0,  0,  0,510,  0,  0,604,604,  0,608,608,  0,
    0,  0,622,  0,  0,  0,610,610,  0,  0,467,  0,  0,  0,  0,624,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,536,  0,  0,  0,  0,  0,  0,
  545,  0,  0,  0,  0,  0,  0,  0,  0,  0,555,  0,  0,  0,  0,582,  0,  0,
    0,  0,626,467,  0,  0,628,634, 81,592,  0,  0,  0,  0,  0,  0,  0,  0,
  599,  0,  0,602,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,604,  0,608,  0,
    0,622,622,641,  0,  0,610,  0,  0,615,  0,  0,  0,592,644,  0,  0,  0,
    0,  0,  0,  0,  0,536,  0,647,  0,  0,  0,  0,545,  0,  0,653,  0,  0,
    0,  0,  0,  0,  0,  0,  0,626,467,  0,  0,628,634,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,661,  0,  0,  0,  0,  0,  0,622,641,641,  0,  0,
  615,  0,  0,  0,  0,592,644,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  647,  0,  0,  0,  0,  0,  0,653,  0,664,  0,  0,  0,  0,  0, 81,  0,  0,
    0,667,  0,  0,  0,  0,  0,679,  0,  0,  0,  0,  0,  0,  0,  0,641,681,
    0,  0,  0,624,337,592,  0,  0,  0,  0,  0,592,  0,  0,691,  0,634,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,664,  0,  0,  0,  0,  0, 81,  0,
    0,  0,667,  0,  0,  0,  0,  0,  0,  0,679,  0,  0,  0,  0,  0,  0,  0,
    0,681,  0,  0,695,  0,  0,  0,  0,  0,691,691,  0,634,  0,  0,  0,  0,
    0,  0,436,  0,  0,702,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 81,
    0,  0,  0,  0,  0,626,  0,  0,492,436,  0,  0,  0,  0,  0,  0,  0,  0,
    0,592,691,  0,  0,  0,  0,626,  0,492,  0,  0,  0,  0,  0,  0,  0,592,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};
static const unsigned char ag_key_ends[] = {
75,0, 69,0, 78,67,69,76,0, 84,0, 58,0, 86,73,84,69,0, 
79,84,73,70,89,0, 67,75,0, 83,58,0, 69,82,0, 73,83,84,69,82,0, 
50,46,48,0, 58,0, 66,83,67,82,73,66,69,0, 79,83,84,58,0, 
83,69,82,73,78,70,79,58,0, 79,83,84,58,0, 86,45,65,66,83,58,0, 
83,69,82,73,78,70,79,58,0, 58,0, 78,0, 69,0, 65,86,69,82,58,0, 
82,84,0, 73,84,72,77,0, 65,83,0, 76,73,67,65,84,73,79,78,0, 
73,79,0, 73,78,84,0, 83,69,0, 85,78,68,65,82,89,0, 65,78,67,72,0, 
69,0, 78,67,69,76,0, 68,0, 79,78,67,69,0, 77,80,0, 
67,84,73,86,65,84,69,68,0, 71,69,83,84,0, 77,65,73,78,0, 
82,65,84,73,79,78,0, 82,76,89,45,79,78,76,89,0, 80,73,82,69,83,0, 
76,83,69,0, 66,0, 77,45,84,65,71,0, 86,69,85,80,0, 84,0, 
78,68,76,73,78,71,0, 68,68,69,78,0, 79,78,0, 71,69,0, 
69,71,82,73,84,89,45,80,82,79,84,69,67,84,69,68,0, 73,84,69,0, 
78,0, 82,0, 68,82,0, 83,65,71,69,0, 72,79,68,0, 78,0, 
76,84,73,80,65,82,84,0, 88,84,78,79,78,67,69,0, 67,69,0, 
69,83,79,85,82,67,69,0, 73,70,89,0, 84,0, 81,85,69,0, 
73,79,78,65,76,0, 73,71,0, 78,68,73,78,71,0, 79,78,69,0, 67,75,0, 
83,58,0, 65,84,73,79,78,0, 89,0, 80,0, 77,0, 79,78,0, 
69,73,86,69,68,0, 73,82,69,67,84,0, 82,0, 69,83,72,69,82,0, 
73,83,84,69,82,0, 69,67,84,69,68,0, 68,69,82,0, 85,73,82,69,68,0, 
80,79,78,83,69,0, 82,89,45,65,70,84,69,82,0, 79,82,84,0, 
80,65,85,84,72,0, 84,0, 84,80,0, 83,73,79,78,0, 79,77,80,0, 
65,76,0, 58,0, 65,76,69,0, 83,67,82,73,66,69,0, 71,0, 80,0, 
77,73,78,65,84,69,68,0, 84,0, 85,0, 77,69,79,85,84,0, 83,0, 
84,65,71,0, 69,78,73,90,69,68,45,66,89,0, 78,83,80,79,82,84,0, 
69,0, 76,0, 69,0, 80,0, 73,0, 65,77,69,0, 67,0, 
82,83,73,79,78,0, 68,69,79,0, 69,68,0, 69,83,0, 77,58,0, 
82,69,83,58,0, 58,0, 73,86,69,0, 69,82,84,0, 
80,76,73,67,65,84,73,79,78,0, 68,73,79,0, 89,69,0, 78,67,69,76,0, 
79,78,67,69,0, 73,71,69,83,84,0, 82,73,0, 79,78,0, 71,69,0, 
86,73,84,69,0, 83,83,65,71,69,0, 78,0, 76,84,73,80,65,82,84,0, 
88,84,78,79,78,67,69,0, 84,73,70,89,0, 78,68,73,78,71,0, 67,75,0, 
83,58,0, 79,80,0, 69,82,0, 73,83,84,69,82,0, 68,69,82,0, 
80,65,85,84,72,0, 84,0, 83,83,73,79,78,0, 78,65,76,0, 58,0, 
83,67,82,73,66,69,0, 77,73,78,65,84,69,68,0, 84,0, 85,0, 69,0, 
73,68,69,79,0, 69,68,0, 78,79,78,67,69,0, 88,84,78,79,78,67,69,0, 
79,80,0, 83,80,65,85,84,72,0, 67,84,73,86,69,0, 
69,78,68,73,78,71,0, 69,82,77,73,78,65,84,69,68,0, 82,73,0, 
79,78,0, 84,0, 78,0, 85,0, 69,0, 69,68,0, 
80,76,73,67,65,84,73,79,78,0, 68,73,79,0, 77,65,71,69,0, 
83,83,65,71,69,0, 76,84,73,80,65,82,84,0, 69,88,84,0, 
73,68,69,79,0, 76,69,82,84,0, 67,79,78,0, 69,78,68,69,82,0, 
83,83,73,79,78,0, 71,78,65,76,0, 67,75,0, 89,69,0, 
65,78,67,69,76,0, 78,86,73,84,69,0, 79,84,73,70,89,0, 
82,65,67,75,0, 69,82,0, 73,83,84,69,82,0, 
85,66,83,67,82,73,66,69,0, 73,71,69,83,84,0, 73,80,0, 77,58,0, 
82,69,83,58,0, 58,0, 58,0, 79,77,80,0, 82,0, 68,68,82,0, 
84,72,79,68,0, 82,73,71,0, 75,69,78,73,90,69,68,45,66,89,0, 
65,78,83,80,79,82,84,0, 76,0, 83,69,82,0, 73,80,47,50,46,48,0, 
73,68,0, 71,80,80,45,73,77,83,43,88,77,76,0, 
76,84,69,82,78,65,84,73,86,69,0, 73,71,69,83,84,0, 83,85,80,0, 
73,88,69,68,0, 76,65,73,78,0, 83,73,71,0, 70,67,56,50,50,0, 
68,80,0, 71,79,82,73,84,72,77,0, 84,83,0, 78,79,78,67,69,0, 
78,84,69,71,82,73,84,89,45,80,82,79,84,69,67,84,69,68,0, 78,67,69,0, 
80,65,81,85,69,0, 79,80,0, 76,77,0, 80,79,78,83,69,0, 73,0, 
69,82,78,65,77,69,0, 76,71,79,82,73,84,72,77,0, 75,0, 
79,77,65,73,78,0, 75,0, 79,78,67,69,0, 80,65,81,85,69,0, 79,80,0, 
69,65,76,77,0, 84,65,76,69,0, 67,84,73,79,78,0, 
88,80,73,82,69,83,0, 82,0, 71,0, 69,67,0, 69,66,0, 78,0, 
79,86,0, 67,84,0, 69,80,0, 65,71,0, 73,78,84,0, 
88,80,73,82,69,83,0, 83,79,78,0, 82,89,45,65,70,84,69,82,0, 68,0, 
65,82,76,89,45,79,78,76,89,0, 82,79,77,45,84,65,71,0, 
79,45,84,65,71,0, 69,70,82,69,83,72,69,82,0, 
65,78,68,76,73,78,71,0, 65,86,69,82,58,0, 71,79,58,0, 78,0, 
82,85,69,0, 85,82,65,84,73,79,78,0, 68,53,0, 73,71,67,79,77,80,0, 
80,0, 72,79,78,69,0, 67,84,80,0, 80,0, 83,0, 68,80,0, 83,69,0, 
85,78,68,65,82,89,0, 69,82,83,73,79,78,0, 79,0, 69,83,0, 
65,76,83,69,0, 82,85,69,0, 76,73,65,83,0, 82,65,78,67,72,0, 
79,77,80,0, 73,68,68,69,78,0, 65,68,68,82,0, 67,69,73,86,69,68,0, 
79,82,84,0, 84,76,0, 82,85,69,0, 82,79,88,89,0, 
69,68,73,82,69,67,84,0, 69,65,67,84,73,86,65,84,69,68,0, 
73,86,69,85,80,0, 79,82,69,83,79,85,82,67,69,0, 
82,79,66,65,84,73,79,78,0, 69,74,69,67,84,69,68,0, 
73,77,69,79,85,84,0, 80,84,73,79,78,65,76,0, 
69,81,85,73,82,69,68,0, 58,0, 84,0, 84,67,0, 
};
#define AG_TCV(x) ag_tcv[(x)]
static const unsigned short ag_tcv[] = {
    5,640,640,640,640,640,640,640,640,627,641,640,640,641,640,640,640,640,
  640,640,640,640,640,640,640,640,640,640,640,640,640,640, 72,628, 96,637,
  638,628,341,628, 92,237,628,629, 74, 98, 77, 90,388,391,630,630,630,630,
  630,630,630,630, 68, 86, 94, 81,368, 88, 83,476,631,631,631,631,631,632,
  632,632,632,477,632,632,632,632,632,632,632,632,632,632,478,632,632,632,
  632,294,123,295,639,633,634,476,631,631,631,631,631,632,632,632,632,477,
  632,632,632,632,632,632,632,632,632,632,478,632,632,632,632,635,639,635,
  628,640,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,
  639,636,636,639,639,639,639,639,636,639,639,639,639,639,639,639,639,639,
  639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,
  639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,
  639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,
  639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,
  639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,
  639,639,639,639
};
#ifndef SYNTAX_ERROR
#define SYNTAX_ERROR fprintf(stderr,"%s, line %d, column %d\n", \
  (PCB).error_message, (PCB).line, (PCB).column)
#endif
#ifndef FIRST_LINE
#define FIRST_LINE 1
#endif
#ifndef FIRST_COLUMN
#define FIRST_COLUMN 1
#endif
#ifndef PARSER_STACK_OVERFLOW
#define PARSER_STACK_OVERFLOW {fprintf(stderr, \
   "\nParser stack overflow, line %d, column %d\n",\
   (PCB).line, (PCB).column);}
#endif
#ifndef REDUCTION_TOKEN_ERROR
#define REDUCTION_TOKEN_ERROR {fprintf(stderr, \
    "\nReduction token error, line %d, column %d\n", \
    (PCB).line, (PCB).column);}
#endif
#ifndef INPUT_CODE
#define INPUT_CODE(T) (T)
#endif
typedef enum
  {ag_accept_key, ag_set_key, ag_jmp_key, ag_end_key, ag_no_match_key,
   ag_cf_accept_key, ag_cf_set_key, ag_cf_end_key} key_words;
static void ag_get_key_word(PCB_DECL, int ag_k) {
  int ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
  const  unsigned char *ag_p;
  int ag_ch;
  while (1) {
    switch (ag_key_act[ag_k]) {
    case ag_cf_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          int ag_k1 = ag_key_parm[ag_k];
          int ag_k2 = ag_key_pt[ag_k1];
          if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) goto ag_fail;
          (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1 + 1];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
      goto ag_fail;
    }
    case ag_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
    }
    case ag_no_match_key:
ag_fail:
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    case ag_cf_set_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      ag_k = ag_key_jmp[ag_k];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) break;
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      break;
    }
    case ag_set_key:
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
    case ag_jmp_key:
      ag_k = ag_key_jmp[ag_k];
      break;
    case ag_accept_key:
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
      return;
    case ag_cf_accept_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)])
        (PCB).la_ptr = (PCB).pointer + ag_save;
      else (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      return;
    }
    }
    ag_ch = CONVERT_CASE(*(PCB).la_ptr++);
    ag_p = &ag_key_ch[ag_k];
    while (*ag_p < ag_ch) ag_p++;
    if (*ag_p != ag_ch) {
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    }
    ag_k = (int) (ag_p - ag_key_ch);
  }
}
#ifndef AG_NEWLINE
#define AG_NEWLINE 10
#endif
#ifndef AG_RETURN
#define AG_RETURN 13
#endif
#ifndef AG_FORMFEED
#define AG_FORMFEED 12
#endif
#ifndef AG_TABCHAR
#define AG_TABCHAR 9
#endif
static void ag_track(PCB_DECL) {
  int ag_k = (int) ((PCB).la_ptr - (PCB).pointer);
  while (ag_k--) {
    switch (*(PCB).pointer++) {
    case AG_NEWLINE:
      (PCB).column = 1, (PCB).line++;
    case AG_RETURN:
    case AG_FORMFEED:
      break;
    case AG_TABCHAR:
      (PCB).column += (TAB_SPACING) - ((PCB).column - 1) % (TAB_SPACING);
      break;
    default:
      (PCB).column++;
    }
  }
}
static const int ag_rtt[] = {
  233,235,  0,233,235,  0,233,235,  0
};
static const unsigned short ag_tstt[] = {
634,633,632,631,630,629,628,478,477,476,391,388,364,363,362,361,360,359,358,
  357,356,355,354,353,352,264,262,258,257,180,137,136,135,134,133,132,131,
  130,129,98,77,62,58,56,54,52,50,48,46,44,42,40,38,36,34,32,30,28,26,24,
  22,20,18,16,14,12,10,8,6,2,0,1,60,61,64,65,66,67,99,101,128,176,252,253,
  254,255,259,263,350,351,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,
289,277,0,256,265,268,274,288,
289,277,261,0,256,260,265,268,274,288,
289,277,261,0,256,260,265,268,274,288,
627,72,68,0,69,70,71,79,
72,0,71,177,
5,0,
5,0,
5,0,
5,0,
68,0,3,
5,0,
5,0,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
68,0,3,
632,631,630,478,477,476,391,388,294,0,203,214,276,290,
638,637,633,632,631,630,629,628,478,477,476,391,388,341,237,98,92,90,88,86,
  83,81,77,74,0,82,275,278,280,282,
627,460,368,96,88,86,72,5,0,85,266,306,
627,460,368,96,88,86,72,5,0,85,266,306,
632,631,630,629,478,477,476,391,388,98,77,0,240,241,244,
632,631,630,629,478,477,476,391,388,98,77,0,240,241,244,
627,72,0,
68,0,84,
632,631,630,629,627,478,477,476,391,388,264,262,258,257,98,77,72,68,0,
632,631,630,629,478,477,476,391,388,264,262,258,257,98,77,0,238,239,240,241,
  244,252,253,254,255,259,263,
630,391,388,72,0,71,178,181,
639,638,637,636,635,634,633,632,631,630,629,628,627,621,620,593,592,591,590,
  589,572,571,570,510,508,482,478,477,476,411,410,409,408,407,406,405,391,
  388,379,368,341,295,294,264,262,258,257,237,196,166,159,158,157,156,155,
  154,153,137,136,135,134,133,132,131,130,129,123,98,96,94,92,90,88,77,72,
  68,5,0,69,70,79,
632,631,630,629,478,477,476,391,388,98,77,0,63,240,241,244,
621,620,510,508,482,0,59,497,498,615,616,617,618,619,
634,633,632,631,630,629,628,572,571,570,478,477,476,391,388,98,77,0,57,99,
  101,567,568,
634,633,632,631,630,629,628,478,477,476,391,388,98,0,55,108,109,110,559,561,
  566,
634,633,632,631,630,629,628,478,477,476,391,388,98,0,53,108,109,110,558,559,
  561,
634,633,632,631,630,629,628,478,477,476,391,388,264,262,258,257,98,96,94,77,
  0,51,93,117,245,246,255,259,263,269,270,271,272,273,366,369,545,546,
634,633,632,631,630,629,628,478,477,476,391,388,264,262,258,257,98,96,94,77,
  0,49,93,117,245,246,255,259,263,269,270,271,272,273,366,369,543,
636,635,634,633,632,631,630,629,628,478,477,476,391,388,368,295,294,237,123,
  98,96,94,92,90,88,77,68,0,47,102,104,143,606,
630,391,388,0,45,141,399,605,
630,391,388,0,43,141,399,598,
630,411,410,409,408,407,406,405,391,388,0,41,141,399,400,404,531,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,159,158,
  157,156,155,154,153,98,77,0,39,105,107,144,145,
634,633,632,631,630,629,628,593,592,591,590,589,478,477,476,391,388,98,77,0,
  37,99,101,586,587,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,35,99,101,540,541,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,5,0,33,99,101,540,541,
  542,
630,391,388,0,31,141,537,538,
630,391,388,0,29,141,538,539,
634,633,632,631,630,629,628,478,477,476,391,388,137,136,135,134,133,132,131,
  130,129,98,77,0,27,99,101,128,186,
634,633,632,631,630,629,628,478,477,476,391,388,166,98,77,0,25,99,101,491,
  492,
634,633,632,631,630,629,628,478,477,476,391,388,166,98,77,0,23,99,101,434,
  435,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,94,77,0,21,93,117,246,
  366,369,529,530,
634,633,632,631,630,629,628,478,477,476,391,388,196,98,77,0,19,99,101,187,
  188,189,193,
630,391,388,0,17,141,142,
636,635,634,633,632,631,630,629,628,478,477,476,391,388,368,295,294,237,123,
  98,96,94,92,90,88,77,68,0,15,102,104,143,
634,633,632,631,630,629,628,478,477,476,391,388,379,264,262,258,257,98,96,
  94,77,0,13,93,117,245,246,255,259,263,269,270,271,272,273,366,369,376,
  377,378,380,
630,411,410,409,408,407,406,405,391,388,0,11,400,401,402,404,412,
630,411,410,409,408,407,406,405,391,388,0,9,141,396,399,400,404,
634,633,632,631,630,629,628,478,477,476,391,388,264,262,258,257,98,96,94,77,
  0,7,93,117,245,246,255,259,263,269,270,271,272,273,365,366,369,
630,391,388,0,4,138,139,141,
633,632,631,630,478,477,476,391,388,98,77,0,293,
631,630,476,391,388,300,0,231,298,299,302,
68,0,84,
632,631,630,478,477,476,391,388,294,0,203,214,276,290,
638,637,633,632,631,630,629,628,478,477,476,391,388,341,237,98,92,90,88,86,
  81,77,74,0,
68,0,84,
83,0,82,
638,633,632,631,630,629,628,627,478,477,476,391,388,341,332,331,325,324,319,
  318,295,294,237,228,224,218,98,92,90,77,72,68,0,69,70,79,
86,0,85,
627,460,368,96,88,72,5,0,87,267,339,
627,460,368,96,88,72,5,0,87,267,339,
632,631,630,629,478,477,476,391,388,98,77,0,
68,0,84,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,69,
  70,79,
72,0,71,177,
630,391,388,0,
72,0,71,
5,0,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,74,72,5,0,69,70,79,
5,0,
627,86,72,5,0,69,70,79,
5,0,
634,633,632,631,630,629,628,478,477,476,391,388,98,0,109,
77,0,76,
627,74,72,5,0,69,70,79,
74,0,75,
5,0,
627,86,72,5,0,69,70,79,
5,0,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,94,77,72,68,0,370,
  371,372,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,118,
  119,120,121,
68,0,84,
289,277,261,0,260,265,268,274,288,
289,277,261,0,260,265,268,274,288,
289,277,0,265,268,274,288,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,
627,94,72,68,0,69,70,79,
632,631,630,629,627,478,477,476,391,388,264,262,258,257,98,77,72,0,69,70,79,
94,0,93,
627,86,72,5,0,69,70,79,
86,5,0,85,547,548,
5,0,
627,86,72,5,0,69,70,79,
86,5,0,85,173,544,
5,0,
636,635,634,633,632,631,630,629,628,478,477,476,391,388,368,295,294,237,123,
  98,96,94,92,90,88,77,68,0,
83,0,82,
627,86,72,5,0,69,70,79,
5,0,
630,391,388,0,
627,86,72,5,0,69,70,79,
5,0,
627,86,72,5,0,69,70,79,
5,0,
627,74,72,0,69,70,79,
627,92,86,72,5,0,69,70,79,
627,92,86,72,5,0,69,70,79,
5,0,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,98,77,0,
90,0,89,
5,0,
627,86,72,5,0,69,70,79,
5,0,
627,74,72,5,0,69,70,79,
74,0,75,
5,0,
74,0,75,
5,0,
630,391,388,0,
627,72,5,0,69,70,79,
5,0,
627,72,0,69,79,
627,72,5,0,69,70,79,
5,0,
627,74,72,5,0,69,70,79,
74,0,75,
5,0,
627,72,0,69,79,
627,72,0,69,79,
5,0,
627,72,0,69,79,
627,72,0,69,79,
5,0,
94,0,93,
627,86,74,72,5,0,69,70,79,
74,0,75,
5,0,
627,90,72,0,69,70,79,
627,72,0,69,79,
74,0,75,
5,0,
630,391,388,0,
627,72,5,0,69,70,79,
5,0,
627,72,5,0,69,70,79,
5,0,
86,0,85,381,
627,86,74,72,5,0,69,70,79,
74,0,75,
5,0,
630,391,388,0,
627,72,0,69,79,
627,72,0,69,79,
627,72,5,0,69,70,79,
5,0,
627,72,5,0,69,70,79,
5,0,
86,0,85,367,
627,86,72,5,0,69,70,79,
5,0,
630,391,388,0,
627,72,0,69,79,
627,72,5,0,69,70,79,
5,0,
633,632,631,630,478,477,476,391,388,98,77,0,
631,630,476,391,388,0,
627,300,295,86,77,74,72,68,5,0,303,304,305,
631,630,627,476,391,388,295,86,77,74,72,5,0,299,301,302,
300,0,
77,0,
295,0,
630,391,388,0,141,202,
638,633,632,631,630,629,628,478,477,476,391,388,341,237,98,92,83,81,77,74,0,
  279,283,285,286,287,
632,631,630,478,477,476,391,388,294,0,203,214,276,290,
638,633,632,631,630,629,628,478,477,476,391,388,341,332,331,325,324,319,318,
  295,294,237,228,224,218,98,92,90,77,68,0,307,308,309,310,311,312,313,
  314,315,316,317,333,
638,633,632,631,630,629,628,627,478,477,476,391,388,341,332,331,325,324,319,
  318,295,294,237,228,224,218,98,92,90,77,72,68,0,69,70,79,
638,633,632,631,630,629,628,478,477,476,391,388,295,294,237,98,92,90,88,77,
  68,0,340,342,345,
341,0,
638,637,633,632,631,630,629,628,627,478,477,476,391,388,341,295,294,237,98,
  92,90,88,86,83,81,77,74,72,68,0,69,70,79,
640,639,638,637,636,635,634,633,632,631,630,629,628,478,477,476,391,388,368,
  341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,68,0,111,
180,72,0,71,176,
630,391,388,0,
639,638,637,636,635,634,633,632,631,630,629,628,478,477,476,391,388,368,341,
  295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,179,183,184,
  185,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
74,0,73,
86,0,85,569,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,562,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,72,0,69,70,79,
86,0,85,560,
627,72,0,370,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,94,92,90,88,86,83,81,77,74,72,68,5,0,118,119,
96,0,
638,637,633,632,631,630,629,628,478,477,476,391,388,341,295,294,237,98,92,
  90,83,81,77,68,0,249,251,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,77,0,117,245,246,273,
  369,
627,88,86,74,72,5,0,69,70,79,
627,88,86,74,72,5,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,77,0,117,245,246,273,
  369,
627,88,86,74,72,5,0,69,70,79,
627,88,86,74,72,5,0,69,70,79,
627,88,86,74,72,5,0,69,70,79,
627,88,86,74,72,5,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,94,77,72,68,0,370,
  371,372,
632,631,630,629,478,477,476,391,388,264,262,258,257,98,77,0,239,240,241,244,
  252,253,254,255,259,263,
632,631,630,629,627,478,477,476,391,388,264,262,258,257,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,627,551,478,477,476,391,388,98,77,72,0,69,70,79,
86,0,85,
86,5,0,85,173,544,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
86,0,85,
636,635,634,633,632,631,630,629,628,478,477,476,391,388,368,295,294,237,123,
  98,96,94,92,90,88,77,68,0,102,104,
86,0,85,607,
86,5,0,85,173,544,
86,0,85,173,599,
74,0,73,
92,86,5,0,91,232,532,533,
92,86,5,0,91,232,532,533,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,168,167,
  166,165,164,163,162,161,160,98,77,0,105,107,146,
86,0,85,588,594,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
630,391,388,0,139,141,
634,633,632,631,630,629,628,627,478,477,476,391,388,137,136,135,134,133,132,
  131,130,129,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,437,490,
634,633,632,631,630,629,628,526,518,513,510,508,505,503,482,478,477,476,470,
  463,461,450,391,388,98,77,0,101,439,441,442,445,447,467,493,494,495,496,
  497,498,499,500,501,502,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,437,490,
634,633,632,631,630,629,628,489,487,482,478,477,476,470,465,463,461,452,450,
  391,388,98,77,0,101,436,438,439,440,441,442,443,444,445,446,447,448,467,
86,0,85,173,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,96,94,77,72,0,69,70,
  79,
90,0,89,
632,631,630,478,477,476,391,388,294,0,190,203,214,290,
634,633,632,631,630,629,628,627,478,477,476,391,388,196,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,397,392,391,388,386,98,77,72,0,
  69,70,79,
86,0,85,
86,0,85,381,
634,633,632,631,630,629,628,627,478,477,476,391,388,264,262,258,257,98,96,
  94,77,72,0,69,70,79,
426,425,424,423,422,421,420,419,418,417,416,415,0,413,
630,391,388,0,403,427,
634,633,632,631,630,629,628,627,478,477,476,391,388,374,98,77,72,0,69,70,79,
86,0,85,
86,0,85,367,
634,633,632,631,630,629,628,478,477,476,391,388,137,136,135,134,133,132,131,
  130,129,98,77,0,99,101,128,
631,630,476,391,388,0,
631,630,476,391,388,0,302,
68,0,303,
631,630,627,476,391,388,295,86,77,74,72,5,0,299,301,302,
630,391,388,0,296,297,
630,391,388,0,
638,633,632,631,630,629,628,478,477,476,391,388,341,237,98,92,81,77,74,0,
  285,
638,633,632,631,630,629,628,627,478,477,476,460,391,388,368,341,295,294,237,
  98,96,92,90,88,86,81,77,72,68,5,0,336,337,338,
81,0,80,334,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,460,391,388,368,98,96,88,86,81,
  77,72,5,0,80,329,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
638,633,632,631,630,629,628,478,477,476,391,388,341,332,331,325,324,319,318,
  295,294,237,228,224,218,98,92,90,77,68,0,307,308,309,310,311,312,313,
  314,315,316,317,333,
638,633,632,631,630,629,628,478,477,476,391,388,295,294,237,98,92,90,88,77,
  68,0,
81,0,
638,633,632,631,630,629,628,478,477,476,391,388,295,294,237,98,92,90,88,77,
  68,0,340,342,345,
638,637,633,632,631,630,629,628,478,477,476,391,388,341,295,294,237,98,92,
  90,88,86,83,81,77,74,68,0,242,248,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,114,
  115,116,
627,72,5,0,69,70,79,
639,638,637,636,635,634,633,632,631,630,629,628,478,477,476,391,388,368,341,
  295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,0,183,
634,633,632,631,630,629,628,627,486,485,478,477,476,391,388,98,96,77,72,0,
  69,70,79,
627,96,72,0,69,70,79,
627,96,72,0,69,70,79,
627,96,72,0,69,70,79,
631,630,627,476,391,388,72,0,69,70,79,
627,621,620,510,508,482,72,0,69,70,79,
634,633,632,631,630,629,628,627,578,577,478,477,476,397,391,388,98,77,72,0,
  69,70,79,
86,0,85,
634,633,632,631,630,629,628,478,477,476,391,388,98,0,108,109,110,559,561,
634,633,632,631,630,629,628,627,565,478,477,476,391,388,98,77,72,0,69,70,79,
86,0,85,
638,637,633,632,631,630,629,628,478,477,476,391,388,341,295,294,237,98,92,
  90,83,81,77,68,0,
627,86,74,72,5,0,69,70,79,
88,86,74,5,0,87,267,339,
88,86,74,5,0,87,267,339,
88,86,74,5,0,87,267,339,
88,86,74,5,0,87,267,339,
88,86,74,5,0,87,267,339,
88,86,74,5,0,87,267,339,
627,368,72,0,69,70,79,
632,631,630,629,478,477,476,391,388,264,262,258,257,98,77,0,239,240,241,244,
  252,253,254,255,259,263,
634,633,632,631,630,629,628,551,478,477,476,391,388,98,77,0,99,101,213,549,
  550,
634,633,632,631,630,629,628,627,551,478,477,476,391,388,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,174,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,627,614,613,612,478,477,476,391,388,98,77,72,0,
  69,70,79,
86,0,85,
86,0,85,599,
634,633,632,631,630,629,628,627,602,478,477,476,391,388,98,77,72,0,69,70,79,
627,86,72,5,0,69,70,79,
630,627,391,388,72,0,69,70,79,
641,640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,
  388,368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,0,
  233,234,
627,86,72,5,0,69,70,79,
86,0,85,534,
86,0,85,534,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,627,595,478,477,476,391,388,98,77,72,0,69,70,79,
627,86,72,5,0,69,70,79,
86,0,85,594,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,540,
627,72,0,69,79,
634,633,632,631,630,629,628,478,477,476,391,388,137,136,135,134,133,132,131,
  130,129,98,77,0,99,101,128,
627,81,72,0,69,70,79,
74,0,73,
627,81,72,0,69,70,79,
481,480,0,468,471,475,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,81,77,72,0,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,74,72,5,0,69,70,79,
74,0,73,
74,0,73,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,81,77,72,0,79,
627,74,72,5,0,69,70,79,
74,0,73,
86,0,85,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,94,77,0,93,117,246,
  366,369,530,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
627,86,74,72,68,5,0,69,70,79,
86,74,5,0,191,
634,633,632,631,630,629,628,478,477,476,391,388,196,98,77,0,99,101,188,189,
  193,
634,633,632,631,630,629,628,478,477,476,397,392,391,388,386,98,77,0,99,101,
  213,382,383,384,385,
634,633,632,631,630,629,628,627,478,477,476,397,392,391,388,386,98,77,72,0,
  69,70,79,
86,0,85,
634,633,632,631,630,629,628,478,477,476,391,388,264,262,258,257,98,96,94,77,
  0,93,117,245,246,255,259,263,269,270,271,272,273,366,369,380,
627,72,0,69,79,
630,391,388,0,
68,0,84,
634,633,632,631,630,629,628,478,477,476,391,388,374,98,77,0,99,101,213,373,
  375,
634,633,632,631,630,629,628,627,478,477,476,391,388,374,98,77,72,0,69,70,79,
86,0,85,
631,630,476,391,388,0,
630,391,388,0,
77,0,
638,633,632,631,630,629,628,478,477,476,391,388,341,295,294,237,98,92,90,77,
  68,0,336,
638,633,632,631,630,629,628,627,478,477,476,391,388,341,295,294,237,98,92,
  90,77,72,68,0,69,70,79,
81,0,80,
81,0,80,
634,633,632,631,630,629,628,627,478,477,476,460,391,388,368,98,96,88,86,77,
  72,5,0,99,101,330,
328,327,326,0,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
638,633,632,631,630,629,628,627,478,477,476,460,391,388,368,341,295,294,237,
  98,96,92,90,88,86,83,77,74,72,68,5,0,343,347,348,349,
638,637,633,632,631,630,629,628,478,477,476,391,388,341,295,294,237,98,92,
  90,88,86,83,81,77,74,68,0,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,0,114,
634,633,632,631,630,629,628,486,485,478,477,476,391,388,98,96,77,0,95,507,
96,0,622,
96,0,117,462,509,
96,0,117,462,
631,630,476,391,388,0,511,512,517,
621,620,510,508,482,0,497,498,615,616,617,618,619,
634,633,632,631,630,629,628,578,577,478,477,476,397,391,388,98,77,0,99,101,
  213,573,574,575,576,
634,633,632,631,630,629,628,627,578,577,478,477,476,397,391,388,98,77,72,0,
  69,70,79,
634,633,632,631,630,629,628,565,478,477,476,391,388,98,77,0,99,101,213,563,
  564,
634,633,632,631,630,629,628,627,565,478,477,476,391,388,98,77,72,0,69,70,79,
368,0,
627,368,72,0,69,70,79,
627,86,81,74,72,5,0,69,70,79,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,551,478,477,476,391,388,98,77,0,99,101,213,549,
  550,
627,86,81,74,72,5,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,174,
634,633,632,631,630,629,628,614,613,612,478,477,476,391,388,98,77,0,99,101,
  212,213,608,609,610,611,
634,633,632,631,630,629,628,627,614,613,612,478,477,476,391,388,98,77,72,0,
  69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,627,602,478,477,476,391,388,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,602,478,477,476,391,388,98,77,0,99,101,174,600,
86,5,0,85,173,544,
630,391,388,0,402,412,
641,640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,
  388,368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,0,
  233,235,
634,633,632,631,630,629,628,627,536,478,477,476,391,388,98,77,72,0,69,70,79,
86,0,85,
86,0,85,
86,5,0,85,147,148,
634,633,632,631,630,629,628,595,478,477,476,391,388,98,77,0,99,101,174,
634,633,632,631,630,629,628,627,595,478,477,476,391,388,98,77,72,0,69,70,79,
627,86,72,5,0,69,70,79,
627,74,72,5,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,137,136,135,134,133,132,131,
  130,129,98,77,0,99,101,128,
627,74,72,5,0,69,70,79,
81,0,80,175,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
81,0,80,
634,633,632,631,630,629,628,479,478,477,476,391,388,98,77,0,99,101,474,
476,0,472,
627,96,74,72,5,0,469,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
627,81,72,0,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,96,77,72,0,370,371,
  372,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
634,633,632,631,630,629,628,627,526,518,513,510,508,505,503,482,478,477,476,
  470,463,461,450,391,388,98,77,72,0,69,70,79,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
81,0,80,453,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,81,77,72,0,101,449,
634,633,632,631,630,629,628,627,489,487,482,478,477,476,470,465,463,461,452,
  450,391,388,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,194,
68,0,84,
86,0,85,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,397,392,391,388,386,98,77,0,99,101,
  213,382,383,384,385,
630,391,388,0,414,
630,391,388,0,428,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,374,98,77,0,99,101,213,373,
  375,
630,391,388,0,
630,391,388,0,297,
638,633,632,631,630,629,628,478,477,476,391,388,341,295,294,237,98,92,90,77,
  68,0,333,
632,631,630,627,478,477,476,391,388,294,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,230,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,137,136,135,134,133,132,
  131,130,129,98,77,72,0,69,70,79,
632,631,630,627,478,477,476,391,388,294,72,0,69,70,79,
630,627,391,388,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,323,322,98,77,72,0,69,
  70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,201,200,199,198,98,77,
  72,0,69,70,79,
638,633,632,631,630,629,628,478,477,476,391,388,295,294,237,98,92,90,88,83,
  77,68,0,347,
634,633,632,631,630,629,628,486,485,478,477,476,391,388,98,77,0,99,101,484,
631,630,476,391,388,96,0,512,517,623,624,625,
631,630,476,391,388,0,512,517,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
627,86,72,5,0,69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,578,577,478,477,476,397,391,388,98,77,0,99,101,
  213,573,574,575,576,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,565,478,477,476,391,388,98,77,0,99,101,213,563,
  564,
368,0,
81,0,80,
81,0,80,
81,0,80,175,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,86,81,77,72,5,0,80,
  329,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
627,86,72,5,0,69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,614,613,612,478,477,476,391,388,98,77,0,99,101,
  212,213,608,609,610,611,
86,5,0,85,173,544,
634,633,632,631,630,629,628,602,478,477,476,391,388,98,77,0,99,101,174,600,
627,81,72,0,69,70,79,
627,72,0,69,79,
634,633,632,631,630,629,628,536,478,477,476,391,388,98,77,0,99,101,174,535,
634,633,632,631,630,629,628,627,536,478,477,476,391,388,98,77,72,0,69,70,79,
639,638,637,636,634,633,632,631,630,629,628,627,478,477,476,391,388,341,171,
  170,169,98,77,72,0,69,70,79,
86,0,85,
627,81,72,0,69,70,79,
634,633,632,631,630,629,628,595,478,477,476,391,388,98,77,0,99,101,174,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,96,77,72,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,490,
627,96,72,0,69,79,95,
477,0,
630,391,388,0,141,473,
627,96,72,0,69,70,79,
634,633,632,631,630,629,628,627,486,485,478,477,476,391,388,98,96,77,72,0,
  69,70,79,
627,528,527,72,0,69,70,79,
627,96,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,96,77,72,0,370,371,
  372,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,77,0,101,
627,96,72,0,69,70,79,
627,96,72,0,69,70,79,
627,96,72,0,69,70,79,
627,96,72,0,69,70,79,
627,96,72,0,69,70,79,
634,633,632,631,630,629,628,526,518,513,510,508,505,503,482,478,477,476,470,
  463,461,450,391,388,98,77,0,101,439,441,442,445,447,467,494,495,496,497,
  498,499,500,501,502,
627,96,72,0,69,70,79,
627,466,327,72,0,69,70,79,
96,0,488,
96,0,488,
627,96,72,0,69,70,79,454,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,81,77,72,0,370,371,
  372,
634,633,632,631,630,629,628,489,487,482,478,477,476,470,465,463,461,452,450,
  391,388,98,77,0,101,438,439,440,441,442,443,444,445,446,447,448,467,
627,90,72,0,69,70,79,
630,627,391,388,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,228,227,225,224,222,218,
  216,215,98,77,72,0,69,70,79,
81,0,80,
81,0,80,
81,0,80,
630,391,388,0,
630,391,388,0,
68,0,84,
81,0,80,
77,0,
632,631,630,478,477,476,391,388,294,0,203,214,290,
634,633,632,631,630,629,628,478,477,476,391,388,230,98,77,0,99,101,229,
634,633,632,631,630,629,628,478,477,476,391,388,137,136,135,134,133,132,131,
  130,129,98,77,0,99,101,128,
632,631,630,478,477,476,391,388,294,0,203,214,290,
630,391,388,0,219,
634,633,632,631,630,629,628,478,477,476,391,388,323,322,98,77,0,99,101,320,
  321,
634,633,632,631,630,629,628,478,477,476,391,388,201,200,199,198,98,77,0,99,
  101,197,
627,96,74,72,5,0,469,
631,630,476,391,388,0,512,517,623,
96,0,
631,630,476,391,388,0,512,517,
81,0,80,
81,0,80,
81,0,80,
81,0,80,
634,633,632,631,630,629,628,627,478,477,476,391,388,294,98,96,77,72,0,69,70,
  79,
627,96,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,86,77,72,5,0,99,101,
  330,
327,326,0,
81,0,80,
81,0,80,
81,0,80,
630,391,388,0,403,427,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,536,478,477,476,391,388,98,77,0,99,101,174,535,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,171,170,
  169,98,77,0,105,107,149,150,151,152,
639,638,637,636,634,633,632,631,630,629,628,627,478,477,476,391,388,341,171,
  170,169,98,77,72,0,69,70,79,
81,0,80,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,77,0,99,101,117,
96,0,95,
476,0,
630,391,388,0,
98,0,97,
96,0,95,506,
634,633,632,631,630,629,628,486,485,478,477,476,391,388,98,96,77,0,95,507,
528,527,0,
96,0,519,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,77,0,101,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,118,
  119,120,121,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,
96,0,117,464,
96,0,514,
96,0,117,462,
96,0,117,451,
96,0,117,504,
627,74,72,5,0,69,70,79,
96,0,95,
466,327,0,
631,630,476,391,388,0,125,127,
96,0,
81,0,
627,74,72,5,0,69,70,79,
90,0,89,
630,391,388,0,141,202,
634,633,632,631,630,629,628,478,477,476,391,388,228,227,225,224,222,218,216,
  215,98,77,0,99,101,192,204,205,206,207,208,209,210,211,212,213,217,220,
  223,
630,627,391,388,96,72,0,69,70,79,
627,395,394,72,0,69,70,79,
627,391,388,72,0,69,70,79,
630,391,388,0,
630,391,388,0,429,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
630,391,388,0,297,
630,391,388,0,
631,630,476,391,388,0,512,517,
630,627,391,388,72,0,69,70,79,
630,627,391,388,72,0,69,70,79,
634,633,632,631,630,629,628,627,585,584,583,582,581,580,478,477,476,391,388,
  98,77,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,294,98,96,77,0,99,101,117,
  214,
96,0,552,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
627,604,603,72,0,69,70,79,
81,0,80,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
627,81,72,0,69,70,79,
627,86,72,5,0,69,70,79,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,171,170,
  169,98,77,0,105,107,149,150,151,152,
634,633,632,631,630,629,628,627,597,596,478,477,476,391,388,98,77,72,0,69,
  70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
478,0,
634,633,632,631,630,629,628,479,478,477,476,391,388,98,77,0,99,101,474,
632,631,630,629,478,477,476,391,388,264,262,258,257,98,77,0,238,239,240,241,
  244,252,253,254,255,259,263,
634,633,632,631,630,629,628,486,485,478,477,476,391,388,98,77,0,99,101,484,
632,631,630,629,478,477,476,391,388,90,0,521,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,118,
  119,120,121,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,
96,0,
631,630,627,476,391,388,96,72,0,69,70,79,512,515,517,
634,633,632,631,630,629,628,486,485,478,477,476,391,388,98,77,0,99,101,483,
  484,
631,630,476,391,388,0,
96,0,
634,633,632,631,630,629,628,627,478,477,476,391,388,258,257,98,96,77,72,0,
  79,455,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,96,77,72,0,370,371,
  372,
634,633,632,631,630,629,628,627,478,477,476,391,388,201,200,199,198,98,77,
  72,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,81,74,72,5,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
86,81,74,5,0,80,221,
627,81,72,0,69,70,79,
627,81,72,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
630,391,388,96,0,95,141,398,399,
395,394,0,393,
391,388,0,387,
630,391,388,0,
630,391,388,0,
627,72,0,69,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,
630,391,388,0,
631,630,476,391,388,0,512,517,
630,391,388,0,141,399,
630,391,388,0,141,399,
634,633,632,631,630,629,628,585,584,583,582,581,580,478,477,476,391,388,98,
  77,0,99,101,579,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
634,633,632,631,630,629,628,478,477,476,391,388,98,0,553,554,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,
604,603,0,601,
630,627,391,388,72,0,69,70,79,
81,0,80,172,
81,0,80,
81,0,80,
81,0,80,
627,86,72,5,0,69,70,79,
627,86,72,5,0,69,70,79,
627,86,72,5,0,69,70,79,
634,633,632,631,630,629,628,597,596,478,477,476,391,388,98,77,0,99,101,
96,0,
627,96,74,72,5,0,469,
632,631,630,629,525,524,478,477,476,391,388,96,90,0,522,523,
96,0,
96,0,
631,630,476,391,388,0,512,517,
96,0,
627,96,74,72,0,69,70,79,
627,72,0,
634,633,632,631,630,629,628,478,477,476,391,388,258,257,98,96,77,0,99,101,
  252,255,456,457,458,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,77,0,101,
634,633,632,631,630,629,628,478,477,476,391,388,201,200,199,198,98,77,0,99,
  101,195,197,
81,0,80,
81,0,80,
81,0,80,
630,627,391,388,72,0,69,70,79,
81,0,80,
81,0,80,
627,411,410,409,408,407,406,405,72,0,69,70,79,
627,86,77,74,72,5,0,390,
627,86,77,74,72,5,0,390,
433,432,431,0,430,
631,630,476,391,388,0,512,517,
634,633,632,631,630,629,628,478,477,476,391,388,98,96,83,77,0,556,557,
83,0,
630,391,388,0,141,399,
639,638,637,636,634,633,632,631,630,629,628,627,478,477,476,391,388,341,98,
  96,77,72,0,69,70,79,
639,638,637,636,634,633,632,631,630,629,628,627,478,477,476,391,388,341,98,
  96,77,72,0,69,70,79,
639,638,637,636,634,633,632,631,630,629,628,627,478,477,476,391,388,341,98,
  96,77,72,0,69,70,79,
639,638,637,636,634,633,632,631,630,629,628,627,478,477,476,391,388,341,98,
  96,77,72,0,69,70,79,
96,0,
631,630,476,391,388,0,512,517,
74,0,73,
460,0,459,
627,96,72,0,79,455,
640,639,638,637,636,635,634,633,632,631,630,629,628,627,478,477,476,391,388,
  368,341,295,294,237,123,98,96,94,92,90,88,86,83,81,77,74,72,68,5,0,118,
  119,120,121,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,
632,631,630,627,478,477,476,391,388,294,72,0,69,70,79,
630,627,391,388,72,0,69,70,79,
634,633,632,631,630,629,628,627,478,477,476,391,388,230,98,77,72,0,69,70,79,
630,391,388,0,141,202,
634,633,632,631,630,629,628,627,478,477,476,391,388,98,77,72,0,69,70,79,
631,630,627,476,391,388,300,72,0,69,70,79,
411,410,409,408,407,406,405,0,400,404,
630,627,391,388,86,74,72,5,0,389,
631,630,476,391,388,0,512,517,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,
634,633,632,631,630,629,628,478,477,476,391,388,98,0,553,554,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,98,96,
  77,0,105,107,117,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,98,96,
  77,0,105,107,117,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,98,96,
  77,0,105,107,117,
639,638,637,636,634,633,632,631,630,629,628,478,477,476,391,388,341,98,96,
  77,0,105,107,117,
631,630,476,391,388,0,512,517,
634,633,632,631,630,629,628,627,486,485,478,477,476,391,388,98,77,72,0,69,
  70,79,
258,257,0,252,255,
96,0,
96,0,
632,631,630,478,477,476,391,388,294,0,203,214,290,
630,391,388,0,219,
634,633,632,631,630,629,628,478,477,476,391,388,230,98,77,0,99,101,229,
634,633,632,631,630,629,628,478,477,476,391,388,98,77,0,99,101,
631,630,476,391,388,300,0,226,231,298,299,302,
627,96,72,0,69,70,79,
630,391,388,0,
631,630,476,391,388,0,512,517,
96,0,
627,86,72,5,0,69,70,79,
627,86,72,5,0,69,70,79,
631,630,476,391,388,0,512,517,
634,633,632,631,630,629,628,486,485,478,477,476,391,388,98,77,0,99,101,484,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
627,86,74,72,5,0,69,70,79,
96,0,
630,391,388,0,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
631,630,476,391,388,0,512,517,
};
static unsigned const char ag_astt[9032] = {
  1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,0,1,1,
  1,1,1,1,2,1,2,1,2,2,2,1,1,1,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,2,2,7,3,1,1,
  1,1,2,2,2,7,2,1,1,1,1,1,2,2,2,7,2,1,1,1,1,1,1,1,8,7,1,1,1,1,2,7,1,1,3,7,3,
  7,3,7,3,7,1,7,1,3,7,3,7,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,
  7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,
  1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,1,1,1,1,1,1,1,1,7,1,2,2,2,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,7,1,1,1,2,1,4,4,4,4,4,2,4,4,
  7,1,1,1,4,4,4,4,4,2,4,4,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,7,2,1,1,9,9,4,2,7,1,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,5,5,7,1,1,1,
  1,1,1,1,1,1,2,2,2,2,1,1,7,1,1,2,1,1,2,2,2,1,1,1,1,1,1,2,7,3,1,1,5,5,5,5,5,
  5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,7,2,
  2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,1,1,1,1,1,7,1,2,2,2,1,2,2,2,1,1,1,1,1,
  1,1,2,2,2,1,1,1,1,1,1,1,7,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,
  2,2,1,1,2,1,7,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
  2,2,2,1,1,2,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,7,1,1,1,2,1,1,1,7,1,1,1,2,1,
  2,2,2,2,2,2,2,1,1,7,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,
  2,2,2,1,1,7,1,2,1,2,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,7,1,2,1,2,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,7,1,2,
  1,1,1,1,1,1,1,7,1,1,1,2,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,
  2,2,2,2,1,1,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,2,2,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,7,1,1,1,
  1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,7,1,2,1,1,2,1,1,1,1,1,7,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,2,2,2,2,2,1,1,2,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,2,
  2,2,2,2,2,1,1,7,1,2,1,1,1,1,1,2,2,2,2,2,2,2,1,1,7,1,1,1,2,2,1,1,1,1,1,1,1,
  1,1,1,1,1,1,2,2,2,2,1,1,2,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,7,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,7,1,1,1,1,2,4,1,1,1,1,1,1,1,1,1,
  1,7,1,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,2,4,1,2,7,1,8,
  8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,7,1,1,1,2,4,
  1,4,4,4,4,2,4,4,7,1,2,1,4,4,4,4,2,4,4,7,1,2,1,9,9,9,9,9,9,9,9,9,9,9,4,2,7,
  1,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  1,8,5,7,1,1,1,2,7,1,1,1,1,1,7,2,4,1,3,7,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,
  7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,5,7,1,1,1,3,7,1,8,1,5,7,1,1,1,3,
  7,9,9,9,9,9,9,9,9,9,9,9,9,9,4,3,2,4,1,1,5,1,5,7,2,2,1,2,5,1,3,7,1,8,1,5,7,
  1,1,1,3,7,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,1,5,7,1,1,2,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,2,7,1,
  2,2,2,7,1,1,1,1,1,2,2,2,7,1,1,1,1,1,2,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,4,1,5,1,5,7,2,2,1,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,1,5,
  1,5,7,2,2,1,2,5,7,1,1,2,3,7,1,8,1,5,7,1,1,1,2,5,7,1,1,2,3,7,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,2,4,1,1,8,1,5,7,1,1,1,3,7,9,9,9,
  4,1,8,1,5,7,1,1,1,3,7,1,8,1,5,7,1,1,1,3,7,1,8,1,7,1,1,1,1,8,5,1,5,7,1,1,1,
  1,8,5,1,5,7,1,1,1,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,2,7,1,3,7,1,
  8,1,5,7,1,1,1,3,7,1,5,1,5,7,2,2,1,2,5,1,3,7,2,5,1,3,7,9,9,9,4,1,1,5,7,2,2,
  1,3,7,1,1,7,1,1,1,1,5,7,2,2,1,3,7,1,5,1,5,7,2,2,1,2,5,1,3,7,1,1,7,1,1,1,1,
  7,1,1,3,7,1,1,7,1,1,1,1,7,1,1,3,7,2,7,1,1,8,5,1,5,7,1,1,1,2,5,1,3,7,1,8,1,
  7,1,1,1,1,1,7,1,1,2,5,1,3,7,9,9,9,4,1,1,5,7,2,2,1,3,7,1,1,5,7,2,2,1,3,7,2,
  4,1,1,1,8,5,1,5,7,1,1,1,2,5,1,3,7,2,2,2,4,1,1,7,1,1,1,1,7,1,1,1,1,5,7,2,2,
  1,3,7,1,1,5,7,2,2,1,3,7,2,4,1,1,1,8,1,5,7,1,1,1,3,7,9,9,9,4,1,1,7,1,1,1,1,
  5,7,2,2,1,3,7,9,9,9,9,9,9,9,9,9,9,9,4,1,1,1,1,1,5,5,5,5,5,5,5,5,1,5,7,1,1,
  3,1,1,5,1,1,1,5,5,5,5,5,5,7,3,3,1,1,5,1,5,2,7,1,1,1,7,1,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,5,1,1,1,7,2,2,1,1,2,1,1,1,1,1,1,1,1,1,7,1,2,2,2,1,1,1,1,1,
  1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,2,2,2,2,2,2,2,2,2,2,
  1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,4,8,8,8,8,8,8,8,8,1,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,2,2,2,7,3,1,2,2,2,7,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,7,2,1,1,
  2,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  7,2,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,2,4,1,1,9,9,5,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,
  3,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,
  1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,
  1,5,7,1,1,2,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,7,1,2,1,1,2,2,2,1,1,1,8,8,8,8,1,
  8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,
  2,5,1,2,5,7,1,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,2,5,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,4,1,1,2,5,7,1,1,2,2,4,
  1,1,1,2,7,1,2,8,5,7,1,1,1,1,2,8,5,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,2,2,2,2,2,2,2,2,2,1,1,7,2,1,1,2,4,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,
  1,7,1,1,1,1,1,1,7,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,
  1,2,2,2,2,2,2,2,2,2,2,1,2,4,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,
  1,2,7,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,
  1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,1,8,8,8,8,8,
  8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,7,1,1,1,
  1,7,2,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,7,2,1,2,1,1,1,1,1,5,1,1,1,1,1,7,3,1,5,
  3,1,1,5,1,1,1,5,5,5,5,5,5,7,3,3,1,1,1,1,7,3,1,9,9,9,4,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,5,3,1,1,1,1,1,1,1,5,1,1,1,5,1,1,5,1,1,1,1,1,5,1,1,5,5,5,
  1,5,1,5,7,1,1,2,2,4,1,2,1,8,1,7,1,1,1,1,8,1,7,1,1,1,8,8,8,8,8,8,8,5,8,8,8,
  5,8,8,5,8,5,5,5,2,8,5,5,7,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,
  8,1,7,1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,2,2,2,2,2,2,2,2,2,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,4,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,7,1,1,2,1,1,5,7,2,2,1,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,
  3,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,8,5,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,
  1,1,8,1,7,1,1,1,8,8,1,8,8,8,1,7,1,1,1,1,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,
  1,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,2,
  1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,4,1,5,5,1,5,7,2,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,
  1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,1,8,1,7,
  1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,7,1,2,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,7,1,1,2,3,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,8,8,
  8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,1,8,8,8,8,8,8,8,1,8,
  8,8,8,8,8,8,8,1,7,1,1,1,1,8,1,5,7,1,1,1,8,1,8,8,1,7,1,1,1,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,1,1,1,5,1,
  5,7,2,2,1,2,4,1,1,2,4,1,1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,
  1,7,1,1,1,1,5,1,5,7,2,2,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,7,2,1,1,1,8,1,7,1,1,1,
  2,4,1,1,8,1,7,1,1,1,2,2,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,
  1,8,1,7,1,1,1,9,9,9,9,9,9,9,1,9,9,9,9,9,9,1,9,1,7,1,1,8,1,7,1,1,1,1,8,1,7,
  1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,2,4,1,2,4,
  1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,9,
  9,9,9,9,9,9,1,9,9,9,9,9,9,1,9,1,7,1,1,5,1,5,7,2,2,1,2,4,1,2,4,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,2,1,7,1,1,1,1,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,
  1,1,5,5,1,8,5,7,1,1,1,4,4,4,7,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,7,2,1,2,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,
  8,8,8,8,8,8,1,7,1,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,2,1,7,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,7,1,1,2,2,2,7,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,1,1,2,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,3,3,3,3,
  3,5,1,1,1,5,1,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,
  8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,7,1,1,1,2,7,1,2,7,1,1,1,1,1,1,1,1,5,1,1,
  1,5,1,1,5,1,5,5,5,1,5,5,7,2,1,2,2,2,2,5,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,1,1,
  1,1,1,1,1,5,1,1,1,5,1,1,5,5,1,1,1,1,5,1,1,1,5,1,1,5,5,1,5,7,2,1,1,2,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,2,8,7,1,1,1,7,2,1,7,2,2,2,1,7,2,2,1,1,1,1,1,7,2,1,1,1,1,1,1,1,
  7,2,2,3,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,8,8,8,8,
  8,8,8,1,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,
  2,3,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,8,1,7,1,1,1,1,5,8,5,
  1,5,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,
  1,1,2,3,1,1,5,8,5,1,5,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,2,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,
  8,8,8,1,7,1,1,1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,1,2,5,7,1,1,2,1,1,1,7,1,1,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,3,2,
  8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,2,4,7,1,2,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,
  5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,
  1,7,2,1,2,1,5,1,5,7,2,2,1,2,7,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,
  2,7,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,7,2,1,2,1,7,1,5,2,5,5,5,7,2,2,7,1,2,7,
  1,2,7,1,2,7,1,9,1,9,7,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,2,7,
  1,2,7,1,2,7,1,2,7,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  1,7,1,1,1,2,7,1,2,7,1,2,7,1,2,7,1,2,7,2,1,1,1,1,1,1,1,1,9,1,1,1,1,1,1,1,1,
  9,7,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,7,2,1,1,2,4,1,2,4,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,
  7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,1,1,1,7,2,1,1,1,7,1,1,8,1,7,1,1,1,1,
  5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,1,2,3,3,3,5,1,1,1,7,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,8,8,8,1,8,8,8,8,8,8,1,7,1,1,
  1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,8,1,8,8,1,7,1,1,
  1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,
  8,8,8,8,8,1,7,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,1,1,1,
  1,1,1,1,2,2,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,8,7,1,1,1,1,1,1,1,1,1,1,4,1,1,
  1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,
  1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,1,8,1,7,
  1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,2,7,2,4,1,
  2,7,1,2,4,1,2,8,8,8,8,8,8,8,5,8,8,8,8,8,8,5,2,8,5,5,7,1,1,1,8,1,7,1,1,1,1,
  8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,2,1,1,1,2,5,7,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,1,1,3,1,1,8,1,7,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,
  1,2,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,1,8,
  8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,5,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,1,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,7,1,1,3,1,2,1,4,1,1,2,1,7,1,1,1,7,1,1,1,8,1,7,1,1,1,5,5,5,5,5,5,
  5,1,5,5,5,5,5,5,5,5,8,5,1,7,1,1,1,1,8,8,1,7,1,1,1,1,8,1,7,1,1,1,8,8,8,8,8,
  8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,8,1,7,
  1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,
  1,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,7,2,1,7,2,1,5,1,7,2,2,1,1,9,9,9,9,9,9,9,1,
  9,9,9,9,9,9,8,9,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,
  1,1,2,2,2,2,2,2,2,2,2,2,1,1,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,2,7,1,2,7,1,1,1,1,7,2,2,2,7,
  2,7,1,2,7,1,1,7,1,1,1,1,1,1,1,1,1,7,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,7,
  2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,7,2,1,2,1,1,1,1,1,1,1,
  1,1,7,2,2,2,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,7,2,1,2,2,1,1,1,1,1,
  1,1,1,1,1,1,1,2,2,2,2,1,1,7,2,1,2,5,2,5,5,5,7,2,9,9,9,9,9,5,3,3,3,2,7,1,1,
  1,1,1,4,1,1,2,7,1,2,7,1,2,7,1,2,7,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,
  1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,5,1,5,5,7,2,1,2,2,2,5,2,7,
  1,2,7,1,2,7,1,1,1,1,7,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,7,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,
  1,1,2,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,2,4,2,1,7,9,9,9,4,2,7,1,2,7,1,3,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,2,8,7,1,1,2,2,7,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,
  1,1,1,7,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,1,7,2,2,1,7,2,1,7,2,2,1,7,2,
  2,1,7,2,2,1,5,1,5,7,2,2,1,2,7,1,2,2,7,1,1,1,1,1,7,1,1,1,7,1,7,1,5,1,5,7,2,
  2,1,2,7,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,
  2,2,2,2,2,2,2,2,2,2,2,1,2,8,1,8,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,8,8,1,7,1,
  1,1,1,1,1,4,1,1,1,7,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,1,1,7,3,1,
  1,1,4,1,1,1,1,1,4,1,1,8,1,8,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,
  8,8,8,8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,7,2,8,8,8,8,8,8,8,1,8,8,8,8,
  8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,2,
  7,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,
  2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,7,1,1,1,1,1,3,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,1,5,5,1,5,7,
  2,2,1,1,5,5,1,5,7,2,2,1,2,7,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,
  1,1,1,1,1,2,2,2,2,1,1,7,1,1,2,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,
  1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,4,2,7,1,1,1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,7,
  2,1,1,2,9,9,9,9,9,4,2,7,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,1,7,1,1,8,8,8,
  8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,
  1,7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,5,5,1,5,7,3,3,1,1,8,1,7,1,1,1,1,8,1,7,1,1,
  1,1,8,1,7,1,1,1,4,2,4,4,7,1,2,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,5,1,5,7,3,3,
  1,1,5,5,1,5,7,3,3,1,1,1,1,2,7,1,1,3,2,2,2,7,2,1,1,7,2,2,2,2,4,2,2,2,7,1,1,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,2,2,4,1,1,1,1,1,4,1,1,1,1,1,7,1,
  2,1,1,1,7,1,2,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,7,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,2,7,2,8,1,8,8,1,7,1,1,1,2,7,1,2,2,7,1,2,7,1,
  2,7,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,2,2,1,
  1,1,1,1,1,1,7,2,1,3,7,5,2,5,5,5,7,2,9,9,9,9,1,1,9,9,9,9,9,8,9,7,1,1,2,7,2,
  7,1,1,1,1,1,7,1,1,2,7,1,2,8,1,7,1,1,1,9,9,5,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,
  2,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,
  1,1,2,2,2,2,1,1,7,2,1,2,2,2,7,1,2,7,1,2,7,1,8,1,8,8,1,7,1,1,1,2,7,1,2,7,1,
  1,8,8,8,8,8,8,8,1,7,1,1,1,5,5,1,5,5,5,7,2,5,5,1,5,5,5,7,2,2,2,2,7,2,1,1,1,
  1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,1,7,1,3,1,7,1,1,1,7,1,2,8,8,8,8,8,
  8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,
  8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,
  8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,7,1,1,1,1,1,7,1,1,2,7,
  1,1,5,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,8,8,8,1,8,
  8,8,8,8,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,1,7,
  1,1,1,1,1,1,7,1,2,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,8,8,1,8,8,8,8,1,
  7,1,1,1,2,2,2,2,2,2,2,7,1,1,1,5,1,1,5,5,5,5,7,3,1,1,1,1,1,4,1,1,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,5,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,1,7,1,1,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,
  7,1,1,1,2,2,7,3,1,2,7,3,7,1,1,1,1,1,1,1,1,1,7,1,2,2,1,1,1,7,1,1,1,1,1,1,1,
  1,1,1,1,1,1,2,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,7,
  1,2,1,1,1,1,8,1,7,1,1,1,1,1,1,5,2,2,2,2,2,4,2,2,2,7,1,5,1,5,7,2,2,1,1,5,1,
  5,7,2,2,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,7,2,1,2,1,5,5,1,
  5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,
  7,2,2,1,2,7,3,3,3,5,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,
  1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,
  1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,
  7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,
  1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,
  1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,1,3,3,3,3,
  3,7,3,3
};
static const unsigned short ag_pstt[] = {
1,1,1,1,1,1,1,1,1,1,1,1,384,383,382,381,380,379,378,377,376,375,374,373,372,
  249,246,242,241,154,93,92,91,90,89,88,87,86,85,1,1,11,14,15,16,17,18,19,
  20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,0,0,
  13,12,10,9,8,7,94,1,385,6,237,238,239,2,4,3,370,5,
57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,
282,267,2,240,45,44,43,42,
282,267,245,3,248,46,45,44,43,42,
282,267,245,4,244,47,45,44,43,42,
48,50,49,5,49,49,51,48,
39,6,52,52,
35,7,
34,8,
33,9,
32,10,
53,11,54,
30,12,
29,13,
53,14,55,
53,15,56,
53,16,57,
53,17,58,
53,18,59,
53,19,60,
53,20,61,
53,21,62,
53,22,63,
53,23,64,
53,24,65,
53,25,66,
53,26,67,
53,27,68,
53,28,69,
53,29,70,
53,30,71,
53,31,72,
53,32,73,
53,33,74,
53,34,75,
53,35,76,
53,36,77,
53,37,78,
53,38,79,
53,39,80,
53,40,81,
53,41,82,
83,83,83,83,83,83,83,83,84,42,85,286,281,285,
87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,47,87,87,87,43,
  86,89,88,270,87,
313,313,313,313,313,49,313,313,44,90,92,91,
313,313,313,313,313,49,313,313,45,90,93,91,
94,94,94,94,94,94,94,94,94,94,94,46,247,95,94,
94,94,94,94,94,94,94,94,94,94,94,47,243,95,94,
44,44,45,
48,49,96,
39,39,39,39,43,39,39,39,39,39,39,39,39,39,39,39,43,43,50,
94,94,94,94,94,94,94,94,94,249,246,242,241,94,94,51,97,97,389,95,94,386,387,
  388,2,4,3,
98,98,98,39,52,151,99,99,
36,36,36,36,36,36,36,36,36,36,36,36,48,36,36,36,36,36,36,36,36,36,36,36,36,
  36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
  36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,
  36,48,36,36,53,38,38,48,
94,94,94,94,94,94,94,94,94,94,94,54,100,225,95,94,
102,104,105,103,101,55,107,743,741,738,106,742,744,745,
1,1,1,1,1,1,1,679,678,677,1,1,1,1,1,1,1,56,109,680,1,674,108,
110,110,110,110,110,110,110,110,110,110,110,110,110,57,114,664,110,110,112,
  111,113,
110,110,110,110,110,110,110,110,110,110,110,110,110,58,116,664,110,110,659,
  115,111,
117,117,117,117,117,117,117,117,117,117,117,117,249,246,242,241,117,118,53,
  117,59,129,125,124,119,126,122,121,120,647,647,647,647,647,127,123,642,
  128,
117,117,117,117,117,117,117,117,117,117,117,117,249,246,242,241,117,118,53,
  117,60,132,125,124,119,126,122,121,120,131,131,131,131,131,130,123,637,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
  133,133,133,133,133,133,133,133,61,136,134,133,135,136,
137,137,137,62,139,137,138,722,
137,137,137,63,141,137,140,713,
137,456,455,454,453,452,451,450,137,137,64,145,137,144,143,142,612,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,123,122,
  121,120,119,118,117,146,146,65,148,124,146,105,147,
1,1,1,1,1,1,1,704,703,702,701,700,1,1,1,1,1,1,1,66,150,705,1,697,149,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,67,153,630,1,151,152,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,633,68,155,630,1,151,154,155,
156,156,156,69,158,156,157,626,
156,156,156,70,161,156,159,160,
1,1,1,1,1,1,1,1,1,1,1,1,93,92,91,90,89,88,87,86,85,1,1,71,164,94,1,162,163,
1,1,1,1,1,1,1,1,1,1,1,1,166,1,1,72,167,165,1,554,554,
1,1,1,1,1,1,1,1,1,1,1,1,169,1,1,73,170,168,1,484,484,
117,117,117,117,117,117,117,117,117,117,117,117,117,118,53,117,74,174,125,
  124,171,172,123,173,608,
1,1,1,1,1,1,1,1,1,1,1,1,174,1,1,75,178,173,1,177,167,176,175,
179,179,179,76,181,179,180,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
  133,133,133,133,133,133,133,133,77,183,134,133,182,
117,117,117,117,117,117,117,117,117,117,117,117,412,249,246,242,241,117,118,
  53,117,78,187,125,124,119,126,122,121,120,184,184,184,184,184,185,123,
  187,412,186,415,
188,456,455,454,453,452,451,450,188,188,79,192,448,191,190,142,189,
137,456,455,454,453,452,451,450,137,137,80,194,137,193,443,444,142,
117,117,117,117,117,117,117,117,117,117,117,117,249,246,242,241,117,118,53,
  117,81,197,125,124,119,126,122,121,120,195,195,195,195,195,390,196,123,
198,198,198,82,201,200,199,198,
202,202,202,202,202,202,202,202,202,202,202,287,202,
203,203,203,203,203,205,84,208,207,206,204,
48,283,209,
83,83,83,83,83,83,83,83,84,86,85,286,266,285,
272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,
  272,272,272,272,273,
48,268,210,
47,89,211,
212,212,212,212,212,212,212,48,212,212,212,212,212,212,212,212,212,212,212,
  212,212,212,212,212,212,212,212,212,212,212,48,212,90,212,212,48,
49,314,213,
356,356,356,356,50,356,356,92,214,251,215,
356,356,356,356,50,356,356,93,214,250,215,
228,228,228,228,228,228,228,228,228,228,228,229,
48,95,216,
217,217,217,217,217,217,217,217,217,217,217,217,217,48,217,217,217,217,217,
  217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,48,
  217,36,96,217,217,48,
39,97,218,218,
219,219,219,98,
39,153,220,
31,100,
48,221,48,101,221,221,48,
48,222,48,102,222,222,48,
48,223,48,103,223,223,48,
48,224,48,104,224,224,48,
48,225,48,105,225,225,48,
48,226,48,739,106,226,226,48,
28,107,
48,227,48,36,108,227,227,48,
27,109,
66,66,66,66,66,66,66,66,66,66,66,66,66,67,66,
42,663,228,
48,36,48,36,112,672,672,48,
41,671,229,
26,114,
48,230,48,36,115,230,230,48,
25,116,
402,402,402,402,402,402,402,231,402,402,402,402,402,402,402,402,231,402,117,
  231,231,405,
233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,232,233,234,233,233,233,233,233,233,233,233,233,233,
  233,233,118,233,233,233,234,
48,119,235,
282,267,245,120,236,238,237,43,42,
282,267,245,121,239,241,240,43,42,
282,267,122,243,242,43,42,
244,244,244,244,244,244,244,244,244,244,244,244,244,244,398,
48,36,48,36,124,397,397,48,
245,245,245,245,48,245,245,245,245,245,245,245,245,245,245,245,48,125,245,
  245,48,
53,230,246,
48,36,48,36,127,646,646,48,
49,643,128,247,248,645,
24,129,
48,249,48,36,130,249,249,48,
49,638,131,250,251,640,
23,132,
60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
  60,60,61,
47,103,252,
48,253,48,36,135,253,253,48,
22,136,
98,98,98,445,
48,254,48,36,138,254,254,48,
21,139,
48,255,48,36,140,255,255,48,
20,141,
48,256,48,142,256,256,48,
48,257,36,48,36,143,257,257,48,
48,258,36,48,36,144,258,258,48,
19,145,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,64,
51,147,259,
18,148,
48,260,48,36,149,260,260,48,
17,150,
48,36,48,36,151,631,631,48,
41,634,261,
16,153,
41,636,261,
15,155,
98,98,98,627,
48,48,36,157,625,625,48,
14,158,
48,48,159,262,48,
48,48,36,160,628,628,48,
13,161,
48,36,48,36,162,164,164,48,
41,163,263,
12,164,
48,48,165,264,48,
48,48,166,265,48,
11,167,
48,48,168,266,48,
48,48,169,267,48,
10,170,
53,171,246,
48,268,36,48,36,172,268,268,48,
41,607,269,
9,174,
48,270,48,175,270,270,48,
48,48,176,271,48,
41,166,272,
8,178,
98,98,98,101,
48,48,36,180,100,100,48,
7,181,
48,48,36,182,102,102,48,
6,183,
49,419,273,274,
48,275,36,48,36,185,275,275,48,
41,413,276,
5,187,
459,459,459,458,
48,48,189,277,48,
48,48,190,278,48,
48,48,36,191,446,446,48,
4,192,
48,48,36,193,439,439,48,
3,194,
49,393,279,280,
48,281,48,36,196,281,281,48,
2,197,
98,98,98,99,
48,48,199,282,48,
48,48,36,200,95,95,48,
1,201,
289,289,289,289,289,289,289,289,289,289,289,290,
283,283,283,283,283,309,
306,306,306,306,306,306,306,284,306,204,285,285,308,
203,203,299,203,203,203,299,299,299,299,299,299,205,302,302,204,
286,298,
287,296,
291,208,
288,288,288,209,288,284,
289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,278,289,289,
  289,210,269,274,289,289,274,
83,83,83,83,83,83,83,83,84,211,85,286,265,285,
290,290,290,290,290,290,290,290,290,290,290,290,290,346,292,294,295,298,299,
  290,290,290,293,296,297,290,290,290,290,290,212,315,317,318,319,320,321,
  322,323,324,325,326,291,
300,300,300,300,300,300,300,48,300,300,300,300,300,300,300,300,300,300,300,
  300,300,300,300,300,300,300,300,300,300,300,48,300,213,300,300,48,
301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,
  301,301,214,358,302,301,
303,357,
304,304,304,304,304,304,304,304,48,304,304,304,304,304,304,304,304,304,304,
  304,304,304,304,304,304,304,304,48,304,216,304,304,48,
305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,
  305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,482,
  483,
154,39,218,151,306,
162,162,162,219,
307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,
  307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,159,
  220,152,307,307,161,
46,221,308,
46,222,309,
46,223,310,
46,224,311,
46,225,312,
40,226,313,
49,676,314,315,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,228,665,1,662,
316,316,316,316,316,316,316,48,316,316,316,316,316,316,48,229,316,316,48,
49,661,317,318,
401,401,403,401,
81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,
  81,81,81,81,81,81,81,81,81,81,81,81,81,81,232,
76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,232,
  76,76,76,76,76,76,76,76,76,76,76,76,76,78,76,76,
79,234,
319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,
  319,319,319,319,319,235,320,319,
117,117,117,117,117,117,117,117,117,117,117,117,117,118,117,236,124,119,230,
  263,123,
48,321,36,36,48,36,237,321,321,48,
48,322,36,36,48,36,238,322,322,48,
117,117,117,117,117,117,117,117,117,117,117,117,117,118,117,239,124,119,230,
  260,123,
48,323,36,36,48,36,240,323,323,48,
48,324,36,36,48,36,241,324,324,48,
48,325,36,36,48,36,242,325,325,48,
48,326,36,36,48,36,243,326,326,48,
402,402,402,402,402,402,402,231,402,402,402,402,402,402,402,402,231,402,244,
  231,231,404,
94,94,94,94,94,94,94,94,94,249,246,242,241,94,94,245,327,389,95,94,386,387,
  388,2,4,3,
328,328,328,328,48,328,328,328,328,328,328,328,328,328,328,328,48,246,328,
  328,48,
329,329,329,329,329,329,329,48,329,329,329,329,329,329,329,329,48,247,329,
  329,48,
49,644,330,
49,638,249,250,251,641,
331,331,331,331,331,331,331,48,331,331,331,331,331,331,331,48,250,331,331,
  48,
49,639,332,
133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,
  133,133,133,133,133,133,133,133,252,104,133,
49,726,333,334,
49,638,254,250,251,723,
49,714,336,335,337,
40,256,338,
52,341,613,257,339,340,341,341,
52,342,613,258,339,340,342,342,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,133,132,
  131,130,129,128,127,126,125,146,146,259,134,146,343,
49,699,344,346,345,
347,347,347,347,347,347,347,48,347,347,347,347,347,347,347,48,261,347,347,
  48,
198,198,198,262,348,198,
349,349,349,349,349,349,349,48,349,349,349,349,349,349,349,349,349,349,349,
  349,349,349,349,349,48,263,349,349,48,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,264,350,1,351,351,
358,358,358,358,358,358,358,356,357,360,105,103,354,363,355,358,358,358,352,
  359,361,362,358,358,358,358,265,358,561,562,565,567,572,353,365,364,560,
  563,564,566,568,569,570,571,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,266,350,1,366,366,
372,372,372,372,372,372,372,369,370,367,372,372,372,352,368,359,361,371,362,
  372,372,372,372,267,372,374,373,490,491,492,493,494,495,496,497,498,499,
  353,
49,610,250,375,
376,376,376,376,376,376,376,48,376,376,376,376,376,376,376,376,376,48,269,
  376,376,48,
51,270,377,
83,83,83,83,83,83,83,83,84,271,379,378,286,285,
380,380,380,380,380,380,380,48,380,380,380,380,380,380,380,380,48,272,380,
  380,48,
381,381,381,381,381,381,381,48,381,381,381,381,381,381,381,381,381,381,48,
  273,381,381,48,
49,420,382,
49,417,273,383,
384,384,384,384,384,384,384,48,384,384,384,384,384,384,384,384,384,384,384,
  384,384,48,276,384,384,48,
471,470,469,468,467,466,465,464,463,462,461,460,277,385,
386,386,386,278,447,387,
388,388,388,388,388,388,388,48,388,388,388,388,388,388,388,388,48,279,388,
  388,48,
49,394,389,
49,391,279,390,
1,1,1,1,1,1,1,1,1,1,1,1,93,92,91,90,89,88,87,86,85,1,1,282,94,1,96,
391,391,391,391,391,310,
203,203,203,203,203,284,303,
284,307,305,
203,203,299,203,203,203,299,299,299,299,299,299,286,301,301,204,
392,392,392,287,297,393,
98,98,98,182,
277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,
  279,277,
394,394,394,394,394,394,394,352,394,394,394,352,394,394,352,394,394,394,394,
  394,352,394,394,352,352,352,394,352,394,352,290,394,394,354,
46,347,395,348,
48,396,48,292,396,396,48,
48,397,48,293,397,397,48,
398,398,398,398,398,398,398,339,398,398,398,339,398,398,339,398,339,339,339,
  46,398,339,339,294,399,398,
48,400,48,295,400,400,48,
48,401,48,296,401,401,48,
48,402,48,297,402,402,48,
48,403,48,298,403,403,48,
48,404,48,299,404,404,48,
290,290,290,290,290,290,290,290,290,290,290,290,290,346,292,294,295,298,299,
  290,290,290,293,296,297,290,290,290,290,290,300,316,317,318,319,320,321,
  322,323,324,325,326,291,
362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,
  362,362,363,
405,302,
301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,
  301,301,303,359,302,301,
406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,
  406,406,406,406,406,406,406,406,304,226,406,
407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,
  407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,
  407,71,305,407,407,73,
48,48,36,306,371,371,48,
158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,
  158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,160,
  158,
36,36,36,36,36,36,36,48,36,36,36,36,36,36,36,36,408,36,48,308,408,408,48,
48,409,48,309,409,409,48,
48,410,48,310,410,410,48,
48,411,48,311,411,411,48,
412,412,48,412,412,412,48,312,412,412,48,
48,413,413,413,413,413,48,313,413,413,48,
414,414,414,414,414,414,414,48,414,414,414,414,414,414,414,414,414,414,48,
  314,414,414,48,
49,675,415,
110,110,110,110,110,110,110,110,110,110,110,110,110,316,664,110,110,673,111,
416,416,416,416,416,416,416,48,416,416,416,416,416,416,416,416,48,317,416,
  416,48,
49,660,417,
235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,
  235,235,235,235,235,236,
48,36,36,48,36,320,264,264,48,
50,356,356,356,321,214,262,215,
50,356,356,356,322,214,261,215,
50,356,356,356,323,214,259,215,
50,356,356,356,324,214,258,215,
50,356,356,356,325,214,257,215,
50,356,356,356,326,214,256,215,
48,418,48,327,418,418,48,
94,94,94,94,94,94,94,94,94,249,246,242,241,94,94,328,419,389,95,94,386,387,
  388,2,4,3,
1,1,1,1,1,1,1,421,1,1,1,1,1,1,1,329,420,1,651,648,422,
423,423,423,423,423,423,423,48,423,423,423,423,423,423,423,423,48,330,423,
  423,48,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,331,424,1,144,
425,425,425,425,425,425,425,48,425,425,425,425,425,425,425,48,332,425,425,
  48,
426,426,426,426,426,426,426,48,426,426,426,426,426,426,426,426,426,426,48,
  333,426,426,48,
49,725,427,
49,716,429,428,
430,430,430,430,430,430,430,48,430,430,430,430,430,430,430,430,48,336,430,
  430,48,
48,431,48,36,337,431,431,48,
432,48,432,432,48,338,432,432,48,
221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,223,221,221,221,221,222,221,221,221,221,221,221,221,
  221,221,339,433,433,
48,36,48,36,340,619,619,48,
49,618,434,435,
49,616,434,436,
48,437,48,36,343,437,437,48,
438,438,438,438,438,438,438,48,438,438,438,438,438,438,438,438,48,344,438,
  438,48,
48,36,48,36,345,706,706,48,
49,698,439,440,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,347,630,1,441,
48,48,348,442,48,
1,1,1,1,1,1,1,1,1,1,1,1,93,92,91,90,89,88,87,86,85,1,1,349,94,1,443,
48,444,48,350,444,444,48,
40,557,445,
48,446,48,352,446,446,48,
534,533,353,449,448,447,
48,450,48,354,450,450,48,
48,451,48,355,451,451,48,
48,452,48,356,452,452,48,
48,453,48,357,453,453,48,
57,57,57,57,57,57,57,454,57,57,57,57,57,57,455,57,454,358,454,
48,456,48,359,456,456,48,
48,457,48,360,457,457,48,
48,458,48,361,458,458,48,
48,459,48,362,459,459,48,
48,460,48,363,460,460,48,
48,36,48,36,364,558,558,48,
40,556,461,
40,487,445,
48,462,48,367,462,462,48,
48,463,48,368,463,463,48,
48,464,48,369,464,464,48,
48,465,48,370,465,465,48,
48,466,48,371,466,466,48,
57,57,57,57,57,57,57,467,57,57,57,57,57,57,455,57,467,372,467,
48,36,48,36,373,488,488,48,
40,486,468,
49,611,332,
117,117,117,117,117,117,117,117,117,117,117,117,117,118,53,117,376,125,124,
  171,172,123,609,
469,469,469,469,469,469,469,48,469,469,469,469,469,469,469,48,377,469,469,
  48,
48,36,36,48,470,36,378,470,470,48,
170,170,170,379,471,
1,1,1,1,1,1,1,1,1,1,1,1,174,1,1,380,173,1,168,176,175,
1,1,1,1,1,1,1,1,1,1,472,473,1,1,474,1,1,381,420,1,426,421,477,476,475,
478,478,478,478,478,478,478,48,478,478,478,478,478,478,478,478,478,478,48,
  382,478,478,48,
49,418,382,
117,117,117,117,117,117,117,117,117,117,117,117,249,246,242,241,117,118,53,
  117,384,125,124,119,126,122,121,120,184,184,184,184,184,185,123,416,
48,48,385,479,48,
476,476,476,386,
48,387,480,
1,1,1,1,1,1,1,1,1,1,1,1,481,1,1,388,420,1,410,482,407,
483,483,483,483,483,483,483,48,483,483,483,483,483,483,483,483,48,389,483,
  483,48,
49,392,389,
312,312,312,312,312,311,
484,484,484,293,
485,393,
351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,
  351,351,353,351,
486,486,486,486,486,486,486,48,486,486,486,486,486,486,486,486,486,486,486,
  486,486,48,486,395,486,486,48,
46,396,487,
46,397,488,
1,1,1,1,1,1,1,341,1,1,1,341,1,1,341,1,341,341,341,1,341,341,398,343,1,343,
338,337,336,340,
46,400,489,
46,401,490,
46,402,491,
46,403,492,
46,404,493,
494,494,494,494,494,494,494,367,494,494,494,367,494,494,367,367,494,494,494,
  494,367,494,494,494,367,494,494,367,367,494,367,405,360,494,494,369,
232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,
  232,232,232,232,232,232,232,232,233,
70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,
  70,70,70,70,70,70,70,70,70,70,70,70,70,72,70,
495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,54,495,408,495,
  495,
496,409,748,
118,410,516,581,580,
118,411,516,747,
497,497,497,497,497,412,582,497,497,
102,104,105,103,101,413,743,741,740,106,742,744,745,
1,1,1,1,1,1,1,500,499,1,1,1,498,1,1,1,1,414,420,1,686,681,503,502,501,
504,504,504,504,504,504,504,48,504,504,504,504,504,504,504,504,504,504,48,
  415,504,504,48,
1,1,1,1,1,1,1,505,1,1,1,1,1,1,1,416,420,1,669,666,506,
507,507,507,507,507,507,507,48,507,507,507,507,507,507,507,507,48,417,507,
  507,48,
396,418,
48,508,48,419,508,508,48,
48,36,509,36,48,36,420,509,509,48,
48,510,48,421,510,510,48,
48,36,48,36,422,650,650,48,
1,1,1,1,1,1,1,421,1,1,1,1,1,1,1,423,420,1,651,649,422,
48,36,511,36,48,36,424,511,511,48,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,425,424,1,145,
1,1,1,1,1,1,1,512,513,514,1,1,1,1,1,1,1,426,420,1,732,732,727,517,516,515,
518,518,518,518,518,518,518,48,518,518,518,518,518,518,518,518,518,518,48,
  427,518,518,48,
48,519,48,36,428,519,519,48,
520,520,520,520,520,520,520,48,520,520,520,520,520,520,520,520,48,429,520,
  520,48,
1,1,1,1,1,1,1,521,1,1,1,1,1,1,1,430,424,1,144,521,
49,638,431,250,251,715,
188,188,188,432,522,189,
221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,
  221,221,221,221,221,223,221,221,221,221,222,221,221,221,221,221,221,221,
  221,221,433,219,220,
523,523,523,523,523,523,523,48,523,523,523,523,523,523,523,523,48,434,523,
  523,48,
49,617,524,
49,615,524,
49,107,437,525,106,526,
1,1,1,1,1,1,1,527,1,1,1,1,1,1,1,438,424,1,707,
528,528,528,528,528,528,528,48,528,528,528,528,528,528,528,528,48,439,528,
  528,48,
48,36,48,36,440,708,708,48,
48,36,48,36,441,632,632,48,
1,1,1,1,1,1,1,1,1,1,1,1,93,92,91,90,89,88,87,86,85,1,1,442,94,1,629,
48,36,48,36,443,165,165,48,
46,444,529,553,
530,530,530,530,530,530,530,48,530,530,530,530,530,530,530,48,445,530,530,
  48,
46,446,531,
1,1,1,1,1,1,1,531,1,1,1,1,1,1,1,447,532,1,529,
532,448,533,
521,523,521,521,521,449,523,
46,450,534,
46,451,535,
46,452,536,
46,453,537,
44,538,44,454,
539,539,539,539,539,539,539,231,539,539,539,539,539,539,539,539,231,455,231,
  231,539,
46,456,540,
46,457,541,
46,458,542,
46,459,543,
46,460,544,
545,545,545,545,545,545,545,48,545,545,545,545,545,545,545,545,545,545,545,
  545,545,545,545,545,545,545,545,48,461,545,545,48,
46,462,546,
46,463,547,
46,464,548,
46,465,549,
46,466,511,550,
551,551,551,551,551,551,551,44,551,551,551,551,551,551,538,551,44,467,551,
  500,
552,552,552,552,552,552,552,48,552,552,552,552,552,552,552,552,552,552,552,
  552,552,552,552,552,48,468,552,552,48,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,469,175,1,553,
48,183,554,
49,169,555,
48,556,48,472,556,556,48,
48,557,48,473,557,557,48,
48,558,48,474,558,558,48,
48,36,36,48,36,475,425,425,48,
48,36,36,48,36,476,424,424,48,
48,36,36,48,36,477,423,423,48,
1,1,1,1,1,1,1,1,1,1,472,473,1,1,474,1,1,478,420,1,426,422,477,476,475,
559,559,559,479,457,
560,560,560,480,561,
48,562,48,481,562,562,48,
48,36,48,36,482,409,409,48,
1,1,1,1,1,1,1,1,1,1,1,1,481,1,1,483,420,1,410,482,408,
295,295,295,294,
392,392,392,485,563,
290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,
  290,290,486,355,
564,564,564,48,564,564,564,564,564,564,48,487,564,564,48,
565,565,565,565,565,565,565,48,565,565,565,565,565,565,565,565,48,488,565,
  565,48,
566,566,566,566,566,566,566,48,566,566,566,566,566,566,566,566,566,566,566,
  566,566,566,566,566,48,489,566,566,48,
567,567,567,48,567,567,567,567,567,567,48,490,567,567,48,
568,48,568,568,48,491,568,568,48,
569,569,569,569,569,569,569,48,569,569,569,569,569,569,569,569,569,48,492,
  569,569,48,
570,570,570,570,570,570,570,48,570,570,570,570,570,570,570,570,570,570,570,
  48,493,570,570,48,
366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,
  366,366,366,368,366,
1,1,1,1,1,1,1,540,539,1,1,1,1,1,1,1,495,541,1,571,
572,572,572,572,572,573,496,572,572,572,572,573,
574,574,574,574,574,583,574,574,
48,575,48,498,575,575,48,
48,576,48,499,576,576,48,
48,577,48,500,577,577,48,
48,36,48,36,501,685,685,48,
48,36,48,36,502,684,684,48,
48,36,48,36,503,683,683,48,
1,1,1,1,1,1,1,500,499,1,1,1,498,1,1,1,1,504,420,1,686,682,503,502,501,
48,578,48,505,578,578,48,
48,36,48,36,506,668,668,48,
1,1,1,1,1,1,1,505,1,1,1,1,1,1,1,507,420,1,669,667,506,
395,508,
46,195,579,
46,510,580,
46,146,529,147,
581,581,581,581,581,581,581,339,581,581,581,581,581,581,339,46,581,339,339,
  512,582,581,
48,583,48,513,583,583,48,
48,584,48,514,584,584,48,
48,36,48,36,515,731,731,48,
48,36,48,36,516,730,730,48,
48,36,48,36,517,729,729,48,
1,1,1,1,1,1,1,512,513,514,1,1,1,1,1,1,1,518,420,1,732,732,728,517,516,515,
49,638,519,250,251,717,
1,1,1,1,1,1,1,521,1,1,1,1,1,1,1,520,424,1,145,521,
48,585,48,521,585,585,48,
48,48,522,586,48,
1,1,1,1,1,1,1,587,1,1,1,1,1,1,1,523,424,1,621,588,
589,589,589,589,589,589,589,48,589,589,589,589,589,589,589,589,48,524,589,
  589,48,
590,590,590,590,590,590,590,590,590,590,590,48,590,590,590,590,590,590,590,
  590,590,590,590,48,525,590,590,48,
49,108,591,
48,592,48,527,592,592,48,
1,1,1,1,1,1,1,527,1,1,1,1,1,1,1,528,424,1,709,
593,593,593,593,593,593,593,48,593,593,593,593,593,593,593,593,48,529,593,
  593,48,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,530,350,1,552,
48,54,48,524,594,48,525,
595,532,
596,596,596,533,596,597,
48,598,48,534,598,598,48,
36,36,36,36,36,36,36,48,36,36,36,36,36,36,36,36,599,36,48,535,599,599,48,
48,600,600,48,536,600,600,48,
48,601,48,537,601,601,48,
602,602,602,602,602,602,602,231,602,602,602,602,602,602,602,602,231,538,231,
  231,602,
604,604,604,604,604,604,604,604,604,604,604,604,604,603,604,539,604,
48,605,48,540,605,605,48,
48,606,48,541,606,606,48,
48,607,48,542,607,607,48,
48,608,48,543,608,608,48,
48,609,48,544,609,609,48,
358,358,358,358,358,358,358,356,357,360,105,103,354,363,355,358,358,358,352,
  359,361,362,358,358,358,358,545,358,561,562,565,567,572,353,610,560,563,
  564,566,568,569,570,571,
48,611,48,546,611,611,48,
48,612,612,48,547,612,612,48,
613,548,543,
613,549,542,
48,36,48,550,510,510,48,614,
57,57,57,57,57,57,57,231,57,57,57,57,57,57,615,57,231,551,231,231,615,
372,372,372,372,372,372,372,369,370,367,372,372,372,352,368,359,361,371,362,
  372,372,372,372,552,372,616,490,491,492,493,494,495,496,497,498,499,353,
48,617,48,553,617,617,48,
618,48,618,618,48,554,618,618,48,
619,619,619,619,619,619,619,48,619,619,619,619,619,619,619,619,619,619,619,
  619,619,619,619,48,555,619,619,48,
46,556,620,
46,557,621,
46,558,622,
623,623,623,559,
477,477,477,560,
48,561,624,
46,562,625,
626,563,
83,83,83,83,83,83,83,83,84,564,345,286,285,
1,1,1,1,1,1,1,1,1,1,1,1,215,1,1,565,216,1,344,
1,1,1,1,1,1,1,1,1,1,1,1,93,92,91,90,89,88,87,86,85,1,1,566,94,1,335,
83,83,83,83,83,83,83,83,84,567,334,286,285,
627,627,627,568,333,
1,1,1,1,1,1,1,1,1,1,1,1,331,330,1,1,569,332,1,328,329,
1,1,1,1,1,1,1,1,1,1,1,1,180,179,178,177,1,1,570,181,1,327,
521,746,521,521,521,571,746,
751,751,751,751,751,753,751,751,751,
754,573,
628,628,628,628,628,584,628,628,
46,575,629,
46,576,630,
46,577,631,
46,578,632,
633,633,633,633,633,633,633,48,633,633,633,633,633,633,633,633,633,48,579,
  633,633,48,
48,634,48,580,634,634,48,
1,1,1,1,1,1,1,341,1,1,1,1,1,1,341,1,341,341,581,737,1,737,
736,735,340,
46,583,635,
46,584,636,
46,585,637,
386,386,386,586,449,387,
48,638,48,587,638,638,48,
48,36,48,36,588,620,620,48,
1,1,1,1,1,1,1,587,1,1,1,1,1,1,1,589,424,1,623,622,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,640,642,
  644,146,146,590,639,146,645,643,641,112,
646,646,646,646,646,646,646,646,646,646,646,48,646,646,646,646,646,646,646,
  646,646,646,646,48,591,646,646,48,
46,592,647,
1,1,1,1,1,1,1,1,1,1,1,1,1,118,1,593,649,1,648,
54,526,527,
650,595,
98,98,98,535,
55,597,651,
54,598,652,575,
653,653,653,653,653,653,653,653,653,653,653,653,653,653,653,54,653,599,653,
  653,
606,605,600,
654,601,597,
656,656,656,656,656,656,656,656,656,656,656,656,656,655,656,602,656,
233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,232,233,657,233,233,233,233,233,233,233,233,233,233,
  233,233,603,233,233,233,657,
57,57,57,57,57,57,57,57,57,57,57,57,57,57,545,
118,605,518,517,
658,606,591,
118,607,516,515,
118,608,502,501,
118,609,574,573,
48,36,48,36,610,559,559,48,
54,611,659,
520,519,612,
660,660,660,660,660,613,661,660,
662,614,
663,615,
48,36,48,36,616,489,489,48,
51,617,664,
288,288,288,618,288,665,
1,1,1,1,1,1,1,1,1,1,1,1,669,671,672,667,666,668,673,674,1,1,619,420,1,171,
  185,186,187,188,189,190,191,192,193,193,201,670,210,
675,48,675,675,675,48,620,675,675,48,
48,676,676,48,621,676,676,48,
48,677,677,48,622,677,677,48,
678,678,678,472,
679,679,679,624,680,
681,681,681,681,681,681,681,48,681,681,681,681,681,681,681,48,625,681,681,
  48,
392,392,392,626,292,
682,682,682,203,
683,683,683,683,683,585,683,683,
684,48,684,684,48,629,684,684,48,
685,48,685,685,48,630,685,685,48,
686,686,686,686,686,686,686,48,686,686,686,686,686,686,686,686,686,686,686,
  686,686,48,631,686,686,48,
687,687,687,687,687,687,687,48,687,687,687,687,687,687,687,48,632,687,687,
  48,
1,1,1,1,1,1,1,1,1,1,1,1,84,1,118,1,633,690,1,689,688,
691,634,652,
692,692,692,692,692,692,692,48,692,692,692,692,692,692,692,48,635,692,692,
  48,
693,693,693,693,693,693,693,48,693,693,693,693,693,693,693,48,636,693,693,
  48,
48,694,694,48,637,694,694,48,
46,638,695,
48,696,48,639,696,696,48,
48,697,48,640,697,697,48,
48,36,48,36,641,111,111,48,
48,698,48,642,698,698,48,
48,36,48,36,643,110,110,48,
48,699,48,644,699,699,48,
48,36,48,36,645,109,109,48,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,640,642,
  644,146,146,646,639,146,702,701,700,116,
703,703,703,703,703,703,703,48,703,703,703,703,703,703,703,703,703,48,647,
  703,703,48,
48,36,36,48,36,648,149,149,48,
48,36,36,48,36,649,148,148,48,
530,650,
1,1,1,1,1,1,1,531,1,1,1,1,1,1,1,651,532,1,528,
94,94,94,94,94,94,94,94,94,249,246,242,241,94,94,652,704,704,389,95,94,386,
  387,388,2,4,3,
1,1,1,1,1,1,1,540,539,1,1,1,1,1,1,1,653,541,1,705,
706,706,706,706,706,706,706,706,706,706,654,706,
233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,232,233,707,233,233,233,233,233,233,233,233,233,233,
  233,233,655,233,233,233,707,
57,57,57,57,57,57,57,57,57,57,57,57,57,57,547,
546,657,
709,709,48,709,709,709,708,48,658,708,708,48,709,710,709,
1,1,1,1,1,1,1,540,539,1,1,1,1,1,1,1,659,541,1,711,537,
83,83,83,83,83,84,
544,661,
713,713,713,713,713,713,713,712,713,713,713,713,713,713,713,713,713,713,712,
  662,712,713,
714,714,714,714,714,714,714,231,714,714,714,714,714,714,714,714,231,663,231,
  231,714,
715,715,715,715,715,715,715,48,715,715,715,715,715,715,715,715,715,715,715,
  48,664,715,715,48,
48,36,36,48,36,665,184,184,48,
48,36,36,36,48,36,666,207,207,48,
48,716,48,667,716,716,48,
48,717,48,668,717,717,48,
48,718,48,669,718,718,48,
208,46,208,208,670,719,206,
48,720,48,671,720,720,48,
48,721,48,672,721,721,48,
48,36,36,48,36,673,200,200,48,
48,36,36,48,36,674,199,199,48,
137,137,137,54,675,722,137,440,441,
438,437,676,436,
723,724,677,427,
474,474,474,473,
478,478,478,679,
48,48,680,725,48,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,681,406,1,
205,205,205,204,
726,726,726,726,726,586,726,726,
137,137,137,684,137,688,
137,137,137,685,137,687,
1,1,1,1,1,1,1,695,694,693,692,691,690,1,1,1,1,1,1,1,686,696,1,689,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,687,670,1,
48,36,36,48,36,688,198,198,48,
48,36,36,48,36,689,197,197,48,
48,36,36,48,36,690,196,196,48,
727,727,727,727,727,727,727,727,727,727,727,727,727,691,728,727,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,692,734,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,693,733,1,
721,720,694,718,
729,48,729,729,48,695,729,729,48,
46,696,730,141,
46,697,731,
46,698,732,
46,699,733,
48,36,48,36,700,115,115,48,
48,36,48,36,701,114,114,48,
48,36,48,36,702,113,113,48,
1,1,1,1,1,1,1,711,710,1,1,1,1,1,1,1,703,712,1,
576,704,
521,579,521,521,521,705,579,
599,599,599,599,734,734,599,599,599,599,599,734,599,706,734,734,
548,707,
593,708,
735,735,735,735,735,709,735,735,
592,710,
48,536,736,48,711,736,736,48,
44,44,504,
1,1,1,1,1,1,1,1,1,1,1,1,242,241,1,505,1,713,509,1,737,2,738,737,738,
740,740,740,740,740,740,740,740,740,740,740,740,740,739,740,714,740,
1,1,1,1,1,1,1,1,1,1,1,1,180,179,178,177,1,1,715,181,1,172,176,
46,716,741,
46,717,742,
46,718,743,
744,48,744,744,48,719,744,744,48,
46,720,745,
46,721,746,
48,747,747,747,747,747,747,747,48,722,747,747,48,
428,428,748,428,428,428,723,431,
428,428,748,428,428,428,724,430,
481,480,479,725,475,
749,749,749,749,749,587,749,749,
750,750,750,750,750,750,750,750,750,750,750,750,750,656,656,750,727,750,658,
751,728,
137,137,137,729,137,624,
752,752,752,752,752,752,752,752,752,752,752,48,752,752,752,752,752,752,752,
  752,752,48,730,752,752,48,
753,753,753,753,753,753,753,753,753,753,753,48,753,753,753,753,753,753,753,
  753,753,48,731,753,753,48,
754,754,754,754,754,754,754,754,754,754,754,48,754,754,754,754,754,754,754,
  754,754,48,732,754,754,48,
755,755,755,755,755,755,755,755,755,755,755,48,755,755,755,755,755,755,755,
  755,755,48,733,755,755,48,
602,734,
756,756,756,756,756,735,756,756,
40,736,757,
758,507,758,
712,759,712,738,712,759,
233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,
  233,233,233,233,233,232,233,760,233,233,233,233,233,233,233,233,233,233,
  233,233,739,233,233,233,760,
57,57,57,57,57,57,57,57,57,57,57,57,57,57,549,
761,761,761,48,761,761,761,761,761,761,48,741,761,761,48,
762,48,762,762,48,742,762,762,48,
763,763,763,763,763,763,763,48,763,763,763,763,763,763,763,763,48,743,763,
  763,48,
288,288,288,744,288,209,
764,764,764,764,764,764,764,48,764,764,764,764,764,764,764,48,745,764,764,
  48,
765,765,48,765,765,765,765,48,746,765,765,48,
456,455,454,453,452,451,450,747,766,142,
767,432,767,767,432,432,432,432,748,429,
768,768,768,768,768,588,768,768,
655,655,655,655,655,655,655,655,655,655,655,655,655,655,657,
727,727,727,727,727,727,727,727,727,727,727,727,727,751,769,727,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,118,
  146,752,771,146,770,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,118,
  146,753,139,146,140,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,118,
  146,754,137,146,138,
146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,118,
  146,755,135,146,136,
772,772,772,772,772,756,772,772,
773,773,773,773,773,773,773,48,773,773,773,773,773,773,773,773,773,48,757,
  773,773,48,
242,241,758,513,2,
506,759,
550,760,
83,83,83,83,83,83,83,83,84,761,774,286,285,
627,627,627,762,775,
1,1,1,1,1,1,1,1,1,1,1,1,215,1,1,763,216,1,776,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,764,777,1,
203,203,203,203,203,205,765,778,217,207,206,204,
48,779,48,766,779,779,48,
780,780,780,433,
590,590,590,590,590,589,590,590,
653,769,
48,36,48,36,770,143,143,48,
48,36,48,36,771,142,142,48,
781,781,781,781,781,772,781,781,
1,1,1,1,1,1,1,540,539,1,1,1,1,1,1,1,773,541,1,538,
48,36,36,48,36,774,211,211,48,
48,36,36,48,36,775,202,202,48,
48,36,36,48,36,776,214,214,48,
48,36,36,48,36,777,213,213,48,
48,36,36,48,36,778,212,212,48,
442,779,
435,435,435,434,
782,782,782,782,782,781,782,782,
783,783,783,783,783,782,783,783,
784,784,784,784,784,783,784,784,
785,785,785,785,785,784,785,785,
786,786,786,786,786,785,786,786,
787,787,787,787,787,786,787,787,
788,788,788,788,788,787,788,788,
789,789,789,789,789,788,789,789,
790,790,790,790,790,789,790,790,
791,791,791,791,791,790,791,791,
792,792,792,792,792,791,792,792,
793,793,793,793,793,792,793,793,
794,794,794,794,794,793,794,794,
795,795,795,795,795,794,795,795,
796,796,796,796,796,795,796,796,
797,797,797,797,797,796,797,797,
798,798,798,798,798,797,798,798,
799,799,799,799,799,798,799,799,
800,800,800,800,800,799,800,800,
801,801,801,801,801,800,801,801,
802,802,802,802,802,801,802,802,
803,803,803,803,803,802,803,803,
804,804,804,804,804,803,804,804,
805,805,805,805,805,804,805,805,
806,806,806,806,806,805,806,806,
807,807,807,807,807,806,807,807,
594,594,594,594,594,807,594,594,
};
static const unsigned short ag_sbt[] = {
     0,  90, 105, 113, 123, 133, 141, 145, 147, 149, 151, 153, 156, 158,
   160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199,
   202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241,
   244, 258, 288, 300, 312, 327, 342, 345, 348, 367, 394, 402, 483, 499,
   513, 536, 557, 578, 616, 653, 686, 694, 702, 719, 751, 776, 796, 818,
   826, 834, 863, 884, 905, 930, 953, 960, 992,1033,1050,1067,1104,1112,
  1125,1136,1139,1153,1177,1180,1183,1219,1222,1233,1244,1256,1259,1302,
  1306,1310,1313,1315,1322,1329,1336,1343,1350,1358,1360,1368,1370,1385,
  1388,1396,1399,1401,1409,1411,1433,1477,1480,1489,1498,1505,1520,1528,
  1549,1552,1560,1566,1568,1576,1582,1584,1612,1615,1623,1625,1629,1637,
  1639,1647,1649,1656,1665,1674,1676,1696,1699,1701,1709,1711,1719,1722,
  1724,1727,1729,1733,1740,1742,1747,1754,1756,1764,1767,1769,1774,1779,
  1781,1786,1791,1793,1796,1805,1808,1810,1817,1822,1825,1827,1831,1838,
  1840,1847,1849,1853,1862,1865,1867,1871,1876,1881,1888,1890,1897,1899,
  1903,1911,1913,1917,1922,1929,1931,1943,1949,1962,1978,1980,1982,1984,
  1990,2016,2030,2073,2109,2134,2136,2169,2207,2212,2216,2258,2261,2264,
  2267,2270,2273,2276,2280,2298,2317,2321,2325,2365,2406,2408,2435,2456,
  2466,2476,2497,2507,2517,2527,2537,2559,2585,2606,2627,2630,2636,2656,
  2659,2689,2693,2699,2704,2707,2715,2723,2755,2760,2780,2786,2815,2834,
  2878,2897,2935,2939,2961,2964,2978,2999,3022,3025,3029,3055,3069,3075,
  3096,3099,3103,3130,3136,3143,3146,3162,3168,3172,3193,3227,3231,3238,
  3245,3271,3278,3285,3292,3299,3306,3349,3371,3373,3398,3428,3471,3478,
  3516,3539,3546,3553,3560,3571,3582,3605,3608,3627,3648,3651,3676,3685,
  3693,3701,3709,3717,3725,3733,3740,3766,3787,3808,3826,3846,3869,3872,
  3876,3897,3905,3914,3956,3964,3968,3972,3980,4001,4009,4013,4031,4036,
  4063,4070,4073,4080,4086,4093,4100,4107,4114,4133,4140,4147,4154,4161,
  4168,4176,4179,4182,4189,4196,4203,4210,4217,4236,4244,4247,4250,4273,
  4293,4303,4308,4329,4354,4377,4380,4416,4421,4425,4428,4449,4470,4473,
  4479,4483,4485,4508,4535,4538,4541,4567,4571,4574,4577,4580,4583,4586,
  4622,4650,4690,4710,4713,4718,4722,4731,4744,4769,4792,4813,4834,4836,
  4843,4853,4860,4868,4889,4899,4917,4943,4966,4974,4995,5015,5021,5027,
  5069,5090,5093,5096,5102,5121,5142,5150,5158,5185,5193,5197,5217,5220,
  5239,5242,5249,5252,5255,5258,5261,5265,5286,5289,5292,5295,5298,5301,
  5333,5336,5339,5342,5345,5349,5369,5398,5416,5419,5422,5429,5436,5443,
  5452,5461,5470,5495,5500,5505,5512,5520,5541,5545,5550,5573,5588,5609,
  5638,5653,5662,5684,5708,5732,5752,5764,5772,5779,5786,5793,5801,5809,
  5817,5842,5849,5857,5878,5880,5883,5886,5890,5912,5919,5926,5934,5942,
  5950,5976,5982,6002,6009,6014,6034,6055,6083,6086,6093,6112,6133,6151,
  6158,6160,6166,6173,6196,6204,6211,6232,6249,6256,6263,6270,6277,6284,
  6327,6334,6342,6345,6348,6356,6377,6414,6421,6430,6458,6461,6464,6467,
  6471,6475,6478,6481,6483,6496,6515,6542,6555,6560,6581,6603,6610,6619,
  6621,6629,6632,6635,6638,6641,6663,6670,6692,6695,6698,6701,6704,6710,
  6717,6725,6745,6774,6802,6805,6824,6827,6829,6833,6836,6840,6860,6863,
  6866,6883,6927,6942,6946,6949,6953,6957,6961,6969,6972,6975,6983,6985,
  6987,6995,6998,7004,7043,7053,7061,7069,7073,7078,7098,7103,7107,7115,
  7124,7133,7159,7179,7200,7203,7223,7243,7251,7254,7261,7268,7276,7283,
  7291,7298,7306,7335,7357,7366,7375,7377,7396,7423,7443,7455,7499,7514,
  7516,7531,7552,7558,7560,7582,7603,7627,7636,7646,7653,7660,7667,7674,
  7681,7688,7697,7706,7715,7719,7723,7727,7731,7736,7753,7757,7765,7771,
  7777,7801,7818,7827,7836,7845,7861,7878,7895,7899,7908,7912,7915,7918,
  7921,7929,7937,7945,7964,7966,7973,7989,7991,7993,8001,8003,8011,8014,
  8039,8056,8079,8082,8085,8088,8097,8100,8103,8116,8124,8132,8137,8145,
  8164,8166,8172,8198,8224,8250,8276,8278,8286,8289,8292,8298,8342,8357,
  8372,8381,8402,8408,8428,8440,8450,8460,8468,8483,8499,8523,8547,8571,
  8595,8603,8625,8630,8632,8634,8647,8652,8671,8688,8700,8707,8711,8719,
  8721,8729,8737,8745,8765,8774,8783,8792,8801,8810,8812,8816,8824,8832,
  8840,8848,8856,8864,8872,8880,8888,8896,8904,8912,8920,8928,8936,8944,
  8952,8960,8968,8976,8984,8992,9000,9008,9016,9024,9032
};
static const unsigned short ag_sbe[] = {
    70, 104, 107, 116, 126, 136, 142, 146, 148, 150, 152, 154, 157, 159,
   161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200,
   203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 242,
   253, 282, 296, 308, 323, 338, 344, 346, 366, 382, 398, 479, 494, 504,
   530, 549, 570, 598, 636, 680, 689, 697, 712, 745, 770, 790, 811, 821,
   829, 857, 878, 899, 921, 945, 956, 987,1013,1043,1060,1087,1107,1123,
  1131,1137,1148,1176,1178,1181,1215,1220,1229,1240,1255,1257,1298,1303,
  1309,1311,1314,1318,1325,1332,1339,1346,1354,1359,1364,1369,1383,1386,
  1392,1397,1400,1405,1410,1429,1472,1478,1483,1492,1500,1519,1524,1545,
  1550,1556,1562,1567,1572,1578,1583,1611,1613,1619,1624,1628,1633,1638,
  1643,1648,1652,1661,1670,1675,1695,1697,1700,1705,1710,1715,1720,1723,
  1725,1728,1732,1736,1741,1744,1750,1755,1760,1765,1768,1771,1776,1780,
  1783,1788,1792,1794,1801,1806,1809,1813,1819,1823,1826,1830,1834,1839,
  1843,1848,1850,1858,1863,1866,1870,1873,1878,1884,1889,1893,1898,1900,
  1907,1912,1916,1919,1925,1930,1942,1948,1958,1974,1979,1981,1983,1987,
  2010,2025,2060,2105,2130,2135,2165,2205,2209,2215,2253,2259,2262,2265,
  2268,2271,2274,2277,2294,2313,2318,2323,2364,2403,2407,2432,2450,2462,
  2472,2491,2503,2513,2523,2533,2555,2574,2602,2623,2628,2632,2652,2657,
  2686,2690,2695,2700,2705,2710,2718,2751,2756,2776,2783,2811,2829,2860,
  2892,2920,2936,2957,2962,2973,2995,3018,3023,3026,3051,3067,3072,3092,
  3097,3100,3126,3135,3141,3144,3158,3165,3171,3191,3223,3228,3234,3241,
  3268,3274,3281,3288,3295,3302,3336,3370,3372,3394,3425,3467,3474,3514,
  3535,3542,3549,3556,3567,3578,3601,3606,3621,3644,3649,3675,3681,3689,
  3697,3705,3713,3721,3729,3736,3755,3781,3804,3822,3842,3865,3870,3873,
  3893,3901,3910,3953,3960,3965,3969,3976,3997,4005,4010,4027,4033,4059,
  4066,4071,4076,4082,4089,4096,4103,4110,4131,4136,4143,4150,4157,4164,
  4172,4177,4180,4185,4192,4199,4206,4213,4234,4240,4245,4248,4266,4289,
  4299,4306,4323,4346,4373,4378,4400,4418,4424,4426,4443,4466,4471,4478,
  4482,4484,4506,4531,4536,4539,4563,4570,4572,4575,4578,4581,4584,4617,
  4649,4688,4707,4711,4714,4719,4727,4736,4761,4788,4807,4830,4835,4839,
  4849,4856,4864,4883,4895,4913,4934,4962,4970,4991,5010,5017,5024,5066,
  5086,5091,5094,5098,5117,5138,5146,5154,5181,5189,5194,5213,5218,5235,
  5240,5247,5250,5253,5256,5259,5264,5282,5287,5290,5293,5296,5299,5329,
  5334,5337,5340,5343,5346,5366,5394,5412,5417,5420,5425,5432,5439,5448,
  5457,5466,5487,5498,5503,5508,5516,5535,5544,5548,5571,5584,5605,5634,
  5649,5658,5680,5704,5730,5748,5758,5769,5775,5782,5789,5797,5805,5813,
  5834,5845,5853,5872,5879,5881,5884,5887,5909,5915,5922,5930,5938,5946,
  5967,5978,5997,6005,6011,6029,6051,6079,6084,6089,6108,6129,6147,6154,
  6159,6163,6169,6192,6200,6207,6228,6247,6252,6259,6266,6273,6280,6310,
  6330,6338,6343,6346,6351,6373,6400,6417,6426,6454,6459,6462,6465,6470,
  6474,6476,6479,6482,6492,6511,6538,6551,6558,6576,6599,6608,6615,6620,
  6626,6630,6633,6636,6639,6659,6666,6688,6694,6696,6699,6702,6707,6713,
  6721,6740,6767,6798,6803,6820,6825,6828,6832,6834,6837,6857,6862,6864,
  6881,6922,6941,6943,6947,6950,6954,6958,6965,6970,6974,6980,6984,6986,
  6991,6996,7001,7026,7049,7057,7065,7072,7076,7094,7101,7106,7112,7120,
  7129,7155,7175,7195,7201,7219,7239,7247,7252,7257,7264,7272,7279,7287,
  7294,7302,7328,7353,7362,7371,7376,7392,7411,7439,7453,7494,7513,7515,
  7524,7547,7557,7559,7579,7599,7623,7632,7642,7649,7656,7663,7671,7677,
  7684,7693,7702,7710,7717,7721,7726,7730,7733,7750,7756,7762,7768,7774,
  7797,7815,7823,7832,7841,7858,7875,7892,7897,7904,7909,7913,7916,7919,
  7925,7933,7941,7961,7965,7971,7986,7990,7992,7998,8002,8007,8013,8031,
  8054,8074,8080,8083,8086,8093,8098,8101,8112,8122,8130,8135,8142,8161,
  8165,8169,8194,8220,8246,8272,8277,8283,8287,8290,8295,8337,8356,8368,
  8377,8398,8405,8424,8436,8447,8458,8465,8482,8496,8519,8543,8567,8591,
  8600,8621,8627,8631,8633,8643,8650,8667,8685,8694,8703,8710,8716,8720,
  8725,8733,8742,8761,8770,8779,8788,8797,8806,8811,8815,8821,8829,8837,
  8845,8853,8861,8869,8877,8885,8893,8901,8909,8917,8925,8933,8941,8949,
  8957,8965,8973,8981,8989,8997,9005,9013,9021,9029,9032
};
static const unsigned char ag_fl[] = {
  1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,4,2,2,2,
  2,0,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,2,1,1,1,
  2,0,1,2,1,1,2,0,1,3,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,2,3,1,2,1,2,1,2,1,3,
  1,5,0,1,4,4,4,3,5,5,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,
  5,3,4,4,3,4,2,3,4,4,1,2,5,3,1,1,1,1,2,0,1,1,3,1,2,5,1,1,4,4,0,4,9,1,1,
  1,1,1,1,1,1,1,1,2,6,1,1,1,1,1,1,1,1,1,1,2,6,6,6,2,2,1,6,1,2,3,2,2,0,3,
  1,6,6,6,6,1,1,1,1,2,3,1,1,1,1,1,4,1,2,1,1,1,2,1,1,2,1,1,1,1,2,1,1,3,2,
  1,1,3,2,1,3,3,1,1,1,1,4,4,4,4,3,4,4,3,4,4,3,1,1,3,1,1,2,1,1,1,1,2,0,1,
  1,2,1,1,3,1,1,1,1,2,2,3,5,1,2,3,1,3,1,0,1,3,2,2,1,2,0,1,2,1,2,3,4,0,1,
  3,4,1,1,1,1,1,1,1,1,1,1,5,5,5,1,1,1,5,5,5,3,3,3,0,1,0,1,3,5,5,1,1,2,1,
  1,2,0,1,2,3,0,1,2,3,3,1,2,1,1,1,2,0,1,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,2,3,1,2,6,5,2,1,1,1,2,0,1,3,2,5,3,4,2,1,1,1,1,1,1,4,2,3,1,
  2,3,4,2,2,2,1,5,0,2,2,2,0,1,2,3,5,1,1,2,5,1,5,1,1,1,2,3,1,7,1,1,1,1,1,
  1,1,5,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,7,2,2,2,1,1,1,4,5,1,1,3,3,2,5,
  1,1,1,1,1,1,1,1,1,1,3,5,1,0,1,7,9,1,1,1,1,1,1,3,1,5,1,5,1,5,5,0,1,3,3,
  4,4,5,5,2,4,1,1,1,1,1,7,1,5,1,1,1,4,4,3,4,6,5,7,5,7,1,4,3,1,1,3,3,2,5,
  1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,5,3,0,1,7,5,1,5,1,2,3,4,5,6,7,8,5,3,3,32,
  1,1,5,1,2,0,1,4,1,1,5,5,1,1,4,2,3,1,0,1,4,3,4,3,2,4,3,4,4,5,2,1,1,2,5,
  1,2,5,0,1,1,1,1,0,1,2,3,1,0,1,2,2,1,3,4,2,1,5,5,1,2,0,1,2,1,3,2,3,1,1,
  1,3,4,2,1,5,1,2,4,1,3,2,1,1,1,1,3,4,2,2,2,1,5,5,5,1,1,1,1,1,1,1,1,3,2,
  1,1,1,1,1,1,2,3,3,4,7,7,7,1,2,5,3,6,7,1,1,1,1,3,1,3,2,3,4,2,2,2,1,5,5,
  3,3,3,1,1,5,1,1,1,1,1,7,5,5,1,1,2,0,1,3,1,1
};
static const unsigned short ag_ptt[] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
   70, 70,  3, 71, 73, 75, 76, 79, 79, 69, 80, 82, 84, 85, 87, 89, 91, 93,
   95, 97,101,101, 99,104,104,102,107,107,105,110,110,108,114,115,115,116,
  116,111,119,120,120,121,121,117,118,118,127,127,125,128,128,128,128,128,
  128,128,128,128,128,  4,138,141,141,139, 17,142, 15,143,143, 39,144,147,
  147,148,148,148,148,148,148,148,148,145,145,145,145,145,145,145,145,146,
  146,146,146,146,146,146,146,146,146,149,149,150,150,151,151,152,172,172,
  173,173,174,174,175,175,177,177, 60, 60,176,178,183,184,184,185,185,179,
  181, 27,186,186, 19,187,187,188,191,191,189,193,193,194,195,197,197,197,
  197,197,202,190,190,192,192,192,192,192,192,192,192,192,212,213,213,213,
  213,204,205,206,217,219,219,219,210,220,221,221,207,223,208,209,211,229,
  229,226,234,234,232,233,233,233,238, 63,240,244,244,241,245,248,248,242,
  251,251,249, 66, 64, 65,252,255,255,253,253,260,259,254,254,263,256,256,
  269,269,269,269,270,270,271,271,271,272,272,272,273,265,265,274,275,275,
  278,282,282,280,279,285,286,286,287,287,283,268,288,276,276,203,203,290,
  293,293,290,214,296,297,297,297,231,231,298,301,301,298,298,303,304,304,
  305,305,299,302,302,302,302,266,266,306,306,307,307,307,307,307,307,307,
  307,307,307,308,309,309,320,320,321,310,311,312,313,313,313,329,329,330,
  330,313,314,315,316,317,317,336,337,337,338,338,333,334,267,267,339,339,
  340,345,345,342,347,348,348,349,349,343, 61,350,351,351,351,351,351,351,
  351,351,351,351,351,351,351,351,239,239,239,239,  7,365,365,365,365,366,
  366,246,246,370,371,371,372,372,369,369,373,367,367,375,375, 13,376,376,
  377,378,378,380,380,380,380,381,381,382,382,382,382,383,390,390,387,387,
  389,389,389,389,384,393,393,  9,385,398,398,396,396,399, 11,401,401,400,
  404,404,404,404,404,404,404,402,412,412,413,413,413,413,413,413,413,413,
  413,413,413,413,414,414,414,403,427,428,429,430,430,430, 67, 67, 23,434,
  435,435,436,436,438,438,438,438,438,438,438,438,438,438,438,439,451,455,
  455,440,440,456,456,458,454,453,457,457,459,441,462,442,464,446,446,469,
  469,447,467,467,467,467,468,468,472,474,474,471,475,473,448,483,483,484,
  484,484,443,444,488,445,445,445,445,449,449,437,437,490, 25,491,492,492,
  493,493,494,494,494,494,494,494,494,494,494,494,494,494,494,495,504,502,
  506,507,507,501,497,509,498,511,511,511,511,511,511,511,511,496,514,514,
  515,517,512,499,521,521,523,523,519,522,522,500,500, 21,529,529,530,530,
   41,533,533,531,531,531,531,532,534,534,534,534,535, 31,537,538, 29,539,
  540,541,541,542, 35, 33, 33, 49,544,544,543,543, 51,548,548,545,546,546,
  547,547,549,549,550,552,556,556,557,557,553, 53,558,558,559,559,561,562,
  560,560,563,563,564, 55,566,566, 57,567,567,568,568,568,568,569,569,573,
  573,573,573,575,576,574,579,579,579,579,579,579,579, 37,586,586,587,587,
  587,587,587,587,588,588,588,588,594,594,594, 43,598,598,598,598,599,600,
  601,601, 45,605, 47,606,606,607,607,608,608,608,608,609,610,611,611,611,
   59,615,615,616,616,616,616,616,619,617,618,623,624,624,625,625,622,109,
  554
};
static const unsigned short  *ag_valid(PCB_DECL, int ag_k) {
  const unsigned short  *ag_tp = &ag_tstt[ag_sbt[(PCB).sn+1]];
  while (*--ag_tp != (const unsigned short) ag_k) if (*ag_tp == 0) return NULL;
  return ag_tp;
}
int SipParser_change_reduction(PCB_DECL, SipParser_token_type ag_k) {
  if (!ag_valid(PCB_POINTER, ag_k)) return 0;
  (PCB).reduction_token = ag_k;
  return 1;
}
static void ag_default(PCB_DECL, const  int *ag_tp) {
  (PCB).ag_dsn = (PCB).sn;
  (PCB).ag_dtl = ag_tp;
  while (!ag_valid(PCB_POINTER, (SipParser_token_type) *ag_tp)) ag_tp++;
  (PCB).reduction_token = (SipParser_token_type) *ag_tp;
}
static void ag_ra(PCB_DECL)
{
  switch(ag_rpx[(PCB).ag_ap]) {
    case 1: ag_rp_1(PCB_POINTER); break;
    case 2: ag_rp_2(PCB_POINTER); break;
    case 3: ag_rp_3(PCB_POINTER); break;
    case 4: ag_rp_4(PCB_POINTER); break;
    case 5: ag_rp_5(PCB_POINTER); break;
    case 6: ag_rp_6(PCB_POINTER); break;
    case 7: ag_rp_7(PCB_POINTER); break;
    case 8: ag_rp_8(PCB_POINTER); break;
    case 9: ag_rp_9(PCB_POINTER); break;
    case 10: ag_rp_10(PCB_POINTER); break;
    case 11: ag_rp_11(PCB_POINTER); break;
    case 12: ag_rp_12(PCB_POINTER); break;
    case 13: ag_rp_13(PCB_POINTER); break;
    case 14: ag_rp_14(PCB_POINTER); break;
    case 15: ag_rp_15(PCB_POINTER); break;
    case 16: ag_rp_16(PCB_POINTER); break;
    case 17: V(0,ParserBasicToken) = ag_rp_17(PCB_POINTER); break;
    case 18: V(0,ParserBasicToken) = ag_rp_18(PCB_POINTER); break;
    case 19: V(0,ParserBasicToken) = ag_rp_19(PCB_POINTER); break;
    case 20: V(0,ParserBasicToken) = ag_rp_20(PCB_POINTER); break;
    case 21: V(0,ParserBasicToken) = ag_rp_21(PCB_POINTER); break;
    case 22: V(0,ParserQuotedString) = ag_rp_22(PCB_POINTER); break;
    case 23: V(0,ParserBasicToken) = ag_rp_23(PCB_POINTER); break;
    case 24: V(0,ParserMethod) = ag_rp_24(PCB_POINTER); break;
    case 25: V(0,ParserMethod) = ag_rp_25(PCB_POINTER); break;
    case 26: V(0,ParserMethod) = ag_rp_26(PCB_POINTER); break;
    case 27: V(0,ParserMethod) = ag_rp_27(PCB_POINTER); break;
    case 28: V(0,ParserMethod) = ag_rp_28(PCB_POINTER); break;
    case 29: V(0,ParserMethod) = ag_rp_29(PCB_POINTER); break;
    case 30: V(0,ParserMethod) = ag_rp_30(PCB_POINTER); break;
    case 31: V(0,ParserMethod) = ag_rp_31(PCB_POINTER); break;
    case 32: V(0,ParserMethod) = ag_rp_32(PCB_POINTER); break;
    case 33: V(0,ParserMethod) = ag_rp_33(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 34: ag_rp_34(PCB_POINTER, V(0,ParserCSeq)); break;
    case 35: V(0,ParserCSeq) = ag_rp_35(PCB_POINTER, V(0,ParserSequenceNumber), V(2,ParserMethod)); break;
    case 36: V(0,ParserSequenceNumber) = ag_rp_36(PCB_POINTER); break;
    case 37: ag_rp_37(PCB_POINTER, V(0,ParserContentLength)); break;
    case 38: V(0,ParserContentLength) = ag_rp_38(PCB_POINTER); break;
    case 39: ag_rp_39(PCB_POINTER, V(0,ParserCallId)); break;
    case 40: V(0,ParserCallId) = ag_rp_40(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 41: V(0,ParserCallId) = ag_rp_41(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 42: ag_rp_42(PCB_POINTER); break;
    case 43: ag_rp_43(PCB_POINTER, V(0,ParserMediaType), V(2,ParserMediaSubType)); break;
    case 44: ag_rp_44(PCB_POINTER); break;
    case 45: ag_rp_45(PCB_POINTER, V(2,ParserBoundary)); break;
    case 46: ag_rp_46(PCB_POINTER, V(2,ParserBase)); break;
    case 47: ag_rp_47(PCB_POINTER, V(2,ParserBase)); break;
    case 48: ag_rp_48(PCB_POINTER); break;
    case 49: ag_rp_49(PCB_POINTER, V(3,ParserBoundary)); break;
    case 50: ag_rp_50(PCB_POINTER, V(3,ParserBase)); break;
    case 51: ag_rp_51(PCB_POINTER, V(3,ParserBase)); break;
    case 52: V(0,ParserMediaType) = ag_rp_52(PCB_POINTER); break;
    case 53: V(0,ParserMediaType) = ag_rp_53(PCB_POINTER); break;
    case 54: V(0,ParserMediaType) = ag_rp_54(PCB_POINTER); break;
    case 55: V(0,ParserMediaType) = ag_rp_55(PCB_POINTER); break;
    case 56: V(0,ParserMediaType) = ag_rp_56(PCB_POINTER); break;
    case 57: V(0,ParserMediaType) = ag_rp_57(PCB_POINTER); break;
    case 58: V(0,ParserMediaType) = ag_rp_58(PCB_POINTER); break;
    case 59: V(0,ParserMediaType) = ag_rp_59(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 60: V(0,ParserMediaSubType) = ag_rp_60(PCB_POINTER); break;
    case 61: V(0,ParserMediaSubType) = ag_rp_61(PCB_POINTER); break;
    case 62: V(0,ParserMediaSubType) = ag_rp_62(PCB_POINTER); break;
    case 63: V(0,ParserMediaSubType) = ag_rp_63(PCB_POINTER); break;
    case 64: V(0,ParserMediaSubType) = ag_rp_64(PCB_POINTER); break;
    case 65: V(0,ParserMediaSubType) = ag_rp_65(PCB_POINTER); break;
    case 66: V(0,ParserMediaSubType) = ag_rp_66(PCB_POINTER); break;
    case 67: V(0,ParserMediaSubType) = ag_rp_67(PCB_POINTER); break;
    case 68: V(0,ParserMediaSubType) = ag_rp_68(PCB_POINTER); break;
    case 69: V(0,ParserMediaSubType) = ag_rp_69(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 70: V(0,ParserBoundary) = ag_rp_70(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 71: V(0,ParserBoundary) = ag_rp_71(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 72: V(0,ParserBase) = ag_rp_72(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 73: V(0,ParserBase) = ag_rp_73(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 74: V(0,ParserBase) = ag_rp_74(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 75: V(0,ParserBase) = ag_rp_75(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 76: ag_rp_76(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 77: V(0,ParserGenericParamDataVal) = ag_rp_77(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 78: V(0,ParserGenericParamDataVal) = ag_rp_78(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 79: ag_rp_79(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 80: ag_rp_80(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 81: V(0,ParserGenericParamDataVal) = ag_rp_81(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 82: V(0,ParserGenericParamDataVal) = ag_rp_82(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 83: ag_rp_83(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode), V(4,ParserReasonPhrase)); break;
    case 84: ag_rp_84(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode)); break;
    case 85: V(0,ParserSipVersion) = ag_rp_85(PCB_POINTER); break;
    case 86: V(0,ParserReasonPhrase) = ag_rp_86(PCB_POINTER); break;
    case 87: V(0,ParserStatusCode) = ag_rp_87(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 88: ag_rp_88(PCB_POINTER, V(0,ParserMethod)); break;
    case 89: ag_rp_89(PCB_POINTER, V(3,ParserMethod)); break;
    case 90: ag_rp_90(PCB_POINTER); break;
    case 91: ag_rp_91(PCB_POINTER); break;
    case 92: ag_rp_92(PCB_POINTER); break;
    case 93: ag_rp_93(PCB_POINTER); break;
    case 94: ag_rp_94(PCB_POINTER, V(3,ParserViaParam)); break;
    case 95: ag_rp_95(PCB_POINTER, V(0,ParserProtocolName), V(4,ParserProtocolVersion), V(8,ParserTransport)); break;
    case 96: V(0,ParserProtocolName) = ag_rp_96(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 97: V(0,ParserProtocolName) = ag_rp_97(PCB_POINTER); break;
    case 98: V(0,ParserProtocolVersion) = ag_rp_98(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 99: V(0,ParserTransport) = ag_rp_99(PCB_POINTER, V(0,ParserTransport)); break;
    case 100: V(0,ParserTransport) = ag_rp_100(PCB_POINTER); break;
    case 101: V(0,ParserTransport) = ag_rp_101(PCB_POINTER); break;
    case 102: V(0,ParserTransport) = ag_rp_102(PCB_POINTER); break;
    case 103: V(0,ParserTransport) = ag_rp_103(PCB_POINTER); break;
    case 104: V(0,ParserTransport) = ag_rp_104(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 105: V(0,ParserPort) = ag_rp_105(PCB_POINTER); break;
    case 106: ag_rp_106(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 107: ag_rp_107(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserPort)); break;
    case 108: V(0,ParserViaParam) = ag_rp_108(PCB_POINTER); break;
    case 109: V(0,ParserViaParam) = ag_rp_109(PCB_POINTER); break;
    case 110: V(0,ParserViaParam) = ag_rp_110(PCB_POINTER, V(0,ParserTTLParam)); break;
    case 111: V(0,ParserViaParam) = ag_rp_111(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 112: V(0,ParserViaParam) = ag_rp_112(PCB_POINTER, V(0,ParserReceived)); break;
    case 113: V(0,ParserViaParam) = ag_rp_113(PCB_POINTER, V(0,ParserBranch)); break;
    case 114: V(0,ParserViaParam) = ag_rp_114(PCB_POINTER, V(0,ParserPort)); break;
    case 115: V(0,ParserViaParam) = ag_rp_115(PCB_POINTER, V(0,ParserCompParam)); break;
    case 116: V(0,ParserViaParam) = ag_rp_116(PCB_POINTER); break;
    case 117: ag_rp_117(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 118: ag_rp_118(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 119: ag_rp_119(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserQuotedString)); break;
    case 120: ag_rp_120(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 121: V(0,ParserTTLParam) = ag_rp_121(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 122: V(0,ParserTtlParam) = ag_rp_122(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 123: V(0,ParserBasicToken) = ag_rp_123(PCB_POINTER); break;
    case 124: V(0,ParserBasicToken) = ag_rp_124(PCB_POINTER); break;
    case 125: V(0,ParserBasicToken) = ag_rp_125(PCB_POINTER); break;
    case 126: V(0,ParserPort) = ag_rp_126(PCB_POINTER, V(1,ParserPort)); break;
    case 127: V(0,ParserPort) = ag_rp_127(PCB_POINTER); break;
    case 128: V(0,ParserPort) = ag_rp_128(PCB_POINTER, V(2,ParserPort)); break;
    case 129: V(0,ParserMaddrParam) = ag_rp_129(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 130: V(0,ParserMaddrParam) = ag_rp_130(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 131: V(0,ParserReceived) = ag_rp_131(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 132: V(0,ParserBranch) = ag_rp_132(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 133: V(0,ParserCompParam) = ag_rp_133(PCB_POINTER, V(4,ParserCompParam)); break;
    case 134: V(0,ParserCompParam) = ag_rp_134(PCB_POINTER); break;
    case 135: V(0,ParserCompParam) = ag_rp_135(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 136: V(0,ParserBasicToken) = ag_rp_136(PCB_POINTER); break;
    case 137: V(0,ParserBasicToken) = ag_rp_137(PCB_POINTER); break;
    case 138: ag_default(PCB_POINTER, &ag_rtt[0]); ag_rp_138(PCB_POINTER); break;
    case 139: ag_default(PCB_POINTER, &ag_rtt[3]); ag_rp_139(PCB_POINTER); break;
    case 140: ag_default(PCB_POINTER, &ag_rtt[6]); ag_rp_140(PCB_POINTER); break;
    case 141: ag_rp_141(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 142: V(0,ParserAbsoluteUri) = ag_rp_142(PCB_POINTER, V(0,ParserBasicToken), V(3,ParserBasicToken)); break;
    case 143: V(0,ParserBasicToken) = ag_rp_143(PCB_POINTER); break;
    case 144: V(0,ParserDisplayName) = ag_rp_144(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 145: V(0,ParserBasicToken) = ag_rp_145(PCB_POINTER); break;
    case 146: V(0,ParserBasicToken) = ag_rp_146(PCB_POINTER); break;
    case 147: ag_rp_147(PCB_POINTER); break;
    case 148: ag_rp_148(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 149: ag_rp_149(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 150: ag_rp_150(PCB_POINTER); break;
    case 151: ag_rp_151(PCB_POINTER); break;
    case 152: V(0,ParserAbsoluteUri) = ag_rp_152(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 153: V(0,ParserAbsoluteUri) = ag_rp_153(PCB_POINTER); break;
    case 154: ag_rp_154(PCB_POINTER); break;
    case 155: ag_rp_155(PCB_POINTER); break;
    case 156: V(0,ParserAbsoluteUri) = ag_rp_156(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 157: V(0,ParserAbsoluteUri) = ag_rp_157(PCB_POINTER); break;
    case 158: ag_rp_158(PCB_POINTER); break;
    case 159: ag_rp_159(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 160: ag_rp_160(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 161: ag_rp_161(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 162: ag_rp_162(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 163: ag_rp_163(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 164: ag_rp_164(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 165: ag_rp_165(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 166: ag_rp_166(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 167: ag_rp_167(PCB_POINTER, V(0,ParserDisplayName), V(2,ParserBasicToken)); break;
    case 168: ag_rp_168(PCB_POINTER); break;
    case 169: ag_rp_169(PCB_POINTER); break;
    case 170: ag_rp_170(PCB_POINTER); break;
    case 171: ag_rp_171(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 172: ag_rp_172(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 173: V(0,ParserBasicToken) = ag_rp_173(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 174: V(0,ParserBasicToken) = ag_rp_174(PCB_POINTER); break;
    case 175: V(0,ParserBasicToken) = ag_rp_175(PCB_POINTER); break;
    case 176: ag_rp_176(PCB_POINTER); break;
    case 177: ag_rp_177(PCB_POINTER); break;
    case 178: ag_rp_178(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 179: ag_rp_179(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserPort)); break;
    case 180: V(0,ParserBasicToken) = ag_rp_180(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 181: V(0,ParserBasicToken) = ag_rp_181(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 182: V(0,ParserBasicToken) = ag_rp_182(PCB_POINTER); break;
    case 183: V(0,ParserBasicToken) = ag_rp_183(PCB_POINTER); break;
    case 184: V(0,ParserBasicToken) = ag_rp_184(PCB_POINTER); break;
    case 185: ag_rp_185(PCB_POINTER); break;
    case 186: ag_rp_186(PCB_POINTER); break;
    case 187: ag_rp_187(PCB_POINTER); break;
    case 188: ag_rp_188(PCB_POINTER); break;
    case 189: ag_rp_189(PCB_POINTER, V(0,ParserTransport)); break;
    case 190: ag_rp_190(PCB_POINTER, V(0,ParserUserParam)); break;
    case 191: ag_rp_191(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 192: ag_rp_192(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 193: ag_rp_193(PCB_POINTER, V(0,ParserMethod)); break;
    case 194: ag_rp_194(PCB_POINTER, V(0,ParserLrParamType)); break;
    case 195: ag_rp_195(PCB_POINTER, V(0,ParserCompParam)); break;
    case 196: ag_rp_196(PCB_POINTER, V(0,ParserTokenizedByParam)); break;
    case 197: ag_rp_197(PCB_POINTER, V(0,RvBool)); break;
    case 198: ag_rp_198(PCB_POINTER); break;
    case 199: V(0,ParserTransport) = ag_rp_199(PCB_POINTER, V(4,ParserTransport)); break;
    case 200: V(0,ParserUserParam) = ag_rp_200(PCB_POINTER, V(4,RvSipUserParam)); break;
    case 201: V(0,ParserUserParam) = ag_rp_201(PCB_POINTER, V(4,ParserOtherUser)); break;
    case 202: V(0,RvSipUserParam) = ag_rp_202(PCB_POINTER); break;
    case 203: V(0,RvSipUserParam) = ag_rp_203(PCB_POINTER); break;
    case 204: V(0,ParserOtherUser) = ag_rp_204(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 205: V(0,ParserTtlParam) = ag_rp_205(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 206: V(0,ParserMaddrParam) = ag_rp_206(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 207: V(0,ParserMethod) = ag_rp_207(PCB_POINTER, V(4,ParserMethod)); break;
    case 208: V(0,ParserLrParamType) = ag_rp_208(PCB_POINTER); break;
    case 209: V(0,ParserLrParamType) = ag_rp_209(PCB_POINTER); break;
    case 210: V(0,ParserLrParamType) = ag_rp_210(PCB_POINTER); break;
    case 211: V(0,ParserLrParamType) = ag_rp_211(PCB_POINTER); break;
    case 212: V(0,ParserCompParam) = ag_rp_212(PCB_POINTER, V(4,ParserCompParam)); break;
    case 213: V(0,ParserTokenizedByParam) = ag_rp_213(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 214: V(0,RvBool) = ag_rp_214(PCB_POINTER); break;
    case 215: ag_rp_215(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 216: ag_rp_216(PCB_POINTER, V(0,ParserBasicToken), V(1,ParserBasicToken)); break;
    case 217: V(0,ParserBasicToken) = ag_rp_217(PCB_POINTER); break;
    case 218: V(0,ParserBasicToken) = ag_rp_218(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 219: V(0,ParserOptionalHeaders) = ag_rp_219(PCB_POINTER); break;
    case 220: V(0,ParserOptionalHeaders) = ag_rp_220(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 221: V(0,ParserBasicToken) = ag_rp_221(PCB_POINTER); break;
    case 222: V(0,ParserBasicToken) = ag_rp_222(PCB_POINTER); break;
    case 223: V(0,ParserBasicToken) = ag_rp_223(PCB_POINTER); break;
    case 224: V(0,ParserBasicToken) = ag_rp_224(PCB_POINTER); break;
    case 225: V(0,ParserBasicToken) = ag_rp_225(PCB_POINTER); break;
    case 226: ag_rp_226(PCB_POINTER); break;
    case 227: ag_rp_227(PCB_POINTER, V(0,ParserMethod), V(4,ParserSipVersion)); break;
    case 228: V(0,ParserMethod) = ag_rp_228(PCB_POINTER); break;
    case 229: V(0,ParserMethod) = ag_rp_229(PCB_POINTER); break;
    case 230: V(0,ParserMethod) = ag_rp_230(PCB_POINTER); break;
    case 231: V(0,ParserMethod) = ag_rp_231(PCB_POINTER); break;
    case 232: V(0,ParserMethod) = ag_rp_232(PCB_POINTER); break;
    case 233: V(0,ParserMethod) = ag_rp_233(PCB_POINTER); break;
    case 234: V(0,ParserMethod) = ag_rp_234(PCB_POINTER); break;
    case 235: V(0,ParserMethod) = ag_rp_235(PCB_POINTER); break;
    case 236: V(0,ParserMethod) = ag_rp_236(PCB_POINTER); break;
    case 237: V(0,ParserMethod) = ag_rp_237(PCB_POINTER); break;
    case 238: V(0,ParserMethod) = ag_rp_238(PCB_POINTER); break;
    case 239: V(0,ParserMethod) = ag_rp_239(PCB_POINTER); break;
    case 240: V(0,ParserMethod) = ag_rp_240(PCB_POINTER); break;
    case 241: V(0,ParserMethod) = ag_rp_241(PCB_POINTER, V(0,ParserMethod)); break;
    case 242: ag_rp_242(PCB_POINTER); break;
    case 243: ag_rp_243(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 244: ag_rp_244(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 245: ag_rp_245(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 246: ag_rp_246(PCB_POINTER); break;
    case 247: ag_rp_247(PCB_POINTER); break;
    case 248: ag_rp_248(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 249: ag_rp_249(PCB_POINTER); break;
    case 250: ag_rp_250(PCB_POINTER, V(1,ParserPartyParams)); break;
    case 251: ag_rp_251(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 252: ag_rp_252(PCB_POINTER); break;
    case 253: V(0,ParserDisplayName) = ag_rp_253(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 254: V(0,ParserDisplayName) = ag_rp_254(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 255: V(0,ParserBasicToken) = ag_rp_255(PCB_POINTER); break;
    case 256: V(0,ParserBasicToken) = ag_rp_256(PCB_POINTER); break;
    case 257: V(0,ParserTagParam) = ag_rp_257(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 258: V(0,ParserPartyParams) = ag_rp_258(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 259: V(0,ParserPartyParams) = ag_rp_259(PCB_POINTER, V(0,ParserPartyParams), V(3,ParserPartyParams)); break;
    case 260: V(0,ParserPartyParams) = ag_rp_260(PCB_POINTER, V(0,ParserTagParam)); break;
    case 261: V(0,ParserPartyParams) = ag_rp_261(PCB_POINTER); break;
    case 262: ag_rp_262(PCB_POINTER); break;
    case 263: ag_rp_263(PCB_POINTER); break;
    case 264: ag_rp_264(PCB_POINTER); break;
    case 265: ag_rp_265(PCB_POINTER); break;
    case 266: ag_rp_266(PCB_POINTER); break;
    case 267: ag_rp_267(PCB_POINTER); break;
    case 268: ag_rp_268(PCB_POINTER); break;
    case 269: ag_rp_269(PCB_POINTER, V(0,ParserQVal)); break;
    case 270: ag_rp_270(PCB_POINTER, V(0,ParserContactActionType)); break;
    case 271: ag_rp_271(PCB_POINTER); break;
    case 272: ag_rp_272(PCB_POINTER); break;
    case 273: V(0,ParserQVal) = ag_rp_273(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 274: V(0,ParserBasicToken) = ag_rp_274(PCB_POINTER); break;
    case 275: V(0,ParserBasicToken) = ag_rp_275(PCB_POINTER); break;
    case 276: V(0,ParserContactActionType) = ag_rp_276(PCB_POINTER, V(4,ParserContactActionType)); break;
    case 277: V(0,ParserContactActionType) = ag_rp_277(PCB_POINTER); break;
    case 278: V(0,ParserContactActionType) = ag_rp_278(PCB_POINTER); break;
    case 279: ag_rp_279(PCB_POINTER); break;
    case 280: ag_rp_280(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 281: ag_rp_281(PCB_POINTER, V(2,ParserSipDate)); break;
    case 282: ag_rp_282(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 283: ag_rp_283(PCB_POINTER, V(0,ParserSipDate)); break;
    case 284: V(0,ParserDeltaSeconds) = ag_rp_284(PCB_POINTER); break;
    case 285: ag_rp_285(PCB_POINTER, V(0,ParserSipDate)); break;
    case 286: V(0,ParserSipDate) = ag_rp_286(PCB_POINTER, V(0,ParserDDMMYY), V(2,ParserTime)); break;
    case 287: V(0,ParserSipDate) = ag_rp_287(PCB_POINTER, V(0,ParserSipDate)); break;
    case 288: V(0,ParserSipDate) = ag_rp_288(PCB_POINTER, V(0,RvSipDateWeekDay), V(4,ParserDDMMYY), V(6,ParserTime)); break;
    case 289: V(0,RvSipDateWeekDay) = ag_rp_289(PCB_POINTER); break;
    case 290: V(0,RvSipDateWeekDay) = ag_rp_290(PCB_POINTER); break;
    case 291: V(0,RvSipDateWeekDay) = ag_rp_291(PCB_POINTER); break;
    case 292: V(0,RvSipDateWeekDay) = ag_rp_292(PCB_POINTER); break;
    case 293: V(0,RvSipDateWeekDay) = ag_rp_293(PCB_POINTER); break;
    case 294: V(0,RvSipDateWeekDay) = ag_rp_294(PCB_POINTER); break;
    case 295: V(0,RvSipDateWeekDay) = ag_rp_295(PCB_POINTER); break;
    case 296: V(0,ParserDDMMYY) = ag_rp_296(PCB_POINTER, V(0,ParserInt32), V(2,RvSipDateMonth), V(4,ParserInt32)); break;
    case 297: V(0,ParserInt32) = ag_rp_297(PCB_POINTER, V(0,int)); break;
    case 298: V(0,ParserInt32) = ag_rp_298(PCB_POINTER, V(0,int), V(1,int)); break;
    case 299: V(0,RvSipDateMonth) = ag_rp_299(PCB_POINTER); break;
    case 300: V(0,RvSipDateMonth) = ag_rp_300(PCB_POINTER); break;
    case 301: V(0,RvSipDateMonth) = ag_rp_301(PCB_POINTER); break;
    case 302: V(0,RvSipDateMonth) = ag_rp_302(PCB_POINTER); break;
    case 303: V(0,RvSipDateMonth) = ag_rp_303(PCB_POINTER); break;
    case 304: V(0,RvSipDateMonth) = ag_rp_304(PCB_POINTER); break;
    case 305: V(0,RvSipDateMonth) = ag_rp_305(PCB_POINTER); break;
    case 306: V(0,RvSipDateMonth) = ag_rp_306(PCB_POINTER); break;
    case 307: V(0,RvSipDateMonth) = ag_rp_307(PCB_POINTER); break;
    case 308: V(0,RvSipDateMonth) = ag_rp_308(PCB_POINTER); break;
    case 309: V(0,RvSipDateMonth) = ag_rp_309(PCB_POINTER); break;
    case 310: V(0,RvSipDateMonth) = ag_rp_310(PCB_POINTER); break;
    case 311: V(0,ParserInt32) = ag_rp_311(PCB_POINTER, V(0,int), V(1,int)); break;
    case 312: V(0,ParserInt32) = ag_rp_312(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 313: V(0,ParserInt32) = ag_rp_313(PCB_POINTER, V(0,int), V(1,int), V(2,int), V(3,int)); break;
    case 314: V(0,ParserTime) = ag_rp_314(PCB_POINTER, V(0,ParserInt32), V(2,ParserInt32), V(4,ParserInt32), V(6,ParserTimeZone)); break;
    case 315: V(0,ParserInt32) = ag_rp_315(PCB_POINTER, V(0,int), V(1,int)); break;
    case 316: V(0,ParserInt32) = ag_rp_316(PCB_POINTER, V(0,int), V(1,int)); break;
    case 317: V(0,ParserInt32) = ag_rp_317(PCB_POINTER, V(0,int), V(1,int)); break;
    case 318: V(0,ParserTimeZone) = ag_rp_318(PCB_POINTER); break;
    case 319: V(0,ParserTimeZone) = ag_rp_319(PCB_POINTER); break;
    case 320: V(0,ParserTimeZone) = ag_rp_320(PCB_POINTER); break;
    case 321: ag_rp_321(PCB_POINTER, V(0,ParserMethod)); break;
    case 322: ag_rp_322(PCB_POINTER, V(0,ParserMethod), V(4,ParserBasicToken)); break;
    case 323: ag_rp_323(PCB_POINTER); break;
    case 324: ag_rp_324(PCB_POINTER); break;
    case 325: ag_rp_325(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 326: ag_rp_326(PCB_POINTER); break;
    case 327: ag_rp_327(PCB_POINTER); break;
    case 328: ag_rp_328(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 329: ag_rp_329(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 330: ag_rp_330(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 331: ag_rp_331(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 332: ag_rp_332(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 333: ag_rp_333(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 334: ag_rp_334(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 335: ag_rp_335(PCB_POINTER, V(0,RvSipAuthStale)); break;
    case 336: ag_rp_336(PCB_POINTER, V(0,ParserAlgorithm)); break;
    case 337: ag_rp_337(PCB_POINTER, V(0,ParserQopValue)); break;
    case 338: ag_rp_338(PCB_POINTER); break;
    case 339: V(0,ParserBasicToken) = ag_rp_339(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 340: V(0,ParserBasicToken) = ag_rp_340(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 341: V(0,ParserBasicToken) = ag_rp_341(PCB_POINTER); break;
    case 342: V(0,ParserBasicToken) = ag_rp_342(PCB_POINTER); break;
    case 343: ag_rp_343(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 344: ag_rp_344(PCB_POINTER); break;
    case 345: ag_rp_345(PCB_POINTER); break;
    case 346: V(0,ParserBasicToken) = ag_rp_346(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 347: V(0,ParserBasicToken) = ag_rp_347(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 348: V(0,ParserBasicToken) = ag_rp_348(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 349: V(0,ParserBasicToken) = ag_rp_349(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 350: V(0,RvSipAuthStale) = ag_rp_350(PCB_POINTER); break;
    case 351: V(0,RvSipAuthStale) = ag_rp_351(PCB_POINTER); break;
    case 352: V(0,ParserAlgorithm) = ag_rp_352(PCB_POINTER, V(1,ParserAlgorithm)); break;
    case 353: ag_rp_353(PCB_POINTER); break;
    case 354: ag_rp_354(PCB_POINTER); break;
    case 355: ag_rp_355(PCB_POINTER); break;
    case 356: ag_rp_356(PCB_POINTER); break;
    case 357: V(0,ParserAlgorithm) = ag_rp_357(PCB_POINTER, V(2,ParserBasicToken), V(4,ParserAlgorithm)); break;
    case 358: V(0,ParserAlgorithm) = ag_rp_358(PCB_POINTER, V(1,ParserAlgorithm)); break;
    case 359: ag_rp_359(PCB_POINTER); break;
    case 360: V(0,ParserAlgorithm) = ag_rp_360(PCB_POINTER); break;
    case 361: V(0,ParserAlgorithm) = ag_rp_361(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 362: ag_rp_362(PCB_POINTER); break;
    case 363: ag_rp_363(PCB_POINTER); break;
    case 364: V(0,ParserBasicToken) = ag_rp_364(PCB_POINTER); break;
    case 365: V(0,ParserQopValue) = ag_rp_365(PCB_POINTER, V(5,ParserQopValue)); break;
    case 366: V(0,ParserQopValue) = ag_rp_366(PCB_POINTER, V(0,ParserAuthQopOptions)); break;
    case 367: V(0,ParserQopValue) = ag_rp_367(PCB_POINTER, V(0,ParserQopValue), V(4,ParserAuthQopOptions)); break;
    case 368: V(0,ParserAuthQopOptions) = ag_rp_368(PCB_POINTER); break;
    case 369: V(0,ParserAuthQopOptions) = ag_rp_369(PCB_POINTER); break;
    case 370: V(0,ParserAuthQopOptions) = ag_rp_370(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 371: V(0,ParserBasicToken) = ag_rp_371(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 372: V(0,ParserBasicToken) = ag_rp_372(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 373: V(0,ParserBasicToken) = ag_rp_373(PCB_POINTER); break;
    case 374: V(0,ParserBasicToken) = ag_rp_374(PCB_POINTER); break;
    case 375: V(0,ParserBasicToken) = ag_rp_375(PCB_POINTER); break;
    case 376: V(0,ParserBasicToken) = ag_rp_376(PCB_POINTER); break;
    case 377: V(0,ParserBasicToken) = ag_rp_377(PCB_POINTER); break;
    case 378: ag_rp_378(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 379: ag_rp_379(PCB_POINTER); break;
    case 380: ag_rp_380(PCB_POINTER); break;
    case 381: ag_rp_381(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 382: ag_rp_382(PCB_POINTER); break;
    case 383: ag_rp_383(PCB_POINTER); break;
    case 384: ag_rp_384(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 385: ag_rp_385(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 386: ag_rp_386(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 387: ag_rp_387(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 388: ag_rp_388(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 389: ag_rp_389(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 390: ag_rp_390(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 391: ag_rp_391(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 392: ag_rp_392(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 393: ag_rp_393(PCB_POINTER, V(0,RvSipAuthIntegrityProtected)); break;
    case 394: ag_rp_394(PCB_POINTER, V(0,RvSipAuthQopOption)); break;
    case 395: ag_rp_395(PCB_POINTER); break;
    case 396: ag_rp_396(PCB_POINTER, V(0,ParserAlgorithm)); break;
    case 397: V(0,ParserBasicToken) = ag_rp_397(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 398: V(0,ParserBasicToken) = ag_rp_398(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 399: V(0,RvSipAuthQopOption) = ag_rp_399(PCB_POINTER, V(5,ParserAuthQopOptions)); break;
    case 400: V(0,ParserBasicToken) = ag_rp_400(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 401: V(0,ParserBasicToken) = ag_rp_401(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 402: V(0,ParserBasicToken) = ag_rp_402(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 403: V(0,ParserBasicToken) = ag_rp_403(PCB_POINTER); break;
    case 404: V(0,ParserBasicToken) = ag_rp_404(PCB_POINTER); break;
    case 405: V(0,ParserBasicToken) = ag_rp_405(PCB_POINTER); break;
    case 406: V(0,ParserBasicToken) = ag_rp_406(PCB_POINTER); break;
    case 407: V(0,ParserBasicToken) = ag_rp_407(PCB_POINTER); break;
    case 408: V(0,ParserBasicToken) = ag_rp_408(PCB_POINTER); break;
    case 409: V(0,ParserBasicToken) = ag_rp_409(PCB_POINTER); break;
    case 410: V(0,ParserBasicToken) = ag_rp_410(PCB_POINTER); break;
    case 411: V(0,ParserBasicToken) = ag_rp_411(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 412: V(0,ParserBasicToken) = ag_rp_412(PCB_POINTER); break;
    case 413: V(0,ParserBasicToken) = ag_rp_413(PCB_POINTER); break;
    case 414: V(0,ParserBasicToken) = ag_rp_414(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 415: V(0,ParserBasicToken) = ag_rp_415(PCB_POINTER); break;
    case 416: V(0,RvSipAuthIntegrityProtected) = ag_rp_416(PCB_POINTER); break;
    case 417: V(0,RvSipAuthIntegrityProtected) = ag_rp_417(PCB_POINTER); break;
    case 418: ag_rp_418(PCB_POINTER); break;
    case 419: ag_rp_419(PCB_POINTER); break;
    case 420: ag_rp_420(PCB_POINTER); break;
    case 421: ag_rp_421(PCB_POINTER); break;
    case 422: ag_rp_422(PCB_POINTER); break;
    case 423: ag_rp_423(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,ParserRetryParam)); break;
    case 424: ag_rp_424(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 425: ag_rp_425(PCB_POINTER, V(0,ParserSipDate), V(3,ParserRetryParam)); break;
    case 426: ag_rp_426(PCB_POINTER, V(0,ParserSipDate)); break;
    case 427: ag_rp_427(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 428: V(0,ParserRetryParam) = ag_rp_428(PCB_POINTER, V(2,ParserDeltaSeconds)); break;
    case 429: V(0,ParserRetryParam) = ag_rp_429(PCB_POINTER); break;
    case 430: V(0,ParserRetryParam) = ag_rp_430(PCB_POINTER, V(0,ParserRetryParam), V(3,ParserDeltaSeconds)); break;
    case 431: V(0,ParserRetryParam) = ag_rp_431(PCB_POINTER, V(0,ParserRetryParam)); break;
    case 432: V(0,ParserDeltaSeconds) = ag_rp_432(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 433: ag_rp_433(PCB_POINTER, V(0,ParserRSeq)); break;
    case 434: V(0,ParserRSeq) = ag_rp_434(PCB_POINTER, V(0,ParserResponseNum)); break;
    case 435: V(0,ParserResponseNum) = ag_rp_435(PCB_POINTER); break;
    case 436: ag_rp_436(PCB_POINTER); break;
    case 437: ag_rp_437(PCB_POINTER, V(0,ParserResponseNum), V(2,ParserSequenceNumber), V(4,ParserMethod)); break;
    case 438: V(0,ParserBasicToken) = ag_rp_438(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 439: ag_rp_439(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 440: ag_rp_440(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 441: ag_rp_441(PCB_POINTER); break;
    case 442: ag_rp_442(PCB_POINTER); break;
    case 443: ag_rp_443(PCB_POINTER); break;
    case 444: ag_rp_444(PCB_POINTER); break;
    case 445: ag_rp_445(PCB_POINTER); break;
    case 446: ag_rp_446(PCB_POINTER); break;
    case 447: ag_rp_447(PCB_POINTER); break;
    case 448: ag_rp_448(PCB_POINTER); break;
    case 449: ag_rp_449(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 450: ag_rp_450(PCB_POINTER); break;
    case 451: V(0,ParserQuotedString) = ag_rp_451(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 452: V(0,ParserQuotedString) = ag_rp_452(PCB_POINTER); break;
    case 453: ag_rp_453(PCB_POINTER); break;
    case 454: ag_rp_454(PCB_POINTER, V(0,ParserEventType)); break;
    case 455: ag_rp_455(PCB_POINTER, V(0,ParserEventType)); break;
    case 456: V(0,ParserEventType) = ag_rp_456(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 457: V(0,ParserEventType) = ag_rp_457(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 458: V(0,ParserBasicToken) = ag_rp_458(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 459: V(0,ParserBasicToken) = ag_rp_459(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 460: ag_rp_460(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 461: ag_rp_461(PCB_POINTER); break;
    case 462: V(0,ParserBasicToken) = ag_rp_462(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 463: ag_rp_463(PCB_POINTER, V(0,ParserEventType)); break;
    case 464: ag_rp_464(PCB_POINTER, V(3,ParserEventType)); break;
    case 465: ag_rp_465(PCB_POINTER); break;
    case 466: ag_rp_466(PCB_POINTER, V(0,ParserSubsStateValue)); break;
    case 467: ag_rp_467(PCB_POINTER, V(0,ParserSubsStateValue)); break;
    case 468: V(0,ParserSubsStateValue) = ag_rp_468(PCB_POINTER); break;
    case 469: V(0,ParserSubsStateValue) = ag_rp_469(PCB_POINTER); break;
    case 470: V(0,ParserSubsStateValue) = ag_rp_470(PCB_POINTER); break;
    case 471: V(0,ParserSubsStateValue) = ag_rp_471(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 472: ag_rp_472(PCB_POINTER, V(0,ParserSubsStateReason)); break;
    case 473: ag_rp_473(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 474: ag_rp_474(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 475: ag_rp_475(PCB_POINTER); break;
    case 476: V(0,ParserBasicToken) = ag_rp_476(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 477: V(0,ParserBasicToken) = ag_rp_477(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 478: V(0,ParserSubsStateReason) = ag_rp_478(PCB_POINTER, V(4,ParserSubsStateReason)); break;
    case 479: V(0,ParserSubsStateReason) = ag_rp_479(PCB_POINTER); break;
    case 480: V(0,ParserSubsStateReason) = ag_rp_480(PCB_POINTER); break;
    case 481: V(0,ParserSubsStateReason) = ag_rp_481(PCB_POINTER); break;
    case 482: V(0,ParserSubsStateReason) = ag_rp_482(PCB_POINTER); break;
    case 483: V(0,ParserSubsStateReason) = ag_rp_483(PCB_POINTER); break;
    case 484: V(0,ParserSubsStateReason) = ag_rp_484(PCB_POINTER); break;
    case 485: V(0,ParserSubsStateReason) = ag_rp_485(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 486: ag_rp_486(PCB_POINTER); break;
    case 487: ag_rp_487(PCB_POINTER, V(0,ParserDisposition), V(2,ParserDispositionParams)); break;
    case 488: ag_rp_488(PCB_POINTER, V(0,ParserDisposition)); break;
    case 489: V(0,ParserDisposition) = ag_rp_489(PCB_POINTER); break;
    case 490: V(0,ParserDisposition) = ag_rp_490(PCB_POINTER); break;
    case 491: V(0,ParserDisposition) = ag_rp_491(PCB_POINTER); break;
    case 492: V(0,ParserDisposition) = ag_rp_492(PCB_POINTER); break;
    case 493: V(0,ParserDisposition) = ag_rp_493(PCB_POINTER); break;
    case 494: V(0,ParserDisposition) = ag_rp_494(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 495: V(0,ParserDispositionParams) = ag_rp_495(PCB_POINTER, V(0,ParserDispositionParam)); break;
    case 496: V(0,ParserDispositionParams) = ag_rp_496(PCB_POINTER); break;
    case 497: V(0,ParserDispositionParams) = ag_rp_497(PCB_POINTER, V(0,ParserDispositionParams), V(1,ParserDispositionParam)); break;
    case 498: V(0,ParserDispositionParams) = ag_rp_498(PCB_POINTER, V(0,ParserDispositionParams)); break;
    case 499: V(0,ParserDispositionParam) = ag_rp_499(PCB_POINTER); break;
    case 500: V(0,ParserDispositionParam) = ag_rp_500(PCB_POINTER); break;
    case 501: V(0,ParserDispositionParam) = ag_rp_501(PCB_POINTER, V(6,ParserBasicToken)); break;
    case 502: ag_rp_502(PCB_POINTER, V(0,ParserSessionExpiresHeader)); break;
    case 503: V(0,ParserSessionExpiresHeader) = ag_rp_503(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 504: V(0,ParserSessionExpiresHeader) = ag_rp_504(PCB_POINTER, V(0,ParserDeltaSeconds), V(2,RvSipSessionExpiresRefresherType)); break;
    case 505: V(0,ParserSessionExpiresHeader) = ag_rp_505(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 506: V(0,ParserSessionExpiresHeader) = ag_rp_506(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,RvSipSessionExpiresRefresherType)); break;
    case 507: V(0,RvSipSessionExpiresRefresherType) = ag_rp_507(PCB_POINTER, V(6,RvSipSessionExpiresRefresherType)); break;
    case 508: V(0,RvSipSessionExpiresRefresherType) = ag_rp_508(PCB_POINTER); break;
    case 509: V(0,RvSipSessionExpiresRefresherType) = ag_rp_509(PCB_POINTER); break;
    case 510: ag_rp_510(PCB_POINTER, V(0,ParserMinSEHeader)); break;
    case 511: V(0,ParserMinSEHeader) = ag_rp_511(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 512: ag_rp_512(PCB_POINTER, V(0,ParserCallId)); break;
    case 513: ag_rp_513(PCB_POINTER, V(0,ParserCallId)); break;
    case 514: ag_rp_514(PCB_POINTER); break;
    case 515: ag_rp_515(PCB_POINTER); break;
    case 516: ag_rp_516(PCB_POINTER, V(0,ParserTagParam)); break;
    case 517: ag_rp_517(PCB_POINTER, V(0,ParserTagParam)); break;
    case 518: ag_rp_518(PCB_POINTER, V(0,ParserReplacesEarlyFlagParamType)); break;
    case 519: ag_rp_519(PCB_POINTER); break;
    case 520: V(0,ParserTagParam) = ag_rp_520(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 521: V(0,ParserTagParam) = ag_rp_521(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 522: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_522(PCB_POINTER); break;
    case 523: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_523(PCB_POINTER); break;
    case 524: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_524(PCB_POINTER); break;
    case 525: ag_rp_525(PCB_POINTER); break;
    case 526: ag_rp_526(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 527: ag_rp_527(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 528: ag_rp_528(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 529: ag_rp_529(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 530: ag_rp_530(PCB_POINTER); break;
    case 531: ag_rp_531(PCB_POINTER, V(5,ParserAuthQopOptions)); break;
    case 532: V(0,ParserBasicToken) = ag_rp_532(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 533: V(0,ParserBasicToken) = ag_rp_533(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 534: V(0,ParserBasicToken) = ag_rp_534(PCB_POINTER); break;
  }
  (PCB).la_ptr = (PCB).pointer;
}
static int ag_action_1_r_proc(PCB_DECL);
static int ag_action_2_r_proc(PCB_DECL);
static int ag_action_3_r_proc(PCB_DECL);
static int ag_action_4_r_proc(PCB_DECL);
static int ag_action_1_s_proc(PCB_DECL);
static int ag_action_3_s_proc(PCB_DECL);
static int ag_action_1_proc(PCB_DECL);
static int ag_action_2_proc(PCB_DECL);
static int ag_action_3_proc(PCB_DECL);
static int ag_action_4_proc(PCB_DECL);
static int ag_action_5_proc(PCB_DECL);
static int ag_action_6_proc(PCB_DECL);
static int ag_action_7_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int ag_action_9_proc(PCB_DECL);
static int ag_action_10_proc(PCB_DECL);
static int ag_action_11_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int (*const  ag_r_procs_scan[])(PCB_DECL) = {
  ag_action_1_r_proc,
  ag_action_2_r_proc,
  ag_action_3_r_proc,
  ag_action_4_r_proc
};
static int (*const  ag_s_procs_scan[])(PCB_DECL) = {
  ag_action_1_s_proc,
  ag_action_2_r_proc,
  ag_action_3_s_proc,
  ag_action_4_r_proc
};
static int (*const  ag_gt_procs_scan[])(PCB_DECL) = {
  ag_action_1_proc,
  ag_action_2_proc,
  ag_action_3_proc,
  ag_action_4_proc,
  ag_action_5_proc,
  ag_action_6_proc,
  ag_action_7_proc,
  ag_action_8_proc,
  ag_action_9_proc,
  ag_action_10_proc,
  ag_action_11_proc,
  ag_action_8_proc
};
static int ag_action_10_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    ag_track(PCB_POINTER);
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  } while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_11_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
    (PCB).ssx--;
    ag_track(PCB_POINTER);
    ag_ra(PCB_POINTER);
    if ((PCB).exit_flag != AG_RUNNING_CODE) return 0;
    (PCB).ssx++;
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  }
  while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_3_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_3_s_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;;
}
static int ag_action_4_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  return 1;
}
static int ag_action_2_proc(PCB_DECL) {
  if ((PCB).ssx >= 43) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  ag_track(PCB_POINTER);
  return 0;
}
static int ag_action_9_proc(PCB_DECL) {
  if ((PCB).ssx >= 43) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (PCB).vs[(PCB).ssx] = ag_null_value;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  (PCB).la_ptr =  (PCB).pointer;
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_2_r_proc(PCB_DECL) {
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  return 0;
}
static int ag_action_7_proc(PCB_DECL) {
  --(PCB).ssx;
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_proc(PCB_DECL) {
  ag_track(PCB_POINTER);
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_r_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_s_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_4_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_3_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_8_proc(PCB_DECL) {
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SYNTAX_ERROR_CODE;
  SYNTAX_ERROR;
  {(PCB).la_ptr = (PCB).pointer + 1; ag_track(PCB_POINTER);}
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_5_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else {
    if ((PCB).ssx >= 43) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_6_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  if (ag_sd) {
    (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  }
  else {
    if ((PCB).ssx >= 43) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).vs[(PCB).ssx] = ag_null_value;
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
void init_SipParser(SipParser_pcb_type *PCB_POINTER) {
  (PCB).la_ptr = (PCB).pointer;
  (PCB).error_message = "Syntax Error";
  (PCB).ss[0] = (PCB).sn = (PCB).ssx = 0;
  (PCB).exit_flag = AG_RUNNING_CODE;
  (PCB).line = FIRST_LINE;
  (PCB).column = FIRST_COLUMN;
}
void SipParser(SipParser_pcb_type *PCB_POINTER) {
  init_SipParser(PCB_POINTER);
  (PCB).exit_flag = AG_RUNNING_CODE;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbt[(PCB).sn];
    if (ag_tstt[ag_t1]) {
      unsigned ag_t2 = ag_sbe[(PCB).sn] - 1;
      (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
      (PCB).la_ptr++;
      if (ag_key_index[(PCB).sn]) {
        unsigned ag_k = ag_key_index[(PCB).sn];
        int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
        while (ag_key_ch[ag_k] < ag_ch) ag_k++;
        if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
      }
      do {
        unsigned ag_tx = (ag_t1 + ag_t2)/2;
        if (ag_tstt[ag_tx] > (const unsigned short)(PCB).token_number)
          ag_t1 = ag_tx + 1;
        else ag_t2 = ag_tx;
      } while (ag_t1 < ag_t2);
      if (ag_tstt[ag_t1] != (const unsigned short)(PCB).token_number)
        ag_t1 = ag_sbe[(PCB).sn];
    }
    (PCB).ag_ap = ag_pstt[ag_t1];
    (ag_gt_procs_scan[ag_astt[ag_t1]])((PCB_TYPE *)PCB_POINTER);
  }
}
#elif !defined(RV_SIP_IMS_DCS_HEADER_SUPPORT) && !defined(RV_SIP_IMS_HEADER_SUPPORT) && !defined(RV_SIP_EXTENDED_HEADER_SUPPORT) && !defined(RV_SIP_JSR32_SUPPORT) && !defined(RV_SIP_LIGHT) && !defined(RV_SIP_TEL_URI_SUPPORT) && !defined(RV_SIP_PRIMITIVES) && !defined(RV_SIP_AUTH_ON) && !defined(RV_SIP_SUBS_ON)
/*
 AnaGram Parsing Engine
 Copyright (c) 1993-1999, Parsifal Software.
 All Rights Reserved.
 Serial number 2P20671
 Registered to:
   Meir Fuchs
   RADVision Ltd.
*/
#ifndef PARSERENGINECLASSIC_H_1165245791
#include ".\ParserEngineClassic.h"
#endif
#ifndef PARSERENGINECLASSIC_H_1165245791
#error Mismatched header file
#endif
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define RULE_CONTEXT (&((PCB).cs[(PCB).ssx]))
#define ERROR_CONTEXT ((PCB).cs[(PCB).error_frame_ssx])
#define CONTEXT ((PCB).cs[(PCB).ssx])
#ifndef PCB_TYPE
#define PCB_TYPE SipParser_pcb_type
#endif
#define PCB (*pcb_pointer)
#define PCB_DECL PCB_TYPE *pcb_pointer
#define PCB_POINTER pcb_pointer
#define CHANGE_REDUCTION(x) SipParser_change_reduction(PCB_POINTER, SipParser_##x##_token)
int SipParser_change_reduction(PCB_DECL, SipParser_token_type);
#ifndef CONVERT_CASE
static const char agCaseTable[31] = {
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,    0,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
};
static int agConvertCase(int c) {
  if (c >= 'a' && c <= 'z') return c ^= 0x20;
  if (c >= 0xe0 && c < 0xff) c ^= agCaseTable[c-0xe0];
  return c;
}
#define CONVERT_CASE(c) agConvertCase(c)
#endif
#ifndef TAB_SPACING
#define TAB_SPACING 8
#endif
#define ag_rp_1(PCB_POINTER) (SET_HEADER_VALUE())
#define ag_rp_2(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_3(PCB_POINTER) (SIP_BEGIN_TOKEN())
static void ag_rp_4(PCB_DECL) {
/* Line 300, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        REMOVE_COMMA_BETWEEN_HEADERS();
    
}
#define ag_rp_5(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_6(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_7(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_8(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_9(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_10(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_11(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_12(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_13(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_14(PCB_POINTER) (SIP_BEGIN_TOKEN())
#define ag_rp_15(PCB_POINTER) (CUR_STRING())
#define ag_rp_16(PCB_POINTER) (CUR_STRING())
#define ag_rp_17(PCB_POINTER) (CUR_STRING())
#define ag_rp_18(PCB_POINTER) (CUR_STRING())
#define ag_rp_19(PCB_POINTER) (CUR_STRING())
#define ag_rp_20(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_INVITE))
#define ag_rp_21(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_ACK))
#define ag_rp_22(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_BYE))
#define ag_rp_23(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_CANCEL))
#define ag_rp_24(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_REGISTER))
#define ag_rp_25(PCB_POINTER) (CUR_METHOD(PARSER_METHOD_TYPE_PRACK))
static ParserMethod ag_rp_26(PCB_DECL, ParserBasicToken t) {
/* Line 490, RV SIP Stack */
 ParserMethod method;
                            method.type = PARSER_METHOD_TYPE_OTHER;
                            method.other = t;
                            RV_UNUSED_ARG(pcb_pointer);
                            return method;
                          
}
static void ag_rp_27(PCB_DECL, ParserCSeq cseq) {
/* Line 506, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitCSeq(PCB.pParserMgr, PCB.pointer,&cseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
static ParserCSeq ag_rp_28(PCB_DECL, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 527, RV SIP Stack */
        ParserCSeq cseq;
        cseq.method = method;
		cseq.sequenceNumber = sequenceNumber;
        RV_UNUSED_ARG(pcb_pointer);
        return(cseq);
	 
}
#define ag_rp_29(PCB_POINTER) (CUR_STRING())
static void ag_rp_30(PCB_DECL, ParserContentLength contentLength) {
/* Line 549, RV SIP Stack */
          RvStatus status;
          contentLength.isCompact = PCB.isCompactForm;
          status = ParserInitContentLength(PCB.pParserMgr,PCB.pointer,&contentLength,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
     
}
static ParserContentLength ag_rp_31(PCB_DECL) {
/* Line 572, RV SIP Stack */
        ParserContentLength contentLength;
        contentLength.contentLenVal = CUR_STRING();
        return contentLength;
    
}
static void ag_rp_32(PCB_DECL, ParserCallId callId) {
/* Line 587, RV SIP Stack */
  
          RvStatus status;
          callId.isCompact = PCB.isCompactForm;
          status = ParserInitCallId(PCB.pParserMgr,PCB.pointer,&callId,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if(RV_OK != status)
          {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
          }
    
}
static ParserCallId ag_rp_33(PCB_DECL, ParserBasicToken token) {
/* Line 609, RV SIP Stack */
         ParserCallId callId;
         callId.callIdVal = token;
         callId.isCompact = PCB.isCompactForm;
         return callId;
    
}
static ParserCallId ag_rp_34(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 616, RV SIP Stack */
        ParserCallId callId;
        token.len = (token2.len +token.len + 1);
        callId.callIdVal = token;
        callId.isCompact = PCB.isCompactForm;
        return callId;
    
}
static void ag_rp_35(PCB_DECL) {
/* Line 634, RV SIP Stack */
        RvStatus status;
        PCB.contentType.isCompactForm = PCB.isCompactForm;
        status = ParserInitContentType(PCB.pParserMgr,PCB.pointer,&(PCB.contentType),PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status) 
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_TYPE, &PCB);
     
}
static void ag_rp_36(PCB_DECL, ParserMediaType t, ParserMediaSubType st) {
/* Line 663, RV SIP Stack */
 
        PCB.contentType.mediaType    = t;
        PCB.contentType.mediaSubType = st;
        PCB.contentType.genericParamList = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             PCB.contentType.genericParamList=PCB.pExtParams;
        }
    
}
static void ag_rp_37(PCB_DECL) {
/* Line 676, RV SIP Stack */
 
	           PCB.contentType.params.isBoundary  = RV_FALSE;
  	           PCB.contentType.params.isVersion   = RV_FALSE;
               PCB.contentType.params.isBase      = RV_FALSE;
            
}
static void ag_rp_38(PCB_DECL, ParserBoundary b) {
/* Line 694, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_39(PCB_DECL, ParserBase v) {
/* Line 701, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.isBase    = RV_FALSE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_40(PCB_DECL, ParserBase b) {
/* Line 708, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
static void ag_rp_41(PCB_DECL) {
/* Line 716, RV SIP Stack */
        
        
        PCB.contentType.params.isBoundary = RV_FALSE;
        PCB.contentType.params.isVersion = RV_FALSE;
        PCB.contentType.params.isBase    = RV_FALSE;
    
}
static void ag_rp_42(PCB_DECL, ParserBoundary b) {
/* Line 731, RV SIP Stack */
        PCB.contentType.params.isBoundary = RV_TRUE;
        PCB.contentType.params.boundary = b;
    
}
static void ag_rp_43(PCB_DECL, ParserBase v) {
/* Line 736, RV SIP Stack */
        PCB.contentType.params.isVersion = RV_TRUE;
        PCB.contentType.params.version = v;
    
}
static void ag_rp_44(PCB_DECL, ParserBase b) {
/* Line 741, RV SIP Stack */
        PCB.contentType.params.isBase = RV_TRUE;
        PCB.contentType.params.base = b;
    
}
#define ag_rp_45(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_TEXT))
#define ag_rp_46(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_IMAGE))
#define ag_rp_47(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_AUDIO))
#define ag_rp_48(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_VIDEO))
#define ag_rp_49(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_APPLICATION))
#define ag_rp_50(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MULTIPART))
#define ag_rp_51(PCB_POINTER) (CUR_MEDIA_TYPE(RVSIP_MEDIATYPE_MESSAGE))
static ParserMediaType ag_rp_52(PCB_DECL, ParserBasicToken t) {
/* Line 761, RV SIP Stack */
		ParserMediaType mediaType;
		mediaType.type = RVSIP_MEDIATYPE_OTHER;
		mediaType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaType;
	
}
#define ag_rp_53(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_PLAIN))
#define ag_rp_54(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_SDP))
#define ag_rp_55(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ISUP))
#define ag_rp_56(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_QSIG))
#define ag_rp_57(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_MIXED))
#define ag_rp_58(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_ALTERNATIVE))
#define ag_rp_59(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_DIGEST))
#define ag_rp_60(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_RFC822))
#define ag_rp_61(PCB_POINTER) (CUR_MEDIA_SUB_TYPE(RVSIP_MEDIASUBTYPE_3GPP_IMS_XML))
static ParserMediaSubType ag_rp_62(PCB_DECL, ParserBasicToken t) {
/* Line 787, RV SIP Stack */
		ParserMediaSubType mediaSubType;
		mediaSubType.type = RVSIP_MEDIASUBTYPE_OTHER;
		mediaSubType.other=t;
        RV_UNUSED_ARG(pcb_pointer);
		return mediaSubType;
	
}
#define ag_rp_63(PCB_POINTER, t) (t)
#define ag_rp_64(PCB_POINTER, t) (t)
#define ag_rp_65(PCB_POINTER, t) (t)
#define ag_rp_66(PCB_POINTER, t) (t)
#define ag_rp_67(PCB_POINTER, t) (t)
#define ag_rp_68(PCB_POINTER, t) (t)
static void ag_rp_69(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 820, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
      else
      {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
      }
   
}
#define ag_rp_70(PCB_POINTER, token) (token)
#define ag_rp_71(PCB_POINTER, qs) (qs)
static void ag_rp_72(PCB_DECL, ParserBasicToken token) {
/* Line 858, RV SIP Stack */
      if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
      {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token.buf,token.len, PCB.pExtParams);
      }
      else
      {      
          
          APPEND_DATA(token.buf,token.len,PCB.pExtParams);
      }
    
}
static void ag_rp_73(PCB_DECL, ParserBasicToken token1, ParserGenericParamDataVal token2) {
/* Line 872, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
          
          APPEND_DATA(";", 1,PCB.pExtParams);
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
        else
        {      
          
          APPEND_DATA(token1.buf, token1.len,PCB.pExtParams);
          APPEND_DATA("=" , 1,PCB.pExtParams);
          APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);            
        }
    
}
#define ag_rp_74(PCB_POINTER, token) (token)
#define ag_rp_75(PCB_POINTER, qs) (qs)
static void ag_rp_76(PCB_DECL, ParserSipVersion ver, ParserStatusCode status, ParserReasonPhrase reason) {
/* Line 906, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;
        statusLine.reasonPhrase = reason;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if (RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
static void ag_rp_77(PCB_DECL, ParserSipVersion ver, ParserStatusCode status) {
/* Line 926, RV SIP Stack */
        RvStatus        stat;
        ParserStatusLine statusLine;
        statusLine.sipVersion = ver;
        statusLine.statusCode = status;       
        statusLine.reasonPhrase.buf=NULL;
        statusLine.reasonPhrase.len=0;
        stat = ParserInitStatusLine(PCB.pParserMgr,&PCB, PCB.pointer, &statusLine, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == stat)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != stat)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = stat;
        }
    
}
#define ag_rp_78(PCB_POINTER) (CUR_STRING())
#define ag_rp_79(PCB_POINTER) (CUR_STRING())
static ParserStatusCode ag_rp_80(PCB_DECL, int D100, int D10, int D1) {
/* Line 964, RV SIP Stack */
        RvUint16 code;
        RV_UNUSED_ARG(pcb_pointer);
        code =  (RvUint16)((D100 - '0')*100 + (D10 - '0')*10 + (D1 - '0'));
        return code;
    
}
static void ag_rp_81(PCB_DECL, ParserMethod met) {
/* Line 983, RV SIP Stack */
 
        RvStatus   status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_82(PCB_DECL, ParserMethod met) {
/* Line 1000, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitAllow(PCB.pParserMgr,&PCB,PCB.pointer,&met,PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_83(PCB_DECL) {
/* Line 1028, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr, &PCB, PCB.pointer, &(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
           
       }
       
    
}
static void ag_rp_84(PCB_DECL) {
/* Line 1056, RV SIP Stack */
 
       RvStatus status;
       PCB.singleVia.isCompact    = PCB.isCompactForm;
       status = ParserInitVia(PCB.pParserMgr,&PCB, PCB.pointer,&(PCB.singleVia),PCB.eHeaderType, PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status && RV_ERROR_NOTSUPPORTED != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
        
       ParserCleanExtParams (PCB.pExtParams);
       if(RV_ERROR_NOTSUPPORTED != status)
       {
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SINGLE_VIA, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SENT_PROTOCOL, &PCB);
           ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_VIA_SENT_BY, &PCB);
       }
    
}
static void ag_rp_85(PCB_DECL) {
/* Line 1083, RV SIP Stack */
 
        PCB.singleVia.sentProtocol = PCB.sentProtocol;
        PCB.singleVia.sentBy       = PCB.viaSentBy;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            if (PCB.singleVia.params.isOtherParams==RV_FALSE)
            {
                PCB.singleVia.params.isOtherParams = RV_TRUE;
                PCB.singleVia.params.otherParam = PCB.pExtParams;
            }
        }                
    
}
static void ag_rp_86(PCB_DECL) {
/* Line 1100, RV SIP Stack */
 
        PCB.singleVia.params.hidden     = RV_FALSE;
        PCB.singleVia.params.alias     = RV_FALSE;
        PCB.singleVia.params.isTtl      = RV_FALSE;
        PCB.singleVia.params.isMaddr    = RV_FALSE;
	    PCB.singleVia.params.isReceived = RV_FALSE;
        PCB.singleVia.params.isBranch   = RV_FALSE;
        PCB.singleVia.params.isOtherParams=RV_FALSE;  
        PCB.singleVia.params.isRport	= RV_FALSE;
        PCB.singleVia.params.isComp     = RV_FALSE;
    
}
static void ag_rp_87(PCB_DECL, ParserViaParam p) {
/* Line 1114, RV SIP Stack */
        switch( p.paramType )
        {
            case PARSER_PARAM_TYPE_HIDDEN :
                PCB.singleVia.params.hidden = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_ALIAS:
                PCB.singleVia.params.alias = RV_TRUE; 
                break;
            case PARSER_PARAM_TYPE_TTL :
                PCB.singleVia.params.isTtl = RV_TRUE;
                PCB.singleVia.params.ttl   = p.param.ttl;
                break;
            
            case PARSER_PARAM_TYPE_MADDR :
                PCB.singleVia.params.isMaddr = RV_TRUE;
                PCB.singleVia.params.maddr   = p.param.maddr;
                break;
            
            case PARSER_PARAM_TYPE_RECEIVED :
                PCB.singleVia.params.isReceived = RV_TRUE;
                PCB.singleVia.params.received   = p.param.received;
                break;
            
            case PARSER_PARAM_TYPE_BRANCH :
                PCB.singleVia.params.isBranch = RV_TRUE;
                PCB.singleVia.params.branch   = p.param.branch;
                break;
            case PARSER_PARAM_TYPE_RPORT:
                PCB.singleVia.params.isRport = RV_TRUE;
                PCB.singleVia.params.rPort   = p.param.rport;
                break;
                 
            case PARSER_PARAM_TYPE_COMP :
                PCB.singleVia.params.isComp  = RV_TRUE;
                PCB.singleVia.params.comp    = p.param.comp;
                break;   
            default:
                if (p.isOther == RV_TRUE)
                {
                     PCB.singleVia.params.isOtherParams = RV_TRUE;
                     PCB.singleVia.params.otherParam   = p.otherParam;
                }                   
                break;
        }       
    
}
static void ag_rp_88(PCB_DECL, ParserProtocolName pn, ParserProtocolVersion pv, ParserTransport t) {
/* Line 1166, RV SIP Stack */
 
        PCB.sentProtocol.protocolName    = pn;
        PCB.sentProtocol.protocolVersion = pv;
        PCB.sentProtocol.transport       = t;
    
}
#define ag_rp_89(PCB_POINTER, t) (t)
#define ag_rp_90(PCB_POINTER) (CUR_STRING())
#define ag_rp_91(PCB_POINTER, t) (t)
#define ag_rp_92(PCB_POINTER, t) (t)
static ParserTransport ag_rp_93(PCB_DECL) {
/* Line 1193, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_UDP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_94(PCB_DECL) {
/* Line 1200, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TCP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_95(PCB_DECL) {
/* Line 1207, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_SCTP;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_96(PCB_DECL) {
/* Line 1214, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_TLS;
        t.strTransport = CUR_STRING();
        return t;
    
}
static ParserTransport ag_rp_97(PCB_DECL, ParserBasicToken token) {
/* Line 1221, RV SIP Stack */
        ParserTransport t;
        t.transport    = RVSIP_TRANSPORT_OTHER;
        t.strTransport = token;
        RV_UNUSED_ARG(pcb_pointer);
        return t;
    
}
#define ag_rp_98(PCB_POINTER) (CUR_STRING())
static void ag_rp_99(PCB_DECL, ParserBasicToken host) {
/* Line 1240, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_FALSE;
        PCB.viaSentBy.hostName = host;
     
}
static void ag_rp_100(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 1246, RV SIP Stack */
 
        
        PCB.viaSentBy.isPort   = RV_TRUE;
        PCB.viaSentBy.hostName = host;
        PCB.viaSentBy.port     = port;
      
}
static ParserViaParam ag_rp_101(PCB_DECL) {
/* Line 1260, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_HIDDEN;                   
          viaParam.param.hidden = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_102(PCB_DECL) {
/* Line 1269, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_ALIAS;                   
          viaParam.param.alias = RV_TRUE;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_103(PCB_DECL, ParserTTLParam t) {
/* Line 1278, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_TTL;                   
          viaParam.param.ttl = t;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_104(PCB_DECL, ParserMaddrParam ma) {
/* Line 1287, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_MADDR;                   
          viaParam.param.maddr = ma;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_105(PCB_DECL, ParserReceived r) {
/* Line 1296, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RECEIVED;                   
          viaParam.param.received = r;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_106(PCB_DECL, ParserBranch b) {
/* Line 1305, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_BRANCH;                   
          viaParam.param.branch = b;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_107(PCB_DECL, ParserPort rport) {
/* Line 1315, RV SIP Stack */
          ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_RPORT;                   
          viaParam.param.rport = rport;
	      viaParam.isOther = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_108(PCB_DECL, ParserCompParam comp) {
/* Line 1324, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType  = PARSER_PARAM_TYPE_COMP;                   
          viaParam.param.comp = comp;
	      viaParam.isOther    = RV_FALSE;
          viaParam.otherParam = NULL;
          RV_UNUSED_ARG(pcb_pointer);
          return viaParam;
        
}
static ParserViaParam ag_rp_109(PCB_DECL) {
/* Line 1333, RV SIP Stack */
 ParserViaParam viaParam;
          viaParam.paramType = PARSER_PARAM_TYPE_OTHER; 
	      viaParam.isOther = RV_TRUE;
          viaParam.otherParam = PCB.pExtParams;
          return viaParam;    
        
}
static void ag_rp_110(PCB_DECL, ParserBasicToken token) {
/* Line 1350, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1, PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
        }
    
}
static void ag_rp_111(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1365, RV SIP Stack */
        if (0!=((ParserExtensionString *)PCB.pExtParams)->size)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_112(PCB_DECL, ParserBasicToken token, ParserQuotedString token2) {
/* Line 1384, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
static void ag_rp_113(PCB_DECL, ParserBasicToken token, ParserBasicToken token2) {
/* Line 1407, RV SIP Stack */
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            
            APPEND_DATA(";", 1,PCB.pExtParams);
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
        else
        {      
            
            APPEND_DATA(token.buf, token.len,PCB.pExtParams);
            APPEND_DATA("=", 1,PCB.pExtParams);
            APPEND_DATA(token2.buf, token2.len,PCB.pExtParams);
        }
    
}
#define ag_rp_114(PCB_POINTER, t) (t)
#define ag_rp_115(PCB_POINTER, ttl) (ttl)
#define ag_rp_116(PCB_POINTER) (CUR_STRING())
#define ag_rp_117(PCB_POINTER) (CUR_STRING())
#define ag_rp_118(PCB_POINTER) (CUR_STRING())
#define ag_rp_119(PCB_POINTER, rport) (rport)
static ParserPort ag_rp_120(PCB_DECL) {
/* Line 1462, RV SIP Stack */
        ParserPort port;
        port.len = 0;
		port.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return port;
    
}
#define ag_rp_121(PCB_POINTER, port) (port)
#define ag_rp_122(PCB_POINTER, ma) (ma)
#define ag_rp_123(PCB_POINTER, host) (host)
#define ag_rp_124(PCB_POINTER, host) (host)
#define ag_rp_125(PCB_POINTER, t) (t)
#define ag_rp_126(PCB_POINTER, comp) (comp)
static ParserCompParam ag_rp_127(PCB_DECL) {
/* Line 1499, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_SIGCOMP;
        comp.strCompParam = CUR_STRING();
        return comp;
    
}
static ParserCompParam ag_rp_128(PCB_DECL, ParserBasicToken token) {
/* Line 1506, RV SIP Stack */
        ParserCompParam comp;
        comp.compType     = RVSIP_COMP_OTHER;
        comp.strCompParam = CUR_STRING();
        RV_UNUSED_ARG(token.buf);
        return comp;
    
}
#define ag_rp_129(PCB_POINTER) (CUR_STRING())
#define ag_rp_130(PCB_POINTER) (CUR_STRING())
static void ag_rp_131(PCB_DECL) {
/* Line 1543, RV SIP Stack */
        RV_UNUSED_ARG(pcb_pointer);
    
}
static void ag_rp_132(PCB_DECL) {
/* Line 1547, RV SIP Stack */
        PCB.parenCount++;
    
}
static void ag_rp_133(PCB_DECL) {
/* Line 1551, RV SIP Stack */
        if (PCB.parenCount-- == 0) 
        {
            CHANGE_REDUCTION(END_COMMENT);
        }
    
}
static void ag_rp_134(PCB_DECL, ParserAbsoluteUri uri) {
/* Line 1737, RV SIP Stack */
       RvStatus status;
       status = ParserInitAbsUri(PCB.pParserMgr, &PCB, &uri, PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (status != RV_OK)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
    
}
static ParserAbsoluteUri ag_rp_135(PCB_DECL, ParserBasicToken scheme, ParserBasicToken id) {
/* Line 1757, RV SIP Stack */
        ParserAbsoluteUri uri;
        uri.scheme = scheme;
        uri.idefntifier = id;
        RV_UNUSED_ARG(pcb_pointer);
        return uri;
    
}
#define ag_rp_136(PCB_POINTER) (CUR_STRING())
#define ag_rp_137(PCB_POINTER, displayName) (displayName)
#define ag_rp_138(PCB_POINTER) (CUR_STRING())
#define ag_rp_139(PCB_POINTER) (CUR_STRING())
static void ag_rp_140(PCB_DECL) {
/* Line 2158, RV SIP Stack */
        RvStatus status;
        status = ParserInitUrl(PCB.pParserMgr,&PCB,&(PCB.sipUrl), PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_URL_PARAMETER, &PCB);
    
}
#define ag_rp_141(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
#define ag_rp_142(PCB_POINTER, uri) (INIT_PRES_IM_STRUCT(uri))
static void ag_rp_143(PCB_DECL) {
/* Line 2209, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_FALSE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
static void ag_rp_144(PCB_DECL) {
/* Line 2215, RV SIP Stack */
        PCB.sipUrl.bIsSecure = RV_TRUE;
        SIP_BEGIN_TOKEN();
        DEFINE_URL_PREFIX();
    
}
#define ag_rp_145(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_146(PCB_DECL) {
/* Line 2227, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
		uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
#define ag_rp_147(PCB_POINTER) (SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_RV_ABS))
static void ag_rp_148(PCB_DECL) {
/* Line 2243, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_FALSE);
    
}
#define ag_rp_149(PCB_POINTER, uri) (uri)
static ParserAbsoluteUri ag_rp_150(PCB_DECL) {
/* Line 2253, RV SIP Stack */
        ParserAbsoluteUri uri;
        
        uri.scheme.len = 0;
        uri.scheme.buf = NULL;
        uri.idefntifier.len = 0;
		uri.idefntifier.buf = NULL;
        RV_UNUSED_ARG(pcb_pointer)
        return uri;
    
}
static void ag_rp_151(PCB_DECL) {
/* Line 2266, RV SIP Stack */
        SIP_BEGIN_TOKEN();
        DEFINE_PRES_IM_PREFIX(RV_TRUE);
    
}
static void ag_rp_152(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2274, RV SIP Stack */
  
           
         PCB.sipUrl.optionalHeaders = hs;
         
         if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
         {
              PCB.sipUrl.urlParameters.genericParamList= PCB.pUrlExtParams;
              PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
         }          
  	
}
static void ag_rp_153(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2285, RV SIP Stack */
  
         
       PCB.sipUrl.optionalHeaders = hs;
       
       if (0 != ((ParserExtensionString *)PCB.pUrlExtParams)->size)
       {
            PCB.sipUrl.urlParameters.genericParamList=PCB.pUrlExtParams;
            PCB.sipUrl.urlParameters.isOtherParams   = RV_TRUE;
       }          
	
}
static void ag_rp_154(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2315, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_155(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2324, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_SIP_URL;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_156(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2351, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_157(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2360, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_PRES_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_158(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2372, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_159(PCB_DECL, ParserOptionalHeaders hs) {
/* Line 2381, RV SIP Stack */
 
        RESET_URI_PARAMS();
        PCB.sipUrl.optionalHeaders.isSpecified = RV_FALSE;
        PCB.sipUrl.optionalHeaders = hs;
        
        PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_IM_URI;
        PCB.exUri.ExUriInfo.SipUrl = PCB.sipUrl;
      
}
static void ag_rp_160(PCB_DECL, ParserDisplayName scheme, ParserBasicToken id) {
/* Line 2395, RV SIP Stack */
          PCB.exUri.ExUriInfo.absUri.scheme = scheme;
          PCB.exUri.ExUriInfo.absUri.idefntifier = id;
          PCB.exUri.uriType = PARSER_ADDR_PARAM_TYPE_ABS_URI;
      
}
static void ag_rp_161(PCB_DECL) {
/* Line 2405, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_TRUE;
    
}
static void ag_rp_162(PCB_DECL) {
/* Line 2410, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_163(PCB_DECL) {
/* Line 2417, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_USERINFO);
    
}
static void ag_rp_164(PCB_DECL, ParserBasicToken user) {
/* Line 2423, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_FALSE;
    
}
static void ag_rp_165(PCB_DECL, ParserBasicToken user, ParserBasicToken pass) {
/* Line 2428, RV SIP Stack */
        PCB.sipUrl.urlUserInfo.userName   = user;
        PCB.sipUrl.urlUserInfo.isPassword = RV_TRUE;
        PCB.sipUrl.urlUserInfo.password   = pass;
     
}
#define ag_rp_166(PCB_POINTER, t) (t)
#define ag_rp_167(PCB_POINTER) (CUR_STRING())
#define ag_rp_168(PCB_POINTER) (CUR_STRING())
static void ag_rp_169(PCB_DECL) {
/* Line 2461, RV SIP Stack */
        PCB.sipUrl.bIsUserInfo = RV_FALSE;
    
}
static void ag_rp_170(PCB_DECL) {
/* Line 2467, RV SIP Stack */
        SET_PARSER_PCB_BACK_TO_BUFF(RV_SIPPARSER_PREFIX_HOST);
    
}
static void ag_rp_171(PCB_DECL, ParserBasicToken host) {
/* Line 2475, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_FALSE;
    
}
static void ag_rp_172(PCB_DECL, ParserBasicToken host, ParserPort port) {
/* Line 2481, RV SIP Stack */
        PCB.sipUrl.urlHost.hostName = host;
        PCB.sipUrl.urlHost.isPort   = RV_TRUE;
        PCB.sipUrl.urlHost.port     = port;
    
}
#define ag_rp_173(PCB_POINTER, t) (t)
#define ag_rp_174(PCB_POINTER, ip6ref) (ip6ref)
#define ag_rp_175(PCB_POINTER) (CUR_STRING())
#define ag_rp_176(PCB_POINTER) (CUR_STRING())
#define ag_rp_177(PCB_POINTER) (CUR_STRING())
#define ag_rp_178(PCB_POINTER) (RESET_URI_PARAMS())
static void ag_rp_179(PCB_DECL) {
/* Line 2535, RV SIP Stack */
	
       PCB.sipUrl.urlParameters.isValid = RV_TRUE;
    
}
static void ag_rp_180(PCB_DECL) {
/* Line 2548, RV SIP Stack */
 
        RESET_URI_PARAMS();  
         								
        switch( PCB.urlParameter.paramType )
        {
            case PARSER_TRANSPORT_PARAM: 
	            PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
	            PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
	            break;
            case PARSER_USER_PARAM: 
	            PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
	            PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
	            break;		
            case PARSER_TTL_PARAM: 
	            PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
	            PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
	            break;
            case PARSER_MADDR_PARAM: 
	            PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
	            break;
            case PARSER_METHOD_PARAM: 
	            PCB.sipUrl.urlParameters.isMethodParam       = RV_TRUE;
	            PCB.sipUrl.urlParameters.methodParam         = PCB.urlParameter.param.methodParam; 
	            break;
            case PARSER_LR_PARAM: 
	            PCB.sipUrl.urlParameters.lrParamType         = PCB.urlParameter.param.lrParamType;
	            break;
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam         = RV_TRUE;
                PCB.sipUrl.urlParameters.compParam           = PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
	            break;
             default:
                 PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                 PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;            
        } 	 														
    
}
static void ag_rp_181(PCB_DECL) {
/* Line 2595, RV SIP Stack */
 
         
        switch( PCB.urlParameter.paramType )
        {
	        case PARSER_TRANSPORT_PARAM: 
		        PCB.sipUrl.urlParameters.isTransport        = RV_TRUE;
		        PCB.sipUrl.urlParameters.transport          = PCB.urlParameter.param.transport; 
		        break;
	        case PARSER_USER_PARAM: 
		        PCB.sipUrl.urlParameters.isUserParam        = RV_TRUE;
		        PCB.sipUrl.urlParameters.userParam          = PCB.urlParameter.param.userParam; 
		        break;	
	        case PARSER_TTL_PARAM: 
		        PCB.sipUrl.urlParameters.isTtlParam         = RV_TRUE;
		        PCB.sipUrl.urlParameters.ttlParam           = PCB.urlParameter.param.ttlParam; 
		        break;
	        case PARSER_MADDR_PARAM: 
		        PCB.sipUrl.urlParameters.isMaddrParam       = RV_TRUE;
		        PCB.sipUrl.urlParameters.maddrParam         = PCB.urlParameter.param.maddrParam; 
		        break;  
            case PARSER_METHOD_PARAM: 
		        PCB.sipUrl.urlParameters.isMethodParam		= RV_TRUE;
		        PCB.sipUrl.urlParameters.methodParam		= PCB.urlParameter.param.methodParam; 
		        break; 
            case PARSER_LR_PARAM: 
		        PCB.sipUrl.urlParameters.lrParamType		= PCB.urlParameter.param.lrParamType;
		        break; 
            case PARSER_COMP_PARAM:
                PCB.sipUrl.urlParameters.isCompParam		= RV_TRUE;
                PCB.sipUrl.urlParameters.compParam			= PCB.urlParameter.param.compParam;
                break;
			case PARSER_TOKENIZED_BY_PARAM: 
		        PCB.sipUrl.urlParameters.isTokenizedByParam	= RV_TRUE;
		        PCB.sipUrl.urlParameters.tokenizedByParam	= PCB.urlParameter.param.tokenizedByParam; 
		        break;
			case PARSER_ORIG_PARAM: 
		        PCB.sipUrl.urlParameters.bOrigParam			= PCB.urlParameter.param.bOrigParam;
		        break;
            case PARSER_OTHER_PARAM:    
		        PCB.sipUrl.urlParameters.isOtherParams		= RV_TRUE;
		        break; 
            default:
                PCB.exit_flag = AG_SEMANTIC_ERROR_CODE;
                PCB.eStat = RV_ERROR_ILLEGAL_SYNTAX;                  
        }	 
    
}
static void ag_rp_182(PCB_DECL, ParserTransport t) {
/* Line 2645, RV SIP Stack */
 
         PCB.urlParameter.paramType = PARSER_TRANSPORT_PARAM;
         PCB.urlParameter.param.transport = t;
    
}
static void ag_rp_183(PCB_DECL, ParserUserParam u) {
/* Line 2650, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_USER_PARAM;
		 PCB.urlParameter.param.userParam = u;
	
}
static void ag_rp_184(PCB_DECL, ParserTtlParam t) {
/* Line 2655, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_TTL_PARAM;
		 PCB.urlParameter.param.ttlParam = t;
	
}
static void ag_rp_185(PCB_DECL, ParserMaddrParam ma) {
/* Line 2660, RV SIP Stack */
 
	     PCB.urlParameter.paramType = PARSER_MADDR_PARAM;
		 PCB.urlParameter.param.maddrParam = ma;
	
}
static void ag_rp_186(PCB_DECL, ParserMethod met) {
/* Line 2666, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_METHOD_PARAM;
		 PCB.urlParameter.param.methodParam =met;
    
}
static void ag_rp_187(PCB_DECL, ParserLrParamType lrParam) {
/* Line 2671, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_LR_PARAM;
		 PCB.urlParameter.param.lrParamType   = lrParam;
    
}
static void ag_rp_188(PCB_DECL, ParserCompParam comp) {
/* Line 2676, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_COMP_PARAM;
        PCB.urlParameter.param.compParam = comp;
    
}
static void ag_rp_189(PCB_DECL, ParserTokenizedByParam tokenizedBy) {
/* Line 2681, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_TOKENIZED_BY_PARAM;
        PCB.urlParameter.param.tokenizedByParam = tokenizedBy;
    
}
static void ag_rp_190(PCB_DECL, RvBool orig) {
/* Line 2686, RV SIP Stack */
        PCB.urlParameter.paramType       = PARSER_ORIG_PARAM;
        PCB.urlParameter.param.bOrigParam = orig;
    
}
static void ag_rp_191(PCB_DECL) {
/* Line 2696, RV SIP Stack */
	     PCB.urlParameter.paramType = PARSER_OTHER_PARAM;
    
}
#define ag_rp_192(PCB_POINTER, t) (t)
static ParserUserParam ag_rp_193(PCB_DECL, RvSipUserParam pt) {
/* Line 2711, RV SIP Stack */
 
        ParserUserParam userParam;
	    userParam.paramType = pt;
		userParam.otherUser.buf = NULL;
		userParam.otherUser.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
static ParserUserParam ag_rp_194(PCB_DECL, ParserOtherUser ou) {
/* Line 2720, RV SIP Stack */
 
        ParserUserParam userParam;
        userParam.paramType = RVSIP_USERPARAM_OTHER;
	    userParam.otherUser = ou;
        RV_UNUSED_ARG(pcb_pointer);
	    return userParam;
    
}
#define ag_rp_195(PCB_POINTER) (RVSIP_USERPARAM_PHONE)
#define ag_rp_196(PCB_POINTER) (RVSIP_USERPARAM_IP)
#define ag_rp_197(PCB_POINTER, t) (t)
#define ag_rp_198(PCB_POINTER, ttl) (ttl)
#define ag_rp_199(PCB_POINTER, host) (host)
#define ag_rp_200(PCB_POINTER, met) (met)
#define ag_rp_201(PCB_POINTER) (ParserLrParam1)
#define ag_rp_202(PCB_POINTER) (ParserLrParamTrue)
#define ag_rp_203(PCB_POINTER) (ParserLrParamOn)
#define ag_rp_204(PCB_POINTER) (ParserLrParamEmpty)
#define ag_rp_205(PCB_POINTER, comp) (comp)
#define ag_rp_206(PCB_POINTER, hostname) (hostname)
#define ag_rp_207(PCB_POINTER) (RV_TRUE)
static void ag_rp_208(PCB_DECL, ParserBasicToken token) {
/* Line 2792, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token.buf,token.len, PCB.pUrlExtParams);
          }
          else
          {      
              
              APPEND_DATA(token.buf,token.len,PCB.pUrlExtParams);
          }
    
}
static void ag_rp_209(PCB_DECL, ParserBasicToken token1, ParserBasicToken token2) {
/* Line 2806, RV SIP Stack */
          if (0!=((ParserExtensionString *)PCB.pUrlExtParams)->size)
          {
              
              APPEND_DATA(";", 1,PCB.pUrlExtParams);
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
          else
          {      
              
              APPEND_DATA(token1.buf, token1.len,PCB.pUrlExtParams);
              APPEND_DATA("=" , 1,PCB.pUrlExtParams);
              APPEND_DATA(token2.buf, token2.len,PCB.pUrlExtParams);            
          }
    
}
#define ag_rp_210(PCB_POINTER) (CUR_STRING())
#define ag_rp_211(PCB_POINTER, token) (token)
static ParserOptionalHeaders ag_rp_212(PCB_DECL) {
/* Line 2849, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_FALSE;
		optionalHeaders.body.buf = NULL;
		optionalHeaders.body.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
static ParserOptionalHeaders ag_rp_213(PCB_DECL, ParserBasicToken headersList) {
/* Line 2858, RV SIP Stack */
 
        ParserOptionalHeaders optionalHeaders;
        optionalHeaders.isSpecified = RV_TRUE;
        optionalHeaders.body=headersList;
        RV_UNUSED_ARG(pcb_pointer);
        return optionalHeaders;
    
}
#define ag_rp_214(PCB_POINTER) (CUR_STRING())
#define ag_rp_215(PCB_POINTER) (CUR_STRING())
#define ag_rp_216(PCB_POINTER) (CUR_STRING())
#define ag_rp_217(PCB_POINTER) (CUR_STRING())
#define ag_rp_218(PCB_POINTER) (CUR_STRING())
static void ag_rp_219(PCB_DECL) {
/* Line 2894, RV SIP Stack */
        RvStatus status;
        status = ParserInitRequsetLine(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.requestLine), PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REQUEST_LINE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        
    
}
static void ag_rp_220(PCB_DECL, ParserMethod met, ParserSipVersion ver) {
/* Line 2919, RV SIP Stack */
         PCB.requestLine.method = met;
         PCB.requestLine.sipVer = ver;
		 PCB.requestLine.exUri = PCB.exUri;         
    
}
#define ag_rp_221(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("m"))
#define ag_rp_222(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("i"))
#define ag_rp_223(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("c"))
#define ag_rp_224(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("v"))
#define ag_rp_225(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("t"))
#define ag_rp_226(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("f"))
#define ag_rp_227(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("r"))
#define ag_rp_228(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("b"))
#define ag_rp_229(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("k"))
#define ag_rp_230(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("x"))
#define ag_rp_231(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("o"))
#define ag_rp_232(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("u"))
#define ag_rp_233(PCB_POINTER) (CUR_REQUEST_COMPACT_METHOD("l"))
#define ag_rp_234(PCB_POINTER, met) (met)
#define ag_rp_235(PCB_POINTER) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_SIP_URL, PCB.exUri.ExUriInfo.absUri))
#define ag_rp_236(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_PRES_URI, uri))
#define ag_rp_237(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_IM_URI, uri))
#define ag_rp_238(PCB_POINTER, uri) (SET_URI_TYPE(PARSER_ADDR_PARAM_TYPE_ABS_URI, uri))
static void ag_rp_239(PCB_DECL) {
/* Line 2974, RV SIP Stack */
 
         RvStatus status;
         status = ParserInitParty(PCB.pParserMgr,PCB.pointer,&(PCB.party), PCB.eHeaderType, PCB.eWhichHeader, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
        ParserCleanExtParams (PCB.pExtParams); 
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_PARTY, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
	 
}
static void ag_rp_240(PCB_DECL) {
/* Line 3000, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_241(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3009, RV SIP Stack */
 
	  PCB.party.nameAddr = PCB.nameAddr;
	  PCB.party.partyParams = partyParams; 
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_242(PCB_DECL) {
/* Line 3018, RV SIP Stack */
 
	  PCB.party.nameAddr.isDisplayName = RV_FALSE;
      PCB.party.partyParams.isTag = RV_FALSE;
	  PCB.party.partyParams.isAddrParams = RV_FALSE;
	  PCB.party.nameAddr.exUri = PCB.exUri;
      PCB.party.isCompact = PCB.isCompactForm;
	
}
static void ag_rp_243(PCB_DECL, ParserPartyParams partyParams) {
/* Line 3028, RV SIP Stack */
 
        PCB.party.nameAddr.isDisplayName = RV_FALSE;
        PCB.party.partyParams = partyParams;
		PCB.party.nameAddr.exUri = PCB.exUri;       
        PCB.party.isCompact = PCB.isCompactForm;
      
	
}
static void ag_rp_244(PCB_DECL, ParserDisplayName name) {
/* Line 3040, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;    
        PCB.nameAddr.isDisplayName = RV_TRUE;  
	    PCB.nameAddr.name = name;
	
}
static void ag_rp_245(PCB_DECL) {
/* Line 3047, RV SIP Stack */
 
		PCB.nameAddr.exUri = PCB.exUri;
        PCB.nameAddr.isDisplayName = RV_FALSE;  
    
}
#define ag_rp_246(PCB_POINTER, qs) (qs)
#define ag_rp_247(PCB_POINTER, mtot) (mtot)
#define ag_rp_248(PCB_POINTER) (CUR_STRING())
#define ag_rp_249(PCB_POINTER) (CUR_STRING())
#define ag_rp_250(PCB_POINTER, t) (t)
#define ag_rp_251(PCB_POINTER, ppd) (ppd)
static ParserPartyParams ag_rp_252(PCB_DECL, ParserPartyParams ppl, ParserPartyParams ppd) {
/* Line 3078, RV SIP Stack */
        if (RV_TRUE == ppd.isTag)
        {
            ppl.isTag = RV_TRUE;
            ppl.tag = ppd.tag;
        }
        if (RV_TRUE == ppd.isAddrParams) 
        {
            ppl.isAddrParams = RV_TRUE;
            ppl.addrParams = ppd.addrParams;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ppl;
    
}
static ParserPartyParams ag_rp_253(PCB_DECL, ParserTagParam tag) {
/* Line 3097, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isTag = RV_TRUE;
        partyParams.tag = tag;
        partyParams.isAddrParams = RV_FALSE;
        partyParams.addrParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return partyParams; 
    
}
static ParserPartyParams ag_rp_254(PCB_DECL) {
/* Line 3107, RV SIP Stack */
        ParserPartyParams partyParams;
        partyParams.isAddrParams = RV_TRUE;
        partyParams.isTag = RV_FALSE;
        partyParams.addrParams = PCB.pExtParams;
		partyParams.tag.buf = NULL;
		partyParams.tag.len = 0;
        return partyParams; 
    
}
static void ag_rp_255(PCB_DECL) {
/* Line 3133, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_TRUE; 
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr, &PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
    
}
static void ag_rp_256(PCB_DECL) {
/* Line 3166, RV SIP Stack */
         RvStatus status;
         ParserContactHeaderValues  contactHeaderValues;
         contactHeaderValues.isStar        = RV_FALSE;
         contactHeaderValues.header        = PCB.contact;
         contactHeaderValues.isCompact     = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
         
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_257(PCB_DECL) {
/* Line 3199, RV SIP Stack */
         RvStatus                 status;
         ParserContactHeaderValues contactHeaderValues;
         contactHeaderValues.isStar = RV_FALSE;
         contactHeaderValues.header = PCB.contact;
         contactHeaderValues.isCompact = PCB.isCompactForm;
         status = ParserInitContactHeader(PCB.pParserMgr,&PCB, PCB.pointer,
                                          &contactHeaderValues,
                                          PCB.eHeaderType,
                                          PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTACT, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_258(PCB_DECL) {
/* Line 3234, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_FALSE;
	
}
static void ag_rp_259(PCB_DECL) {
/* Line 3240, RV SIP Stack */
 
	  PCB.contact.nameAddr = PCB.nameAddr;
      PCB.contact.isParams = RV_TRUE;
      
	
}
static void ag_rp_260(PCB_DECL) {
/* Line 3250, RV SIP Stack */
 
	  PCB.contact.nameAddr.isDisplayName = RV_FALSE;  
      PCB.contact.isParams = RV_FALSE;
	  PCB.contact.nameAddr.exUri = PCB.exUri;      
	
}
static void ag_rp_261(PCB_DECL) {
/* Line 3257, RV SIP Stack */
 
      PCB.contact.nameAddr.isDisplayName = RV_FALSE;
	  PCB.contact.isParams = RV_TRUE;      
      PCB.contact.nameAddr.exUri = PCB.exUri;
	
}
static void ag_rp_262(PCB_DECL, ParserQVal q) {
/* Line 3277, RV SIP Stack */
 
        PCB.contact.params.isQ = RV_TRUE;
        PCB.contact.params.q = q;
    
}
static void ag_rp_263(PCB_DECL, ParserContactActionType action) {
/* Line 3283, RV SIP Stack */
 
        PCB.contact.params.isAction = RV_TRUE;
        PCB.contact.params.action = action;
    
}
static void ag_rp_264(PCB_DECL) {
/* Line 3289, RV SIP Stack */
 
        PCB.contact.params.isExpires = RV_TRUE;
        PCB.contact.params.expires = PCB.expires;
    
}
static void ag_rp_265(PCB_DECL) {
/* Line 3295, RV SIP Stack */
  
        PCB.contact.params.isExtention = RV_TRUE;
		PCB.contact.params.exten = PCB.pExtParams;
    
}
#define ag_rp_266(PCB_POINTER, qVal) (qVal)
#define ag_rp_267(PCB_POINTER) (CUR_STRING())
#define ag_rp_268(PCB_POINTER) (CUR_STRING())
#define ag_rp_269(PCB_POINTER, actionVal) (actionVal)
#define ag_rp_270(PCB_POINTER) (PARSER_CONTACT_ACTION_PROXY)
#define ag_rp_271(PCB_POINTER) (PARSER_CONTACT_ACTION_REDIRECT)
static void ag_rp_272(PCB_DECL) {
/* Line 3341, RV SIP Stack */
       RvStatus status;
       status = ParserInitExpiresHeader(PCB.pParserMgr,PCB.pointer,&(PCB.expires),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXPIRES, &PCB);
    
}
static void ag_rp_273(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3363, RV SIP Stack */
  
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_274(PCB_DECL, ParserSipDate date) {
/* Line 3369, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
static void ag_rp_275(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 3378, RV SIP Stack */
   
		PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DELTA_SECONDS;
		PCB.expires.deltaSeconds = delta;
    
}
static void ag_rp_276(PCB_DECL, ParserSipDate date) {
/* Line 3384, RV SIP Stack */
   
	    PCB.expires.eFormat = RVSIP_EXPIRES_FORMAT_DATE;
	    PCB.expires.sipDate = date;
	
}
#define ag_rp_277(PCB_POINTER) (CUR_STRING())
static void ag_rp_278(PCB_DECL, ParserSipDate date) {
/* Line 3409, RV SIP Stack */
   
          RvStatus status;
          status = ParserInitDateHeader(PCB.pParserMgr,PCB.pointer,&date,PCB.eHeaderType,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
                
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
    
}
static ParserSipDate ag_rp_279(PCB_DECL, ParserDDMMYY date, ParserTime t) {
/* Line 3431, RV SIP Stack */
  
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_280(PCB_POINTER, date) (date)
static ParserSipDate ag_rp_281(PCB_DECL, RvSipDateWeekDay day, ParserDDMMYY date, ParserTime t) {
/* Line 3446, RV SIP Stack */
   
        ParserSipDate sipDate;
        sipDate.eWeekDay = RVSIP_WEEKDAY_UNDEFINED;
	    sipDate.eWeekDay = day; 
		sipDate.ddmmyy   = date;
        sipDate.time     = t;
        RV_UNUSED_ARG(pcb_pointer);
        return sipDate;
    
}
#define ag_rp_282(PCB_POINTER) (RVSIP_WEEKDAY_SUN)
#define ag_rp_283(PCB_POINTER) (RVSIP_WEEKDAY_MON)
#define ag_rp_284(PCB_POINTER) (RVSIP_WEEKDAY_TUE)
#define ag_rp_285(PCB_POINTER) (RVSIP_WEEKDAY_WED)
#define ag_rp_286(PCB_POINTER) (RVSIP_WEEKDAY_THU)
#define ag_rp_287(PCB_POINTER) (RVSIP_WEEKDAY_FRI)
#define ag_rp_288(PCB_POINTER) (RVSIP_WEEKDAY_SAT)
static ParserDDMMYY ag_rp_289(PCB_DECL, ParserInt32 dd, RvSipDateMonth mm, ParserInt32 yy) {
/* Line 3471, RV SIP Stack */
        ParserDDMMYY ddmmyy;
        ddmmyy.day = dd;
        ddmmyy.eMonth = mm;
        ddmmyy.year = yy;
        RV_UNUSED_ARG(pcb_pointer);
        return ddmmyy;
    
}
static ParserInt32 ag_rp_290(PCB_DECL, int d) {
/* Line 3483, RV SIP Stack */
    	RV_UNUSED_ARG(pcb_pointer);
    	return d - '0';	
    
}
static ParserInt32 ag_rp_291(PCB_DECL, int d1, int d2) {
/* Line 3488, RV SIP Stack */
		RV_UNUSED_ARG(pcb_pointer);
	    return 10 * (d1-'0') + (d2-'0');
    
}
#define ag_rp_292(PCB_POINTER) (RVSIP_MONTH_JAN)
#define ag_rp_293(PCB_POINTER) (RVSIP_MONTH_FEB)
#define ag_rp_294(PCB_POINTER) (RVSIP_MONTH_MAR)
#define ag_rp_295(PCB_POINTER) (RVSIP_MONTH_APR)
#define ag_rp_296(PCB_POINTER) (RVSIP_MONTH_MAY)
#define ag_rp_297(PCB_POINTER) (RVSIP_MONTH_JUN)
#define ag_rp_298(PCB_POINTER) (RVSIP_MONTH_JUL)
#define ag_rp_299(PCB_POINTER) (RVSIP_MONTH_AUG)
#define ag_rp_300(PCB_POINTER) (RVSIP_MONTH_SEP)
#define ag_rp_301(PCB_POINTER) (RVSIP_MONTH_OCT)
#define ag_rp_302(PCB_POINTER) (RVSIP_MONTH_NOV)
#define ag_rp_303(PCB_POINTER) (RVSIP_MONTH_DEC)
#define ag_rp_304(PCB_POINTER, d1, d2) (2000 + 10 * (d1-'0') + (d2-'0'))
#define ag_rp_305(PCB_POINTER, d1, d2, d3) (2000 + 100 * (d1-'0') + 10 * (d2-'0') + (d3-'0'))
#define ag_rp_306(PCB_POINTER, d1, d2, d3, d4) (1000 * (d1-'0') + 100*(d2-'0') + 10*(d3-'0') + (d4-'0'))
static ParserTime ag_rp_307(PCB_DECL, ParserInt32 hour, ParserInt32 min, ParserInt32 second, ParserTimeZone zone) {
/* Line 3518, RV SIP Stack */
        ParserTime t;
        t.hour   = hour;
        t.minute = min;
        t.second = second;
        t.zone   = zone;
        RV_UNUSED_ARG(pcb_pointer);
        return t;        
    
}
#define ag_rp_308(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_309(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_310(PCB_POINTER, d1, d2) (10*(d1-'0') + (d2-'0'))
#define ag_rp_311(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMT)
#define ag_rp_312(PCB_POINTER) (SIPPARSER_TIME_ZONE_UTC)
#define ag_rp_313(PCB_POINTER) (SIPPARSER_TIME_ZONE_GMST)
static void ag_rp_314(PCB_DECL, ParserMethod method) {
/* Line 3565, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value.buf = NULL;
        otherHeader.value.len = 0;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
        
    
}
static void ag_rp_315(PCB_DECL, ParserMethod method, ParserBasicToken fv) {
/* Line 3590, RV SIP Stack */
        RvStatus         status;
        ParserOtherHeader otherHeader;
        otherHeader.name = method.other;
        otherHeader.value = fv;
        ParserMethodInOtherHeader(&method, &otherHeader);
        status = ParserInitOtherHeader(PCB.pParserMgr,&PCB,PCB.pointer,
                                       &otherHeader,
                                       PCB.eHeaderType,
                                       PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
    
}
static void ag_rp_316(PCB_DECL) {
/* Line 4663, RV SIP Stack */
         RvStatus status;
         status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
         if(RV_ERROR_ILLEGAL_SYNTAX == status)
         {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
         }
         else if (RV_OK != status)
         {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
         }
          
         ParserCleanExtParams (PCB.pExtParams);
         ParserCleanExtParams (PCB.pUrlExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_317(PCB_DECL) {
/* Line 4686, RV SIP Stack */
 
        RvStatus status;
        status = ParserInitRoute(PCB.pParserMgr,&PCB,PCB.pointer,&(PCB.route), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
             PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
             SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
             
             PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
             PCB.eStat = status;
        }
         
        ParserCleanExtParams (PCB.pExtParams);
        ParserCleanExtParams (PCB.pUrlExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_ROUTE, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_NAME_ADDR, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_EXURI, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_SIP_URL, &PCB);
    
}
static void ag_rp_318(PCB_DECL) {
/* Line 4713, RV SIP Stack */
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_FALSE;
        PCB.route.eRouteType = PCB.eWhichHeader;
    
}
static void ag_rp_319(PCB_DECL) {
/* Line 4718, RV SIP Stack */
 
        PCB.route.nameAddr = PCB.nameAddr;
        PCB.route.isParams = RV_TRUE;
        PCB.route.eRouteType = PCB.eWhichHeader;
          
         if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
         {
             PCB.route.routeParams = PCB.pExtParams;
         }                
     
}
static void ag_rp_320(PCB_DECL) {
/* Line 4744, RV SIP Stack */
   
       RvStatus status;
       status = ParserInitRetryAfterHeader(PCB.pParserMgr,PCB.pointer,&(PCB.retryAfter),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
        
         ParserCleanExtParams (PCB.pExtParams);
         ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RETRY_AFTER, &PCB);
    
}
static void ag_rp_321(PCB_DECL, ParserDeltaSeconds delta, ParserRetryParam param) {
/* Line 4769, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_322(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4779, RV SIP Stack */
         PCB.retryAfter.deltaSeconds = delta;
         PCB.retryAfter.isSipDate = RV_FALSE;
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_323(PCB_DECL, ParserSipDate date, ParserRetryParam param) {
/* Line 4790, RV SIP Stack */
        PCB.retryAfter.sipDate   = date;
        PCB.retryAfter.isSipDate = RV_TRUE;
        if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
        PCB.retryAfter.retryParam = param;
    
}
static void ag_rp_324(PCB_DECL, ParserSipDate date) {
/* Line 4801, RV SIP Stack */
         PCB.retryAfter.sipDate   = date;
         PCB.retryAfter.isSipDate = RV_TRUE;
         
         if (PCB.retryAfter.isComment != RV_TRUE)
         {
             PCB.retryAfter.isComment = RV_FALSE;
         }
         PCB.retryAfter.retryParam.genericParams = NULL;
    
}
static void ag_rp_325(PCB_DECL, ParserBasicToken comment) {
/* Line 4816, RV SIP Stack */
        PCB.retryAfter.comment = comment;
        PCB.retryAfter.isComment = RV_TRUE;
    
}
static ParserRetryParam ag_rp_326(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 4824, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_TRUE;
        param.deltaSeconds   = delta;
        param.genericParams = NULL;
        RV_UNUSED_ARG(pcb_pointer);
        return param;
    
}
static ParserRetryParam ag_rp_327(PCB_DECL) {
/* Line 4833, RV SIP Stack */
        ParserRetryParam param;
        param.isDeltaSeconds = RV_FALSE;
		param.deltaSeconds.buf = NULL;
		param.deltaSeconds.len = 0;
        param.genericParams = NULL;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             param.genericParams=PCB.pExtParams;
        }
        return param;
    
}
static ParserRetryParam ag_rp_328(PCB_DECL, ParserRetryParam params, ParserDeltaSeconds delta) {
/* Line 4847, RV SIP Stack */
        params.isDeltaSeconds = RV_TRUE;
        params.deltaSeconds   = delta;   
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserRetryParam ag_rp_329(PCB_DECL, ParserRetryParam params) {
/* Line 4854, RV SIP Stack */
        params.genericParams  = NULL;
         
        if (((ParserExtensionString *)PCB.pExtParams)->size !=0)
        {
            params.genericParams = PCB.pExtParams;
        }    
        return params;
    
}
#define ag_rp_330(PCB_POINTER, delta) (delta)
static void ag_rp_331(PCB_DECL, ParserRSeq rseq) {
/* Line 4880, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRSeq(PCB.pParserMgr,PCB.pointer,&rseq,PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
    
}
#define ag_rp_332(PCB_POINTER, responseNum) (responseNum)
#define ag_rp_333(PCB_POINTER) (CUR_STRING())
static void ag_rp_334(PCB_DECL) {
/* Line 4918, RV SIP Stack */
   
       RvStatus status; 
       status = ParserInitRack(PCB.pParserMgr,PCB.pointer,&(PCB.rack),PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
           
           PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
           PCB.eStat = status;
       }
       ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_RACK, &PCB);
    
}
static void ag_rp_335(PCB_DECL, ParserResponseNum responseNum, ParserSequenceNumber sequenceNumber, ParserMethod method) {
/* Line 4940, RV SIP Stack */
		PCB.rack.method = method;
		PCB.rack.sequenceNumber = sequenceNumber;
        PCB.rack.responseNum = responseNum;
	 
}
#define ag_rp_336(PCB_POINTER, t) (t)
static void ag_rp_337(PCB_DECL, ParserBasicToken tag) {
/* Line 4956, RV SIP Stack */
 
          RvStatus       status; 
          ParserOptionTag option; 
          option.headerType = PCB.eWhichHeader;
          option.optionTag = tag;
          status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm,PCB.pSipObject);
          if(RV_ERROR_ILLEGAL_SYNTAX == status)
          {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
          }
          else if (RV_OK != status)
          {
              
              PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
              PCB.eStat = status;
          }
           
          ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_338(PCB_DECL, ParserBasicToken opTag) {
/* Line 4980, RV SIP Stack */
 
           RvStatus       status;
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag = opTag;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
              PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
           }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_339(PCB_DECL) {
/* Line 5005, RV SIP Stack */
 
           RvStatus       status; 
           ParserOptionTag option; 
           option.headerType = PCB.eWhichHeader;
           option.optionTag.len = 0;
           status = ParserInitOptionTag(PCB.pParserMgr,&PCB,PCB.pointer,&option, 
                                        PCB.eHeaderType, PCB.isCompactForm, PCB.pSipObject);
           if(RV_ERROR_ILLEGAL_SYNTAX == status)
		   {
			  PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
              SYNTAX_ERROR;
		   }
           else if (RV_OK != status)
           {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
           }
            
           ParserCleanExtParams (PCB.pExtParams);
      
}
static void ag_rp_340(PCB_DECL) {
/* Line 5536, RV SIP Stack */
            RvStatus status;
            status = ParserInitContentDisposition(PCB.pParserMgr,PCB.pointer,&(PCB.contentDisposition), PCB.eHeaderType, PCB.pSipObject);
            if(RV_ERROR_ILLEGAL_SYNTAX == status)
			{
				PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
				SYNTAX_ERROR;
			}
			else if (RV_OK != status)
            {
                
                PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
                PCB.eStat = status;
            }
            ParserCleanExtParams (PCB.pExtParams);
            ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_CONTENT_DISPOSITION, &PCB);
         
}
static void ag_rp_341(PCB_DECL, ParserDisposition type, ParserDispositionParams params) {
/* Line 5556, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams = params;
    
}
static void ag_rp_342(PCB_DECL, ParserDisposition type) {
/* Line 5561, RV SIP Stack */
        PCB.contentDisposition.dispositionType   = type;
        PCB.contentDisposition.dispositionParams.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN;
        PCB.contentDisposition.dispositionParams.isGenericParam = RV_FALSE;
    
}
#define ag_rp_343(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_RENDER))
#define ag_rp_344(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SESSION))
#define ag_rp_345(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ICON))
#define ag_rp_346(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_ALERT))
#define ag_rp_347(PCB_POINTER) (CUR_DISPOSITION_TYPE(PARSER_DISPOSITION_TYPE_SIGNAL))
static ParserDisposition ag_rp_348(PCB_DECL, ParserBasicToken otherType) {
/* Line 5576, RV SIP Stack */
        ParserDisposition disposition;
        disposition.eDispositionType = PARSER_DISPOSITION_TYPE_OTHER;
        disposition.otherDispositionType = otherType;
        RV_UNUSED_ARG(pcb_pointer);
        return disposition;
    
}
static ParserDispositionParams ag_rp_349(PCB_DECL, ParserDispositionParam param) {
/* Line 5587, RV SIP Stack */
        ParserDispositionParams params;
        params.handlingParam    = param;
        params.genericParamList = NULL;
        params.isGenericParam = RV_FALSE;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParams ag_rp_350(PCB_DECL) {
/* Line 5597, RV SIP Stack */
        ParserDispositionParams params;
		
		params.isGenericParam = RV_TRUE;
		params.genericParamList = NULL;
		params.handlingParam.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.handlingParam.otherHandlingParam.buf = NULL;
		params.handlingParam.otherHandlingParam.len = 0;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             params.genericParamList=PCB.pExtParams;
        }
        
        return params;
    
}
static ParserDispositionParams ag_rp_351(PCB_DECL, ParserDispositionParams ps, ParserDispositionParam p) {
/* Line 5615, RV SIP Stack */
        if (p.eParam != PARSER_DISPOSITION_PARAM_HANDLING_UNKNOWN)
        {
            ps.handlingParam = p;
        }
        RV_UNUSED_ARG(pcb_pointer);
        return ps;
    
}
static ParserDispositionParams ag_rp_352(PCB_DECL, ParserDispositionParams ps) {
/* Line 5624, RV SIP Stack */
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
             ps.genericParamList=PCB.pExtParams;
        }
        ps.isGenericParam = RV_TRUE;
        return ps;
    
}
static ParserDispositionParam ag_rp_353(PCB_DECL) {
/* Line 5637, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OPTIONAL;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_354(PCB_DECL) {
/* Line 5646, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_REQUIRED;
		params.otherHandlingParam.buf = NULL;
		params.otherHandlingParam.len = 0;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static ParserDispositionParam ag_rp_355(PCB_DECL, ParserBasicToken other) {
/* Line 5655, RV SIP Stack */
        ParserDispositionParam params;
        params.eParam = PARSER_DISPOSITION_PARAM_HANDLING_OTHER;
        params.otherHandlingParam = other;
        RV_UNUSED_ARG(pcb_pointer);
        return params;
    
}
static void ag_rp_356(PCB_DECL, ParserSessionExpiresHeader sessionExpires) {
/* Line 5674, RV SIP Stack */
        RvStatus status;
        sessionExpires.isCompact = PCB.isCompactForm;
        status = ParserInitSessionExpiresHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
												PCB.eHeaderType,PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserSessionExpiresHeader ag_rp_357(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5696, RV SIP Stack */
 
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
        sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
		RV_UNUSED_ARG(pcb_pointer);
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_358(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5708, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_359(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5723, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = RVSIP_SESSION_EXPIRES_REFRESHER_NONE;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
static ParserSessionExpiresHeader ag_rp_360(PCB_DECL, ParserDeltaSeconds delta, RvSipSessionExpiresRefresherType refType) {
/* Line 5739, RV SIP Stack */
        ParserSessionExpiresHeader sessionExpires;
        sessionExpires.deltaSeconds = delta;
        sessionExpires.refresherType = refType;
        sessionExpires.isExtention = RV_FALSE;
		sessionExpires.exten = NULL;
		sessionExpires.isCompact = PCB.isCompactForm;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            sessionExpires.exten = PCB.pExtParams;
            sessionExpires.isExtention = RV_TRUE;
        }
        return sessionExpires;
    
}
#define ag_rp_361(PCB_POINTER, refType) (refType)
#define ag_rp_362(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAC)
#define ag_rp_363(PCB_POINTER) (RVSIP_SESSION_EXPIRES_REFRESHER_UAS)
static void ag_rp_364(PCB_DECL, ParserMinSEHeader sessionExpires) {
/* Line 5779, RV SIP Stack */
       RvStatus status;
       status = ParserInitMinSEHeader(PCB.pParserMgr,PCB.pointer,&sessionExpires,
                                      PCB.eHeaderType,PCB.pSipObject);
       if(RV_ERROR_ILLEGAL_SYNTAX == status)
       {
           PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
           SYNTAX_ERROR;
       }
       else if (RV_OK != status)
       {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
       }
       ParserCleanExtParams (PCB.pExtParams);
    
}
static ParserMinSEHeader ag_rp_365(PCB_DECL, ParserDeltaSeconds delta) {
/* Line 5799, RV SIP Stack */
 
        ParserMinSEHeader minSE;
		minSE.deltaSeconds = delta;
        minSE.isExtention = RV_FALSE;
		minSE.exten = NULL;
        if (0 != ((ParserExtensionString *)PCB.pExtParams)->size)
        {
            minSE.exten = PCB.pExtParams;
            minSE.isExtention = RV_TRUE;
        }
        return minSE;
    
}
static void ag_rp_366(PCB_DECL, ParserCallId callId) {
/* Line 5834, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, &(PCB.replacesParams), PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_367(PCB_DECL, ParserCallId callId) {
/* Line 5853, RV SIP Stack */
        RvStatus status;
        status = ParserInitReplaces(PCB.pParserMgr,PCB.pointer,&callId, NULL, PCB.eHeaderType, PCB.pSipObject);
        if(RV_ERROR_ILLEGAL_SYNTAX == status)
        {
            PCB.exit_flag = AG_SYNTAX_ERROR_CODE;
            SYNTAX_ERROR;
        }
        else if (RV_OK != status)
        {
            
            PCB.exit_flag = AG_REDUCTION_ERROR_CODE;
            PCB.eStat = status;
        }
        ParserCleanExtParams (PCB.pExtParams);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAMS, &PCB);
        ParserInitializePCBStructs(SIP_PARSE_PCBSTRUCT_REPLACES_PARAM, &PCB);
    
}
static void ag_rp_368(PCB_DECL) {
/* Line 5875, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_369(PCB_DECL) {
/* Line 5896, RV SIP Stack */
        switch(PCB.replacesParam.paramType)
        {
        case PARSER_REPLACES_PARAM_TYPE_TO_TAG:
            PCB.replacesParams.isToTag = RV_TRUE;
            PCB.replacesParams.toTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_FROM_TAG:
            PCB.replacesParams.isFromTag = RV_TRUE;
            PCB.replacesParams.fromTag = PCB.replacesParam.paramVal;
            break;
        case PARSER_REPLACES_PARAM_TYPE_OTHER:
            PCB.replacesParams.isOtherParams = RV_TRUE;
            PCB.replacesParams.otherParam = PCB.replacesParam.otherParam;
            break;
        case PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG:
            PCB.replacesParams.eEarlyFlagType = PCB.replacesParam.eEarlyFlagType;
            break;
        }
    
}
static void ag_rp_370(PCB_DECL, ParserTagParam toTag) {
/* Line 5919, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_TO_TAG; 
	  PCB.replacesParam.paramVal = toTag;
        
    
}
static void ag_rp_371(PCB_DECL, ParserTagParam fromTag) {
/* Line 5925, RV SIP Stack */
 
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_FROM_TAG; 
	  PCB.replacesParam.paramVal = fromTag;
    
}
static void ag_rp_372(PCB_DECL, ParserReplacesEarlyFlagParamType earlyFlag) {
/* Line 5931, RV SIP Stack */
      PCB.replacesParam.paramType = PARSER_REPLACES_PARAM_TYPE_EARLY_FLAG; 
      PCB.replacesParam.eEarlyFlagType = earlyFlag;
    
}
static void ag_rp_373(PCB_DECL) {
/* Line 5935, RV SIP Stack */
 
      PCB.replacesParam.paramType  = PARSER_REPLACES_PARAM_TYPE_OTHER; 
      PCB.replacesParam.isOther    = RV_TRUE;
	  PCB.replacesParam.otherParam = PCB.pExtParams;
    
}
#define ag_rp_374(PCB_POINTER, t) (t)
#define ag_rp_375(PCB_POINTER, t) (t)
#define ag_rp_376(PCB_POINTER) (ParserReplacesEarlyFlagParam1)
#define ag_rp_377(PCB_POINTER) (ParserReplacesEarlyFlagParamTrue)
#define ag_rp_378(PCB_POINTER) (ParserReplacesEarlyFlagParamEmpty)
#define READ_COUNTS 
#define WRITE_COUNTS 
#undef V
#define V(i,t) (*(t *) (&(PCB).vs[(PCB).ssx + i]))
#undef VS
#define VS(i) (PCB).vs[(PCB).ssx + i]
#ifndef GET_CONTEXT
#define GET_CONTEXT CONTEXT = (PCB).input_context
#endif
typedef enum {
  ag_action_1,
  ag_action_2,
  ag_action_3,
  ag_action_4,
  ag_action_5,
  ag_action_6,
  ag_action_7,
  ag_action_8,
  ag_action_9,
  ag_action_10,
  ag_action_11,
  ag_action_12
} ag_parser_action;
#ifndef NULL_VALUE_INITIALIZER
#define NULL_VALUE_INITIALIZER = { 0 }
#endif
static SipParser_vs_type const ag_null_value NULL_VALUE_INITIALIZER;
static const unsigned short ag_rpx[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  0,  0,
    5,  6,  7,  8,  9, 10, 11, 12, 13, 14,  0,  0, 15,  0,  0, 16,  0,  0,
   17,  0,  0,  0,  0,  0, 18,  0,  0,  0,  0,  0, 19,  0,  0, 20, 21, 22,
   23, 24, 25, 26, 27, 28,  0,  0, 29, 30, 31, 32, 33, 34, 35, 36, 37,  0,
   38, 39, 40, 41, 42, 43, 44,  0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
   55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,  0,
    0, 72, 73, 74, 75,  0,  0, 76, 77, 78,  0,  0,  0,  0,  0,  0, 79, 80,
    0, 81, 82,  0, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
   97, 98, 99,100,101,102,103,104,105,106,107,108,109,  0,110,111,112,113,
    0,  0,114,115,116,117,118,119,  0,120,121,122,123,124,125,126,127,128,
  129,  0,  0,130,131,132,133,  0,134,135,  0,  0,136,137,  0,  0,138,  0,
    0,139,140,141,142,  0,143,144,145,146,147,148,149,150,151,152,153,  0,
    0,  0,  0,154,155,156,157,  0,158,159,  0,160,161,162,163,164,165,166,
    0,  0,167,168,  0,  0,  0,  0,  0,  0,169,170,171,172,173,174,175,  0,
    0,176,177,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,178,179,180,181,182,183,184,185,186,187,188,189,
  190,191,192,193,194,195,196,197,198,199,200,201,202,203,  0,  0,  0,  0,
  204,205,206,207,208,209,  0,  0,  0,  0,  0,210,211,212,213,214,215,216,
    0,  0,217,  0,  0,  0,  0,  0,218,219,220,221,222,223,224,225,226,227,
  228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,
  246,247,  0,  0,  0,  0,  0,248,249,250,251,252,253,254,  0,255,  0,  0,
  256,257,258,259,260,261,  0,  0,262,263,264,265,266,  0,  0,267,268,  0,
    0,  0,  0,269,270,271,272,  0,273,274,275,276,277,278,279,280,281,282,
  283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,
  301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,  0,316,317,
  318,319,320,  0,  0,321,322,323,324,325,326,327,328,329,330,331,332,333,
  334,335,336,337,338,339,  0,  0,  0,340,341,342,343,344,345,346,347,348,
  349,350,351,352,353,354,355,356,357,  0,  0,358,359,360,361,  0,362,363,
  364,365,  0,366,367,368,369,370,371,372,373,374,375,376,377,378
};
static const unsigned char ag_key_itt[] = {
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0
};
static const unsigned short ag_key_pt[] = {
  0,  2,  0,  6,  0,  8,  0, 10,  0, 12,  0, 14,  0, 16,  0, 18,
  0, 20,  0, 22,  0, 24,  0, 26,  0, 28,  0, 30,  0, 32,  0, 34,
  0, 36,  0, 38,  0, 40,  0, 42,  0, 46,  0,103,  0,104,  0,105,
  0,106,  0,107,  0,108,  0,124,  0,125,  0,126,  0,127,  0,128,
  0,129,  0,130,  0,131,  0,132,  0,133,  0,134,  0,135,  0,136,
  0,137,  0,138,  0,139,  0,140,  0,141,  0,142,  0,167,  0,169,
  0,170,  0,171,  0,172,  0,186,  0,187,  0,189,  0,193,  0,195,
  0,196,  0,198,  0,199,  0,201,  0,291,  0,292,  0,295,  0,296,
  0,297,  0,298,  0,299,  0,300,  0,301,  0,304,  0,305,  0,325,
  0,326,  0,327,  0,328,  0,329,  0,330,  0,331,  0,332,  0,333,
  0,334,  0,335,  0,336,  0,337,  0,347,  0,352,  0,359,  0,365,
  0,367,  0,368,  0,370,  0,378,  0,379,  0,380,  0,381,  0,382,
  0,383,  0,384,  0,388,  0,389,  0,390,  0,391,  0,392,  0,393,
  0,394,  0,395,  0,396,  0,397,  0,398,  0,399,  0,404,  0,405,
  0,406,  0,414,  0,424,  0,425,  0,426,  0,427,  0,428,  0,430,
  0,431,  0,432,  0,438,  0,439,  0,440,  0,448,  0,449,  0,450,
0
};
static const unsigned char ag_key_ch[] = {
    0, 67, 87,255, 89,255, 65, 68, 73, 76, 79, 83, 84,255, 77, 78,255, 83,
  255, 84,255, 65, 69,255, 82,255, 65, 69, 72, 75, 80, 81,255, 47, 58, 83,
  255, 80,255, 69, 73, 80,255, 82,255, 73,255, 65, 66, 67, 68, 69, 70, 73,
   75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 88,255, 72, 85,255, 72, 82, 85,
  255, 75, 84,255, 69, 73,255, 80, 82,255, 68, 71,255, 67, 76, 80, 85,255,
   65, 79, 82, 89,255, 65, 79,255, 69, 85,255, 65, 88,255, 73, 79,255, 69,
   82,255, 83, 84,255, 77,255, 65, 73,255, 58, 65,255, 67, 77, 78, 80,255,
   76, 78,255, 65, 85,255, 68, 82, 89,255, 83, 84,255, 65, 69, 79, 85,255,
   67, 80, 82,255, 65, 69, 79,255, 72, 82,255, 67, 68, 70, 71, 78, 81,255,
   69, 80,255, 80, 83,255, 67, 78,255, 58, 83,255, 71, 80,255, 65, 67, 69,
   73, 85,255, 45, 75,255, 65, 67, 69, 72, 76, 79, 82, 84, 85,255, 67, 83,
  255, 65, 68, 83, 84,255, 69, 73,255, 42, 58, 65, 66, 67, 68, 69, 70, 71,
   72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,255, 58, 83,
  255, 80,255, 73,255, 73, 80, 83,255, 67, 76, 80, 85,255, 58, 65,255, 67,
   77, 78,255, 69, 79, 85,255, 65, 69,255, 82,255, 71, 78,255, 69,255, 58,
   83,255, 71, 80,255, 65, 69, 73, 85,255, 69, 72, 85,255, 42, 65, 66, 67,
   70, 73, 77, 80, 82, 83, 84, 86, 87,255, 65, 85,255, 72, 85,255, 70, 77,
   83, 84, 87,255, 80, 85,255, 69, 85,255, 65, 73, 77, 84, 86,255, 69, 73,
  255, 65, 73, 82, 83,255, 65, 66, 67, 73, 80, 82,255, 83,255, 58, 83,255,
   80,255, 73,255, 42, 73, 80, 83,255, 58,255, 65, 69,255, 79, 82, 84,255,
   67, 76, 77, 79, 84, 85,255, 83,255, 51, 65, 68, 73, 77, 80, 81, 82, 83,
  255, 65, 69, 81,255, 80, 85,255, 76, 78,255, 65, 85,255, 82, 89,255, 65,
  255, 65, 68, 70, 74, 77, 78, 79, 83,255, 84,255, 69, 70, 84,255, 82,255,
   72,255, 49, 79, 84,255, 68,255, 83,255, 73, 80,255, 67, 76,255, 83, 84,
   85,255, 65, 79,255, 66, 86,255, 69, 80,255, 65, 66, 67, 72, 77, 82, 84,
  255, 49, 84,255, 80, 82,255, 67, 83,255, 65,255, 85,255, 79, 82,255, 83,
   84,255, 77,255, 71, 85,255
};
static const unsigned char ag_key_act[] = {
  0,7,5,4,7,4,7,5,5,5,5,5,5,4,3,7,4,5,4,5,4,7,3,4,6,4,5,7,5,5,5,5,4,3,0,
  3,4,2,4,5,2,5,4,5,4,5,4,2,6,6,7,7,5,6,5,5,6,6,2,6,2,5,6,6,5,4,3,3,4,3,
  3,3,4,5,7,4,7,7,4,7,5,4,7,5,4,2,2,2,2,4,7,7,7,7,4,7,7,4,7,7,4,7,7,4,5,
  7,4,7,2,4,7,5,4,2,4,7,7,4,0,7,4,7,2,7,5,4,5,5,4,7,2,4,7,5,5,4,7,7,4,2,
  2,7,7,4,7,7,7,4,7,3,7,4,7,2,4,7,7,7,7,7,7,4,2,7,4,5,7,4,7,7,4,0,3,4,2,
  6,4,7,7,2,2,7,4,7,7,4,7,7,7,7,7,2,7,7,7,4,5,5,4,2,7,7,7,4,7,7,4,5,3,2,
  2,2,2,2,2,2,2,2,2,7,2,7,2,2,5,2,2,2,2,2,7,4,0,3,4,2,4,2,4,3,3,2,4,7,7,
  7,7,4,0,7,4,7,2,7,4,7,7,7,4,7,3,4,2,4,7,7,4,2,4,0,3,4,7,6,4,7,7,2,7,4,
  7,7,7,4,5,2,7,7,7,2,2,2,2,2,2,7,7,4,7,7,4,7,7,4,7,7,2,2,7,4,7,7,4,7,7,
  4,2,7,2,7,7,4,7,7,4,7,7,7,2,4,7,7,7,7,7,7,4,7,4,0,3,4,2,4,2,4,5,3,3,2,
  4,3,4,7,7,4,7,7,7,4,7,7,2,7,2,7,4,3,4,7,7,7,7,7,7,7,7,7,4,7,7,5,4,7,7,
  4,5,5,4,7,2,4,5,5,4,2,4,2,7,7,2,2,7,7,7,4,7,4,7,7,7,4,7,4,7,4,5,7,7,4,
  7,4,7,4,7,7,4,7,7,4,7,2,7,4,7,7,4,2,7,4,7,7,4,7,7,7,7,7,2,7,4,5,7,4,7,
  7,4,5,5,4,2,4,2,4,7,7,4,7,5,4,2,4,2,7,4
};
static const unsigned short ag_key_parm[] = {
    0, 44, 18,  0, 46,  0, 48, 28, 10, 12,  8,  0, 30,  0,235, 42,  0, 36,
    0, 26,  0, 52,233,  0,  2,  0, 32, 50, 16, 20, 38, 22,  0,151,228,229,
    0,  0,  0, 34,  0, 24,  0, 40,  0, 14,  0,  0,156,146,  6,  4,152,144,
  158,166,142,162,  0,154,  0,150,164,148,160,  0,260,248,  0,260,232,248,
    0, 44,174,  0,234,104,  0, 62,202,  0, 58,210,  0,  0,  0,  0,  0,  0,
   90, 86,114, 46,  0, 48,116,  0,218,226,  0,254,180,  0,192,252,  0,198,
    0,  0,224,220,  0,  0,  0,238,102,  0,235, 56,  0,232,  0, 42,126,  0,
  208,206,  0,196,  0,  0,110,200,204,  0, 66,128,  0,  0,  0,184, 64,  0,
  214,240,140,  0, 52,233,176,  0,124,  0,  0,112,178,244, 50,228,242,  0,
    0,108,  0,212,230,  0,118,236,  0,228,229,  0,  0, 92,  0,194, 98,  0,
    0,182,  0,250,138,  0,168, 96, 54,190,100,  0,120,106,186,  0,246,248,
    0,  0, 94,122,222,  0, 88, 60,  0,170,272,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,130,  0,216,  0,  0,172,  0,  0,  0,  0,  0,188,  0,228,229,
    0,  0,  0,  0,  0,235,233,  0,  0, 44,234, 62, 58,  0,235, 56,  0,232,
    0, 42,  0, 66,184, 64,  0, 52,233,  0,  0,  0, 50,228,  0,  0,  0,228,
  229,  0,236, 92,  0,194,230,  0,182,  0, 54,190,186,  0,170,  0, 46, 48,
  192,  0,  0,  0,  0,  0,  0, 60,188,  0,194,182,  0,190,186,  0,192,184,
    0,  0,188,  0, 62, 58,  0, 66, 64,  0,  0, 56,  0, 54, 60,  0,230,236,
    0,234,232,228,  0,  0, 44, 46, 48, 42, 52, 50,  0, 92,  0,228,229,  0,
    0,  0,  0,  0,170,235,233,  0,  0,272,  0,110,128,  0,138,120,106,  0,
  116,130,  0,140,  0,122,  0,151,  0, 84, 78, 80, 72, 76, 68, 74, 82, 70,
    0,174,180,172,  0,202,210,  0,208,206,  0,196,  0,  0,200,204,  0,  0,
    0,  0,218,198,  0,  0,216,214,212,  0,168,  0,254,252,250,  0,244,  0,
  238,  0,132,136,134,  0,226,  0,118,  0,126,124,  0, 96,100,  0, 98,  0,
   94,  0, 90, 86,  0,  0, 88,  0,112,108,  0,104,114,116,102,110,  0,106,
    0,132,134,  0,176,178,  0,246,248,  0,  0,  0,  0,  0,240,242,  0,224,
  220,  0,  0,  0,  0,222,  0
};
static const unsigned short ag_key_jmp[] = {
    0,  0,  0,  0,  2,  0,  4,  0,  0,  0,  0,  0,  0,  0, 13, 15,  0,  0,
    0,  0,  0, 20, 23,  0, 21,  0,  0, 26,  0,  0,  0,  0,  0, 33,  0, 37,
    0, 33,  0,  0, 37,  0,  0,  0,  0,  0,  0,  1,  4,  6,  9, 11,  0, 14,
    0,  0, 17, 19, 24, 26, 39,  0, 43, 45,  0,  0, 39, 44,  0, 53, 58, 65,
    0,  0, 76,  0, 80, 83,  0, 86,  0,  0, 95,  0,  0, 73, 76, 79, 82,  0,
   98,101,108,113,  0,115,120,  0,123,125,  0,132,141,  0,  0,149,  0,147,
  104,  0,155,  0,  0,110,  0,157,164,  0,  0,172,  0,169,118,175,  0,  0,
    0,  0,  0,180,126,  0,184,  0,  0,  0,187,192,  0,132,136,196,198,  0,
  209,211,218,  0,225,228,231,  0,221,148,  0,234,240,246,253,259,263,  0,
  155,269,  0,  0,278,  0,283,287,  0,  0,290,  0,168,171,  0,273,275,165,
  174,292,  0,305,309,  0,294,296,298,301,303,183,319,327,329,  0,  0,  0,
    0,196,331,333,336,  0,338,344,  0,  0, 74, 85, 90, 95, 98,101,107,113,
  115,121,129,182,139,206,144,152,  0,162,177,186,199,204,348,  0,  0,359,
    0,232,  0,235,  0,351,354,237,  0,361,363,367,377,  0,  0,396,  0,393,
  248,399,  0,404,410,412,  0,420,423,  0,259,  0,426,432,  0,264,  0,  0,
  448,  0,444,269,  0,436,438,272,450,  0,452,455,457,  0,  0,243,381,384,
  390,251,255,262,267,275,280,459,464,  0,473,475,  0,477,479,  0,467,470,
  298,301,481,  0,484,494,  0,503,509,  0,310,498,313,517,521,  0,541,547,
    0,526,531,535,322,  0,552,555,558,564,570,575,  0,583,  0,  0,594,  0,
  339,  0,342,  0,  0,586,589,344,  0,596,  0,604,608,  0,617,628,636,  0,
  598,602,353,613,356,638,  0,642,  0,649,661,672,678,682,687,692,696,702,
    0,705,711,  0,  0,718,720,  0,  0,  0,  0,728,386,  0,  0,  0,  0,392,
    0,383,722,725,389,395,730,733,736,  0,739,  0,742,752,760,  0,766,  0,
  775,  0,  0,783,785,  0,789,  0,797,  0,804,806,  0,815,817,  0,811,427,
  819,  0,822,825,  0,434,832,  0,865,872,  0,839,844,850,854,860,440,876,
    0,  0,879,  0,883,888,  0,  0,  0,  0,457,  0,460,  0,896,904,  0,912,
    0,  0,467,  0,470,914,  0
};
static const unsigned short ag_key_index[] = {
   47,  0, 66, 69, 69,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,207,  0,239,239,  0,284,  0,  0,  0,  0,304,316,325,  0,
    0,  0,  0,330,  0,337,  0,  0,346,304,304,239,  0,  0,351,  0,  0,  0,
    0,  0,360,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,239,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 69, 69, 66,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,351,351,  0,
  351,  0,  0,  0,  0,  0,360,360,  0,  0,  0,  0,367,  0,  0,  0,  0,  0,
    0,  0,  0,  0,369,  0,  0,  0,330,  0,  0,  0,  0,  0,239,239,  0,  0,
    0,  0,337,  0,  0,  0,  0,  0,  0,  0,  0,  0,379,  0,  0,239,397,  0,
  406,  0,  0,330,351,  0,351,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,360,  0,  0,  0,  0,  0,  0,  0,408,  0,  0,  0,  0,412,  0,
    0,  0,  0,  0,  0,  0,414,  0,  0,  0,  0,330,  0,239,  0,  0,  0,  0,
    0,337,  0,  0,  0,  0,  0,  0,  0,  0,379,379,  0,239,  0,  0,  0,406,
  406,  0,351,  0,  0,  0,  0,  0,  0,  0,416,  0,  0,  0,  0,  0,  0,  0,
    0,408,408,  0,  0,  0,412,412,  0,  0,  0,420,  0,  0,  0,414,414,  0,
    0,330,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,379,  0,  0,
    0,  0,406,  0,  0,  0,  0,422,330,  0,  0,424,430,  0,  0,  0,  0,  0,
    0,  0,408,  0,  0,  0,412,  0,  0,420,420,437,  0,  0,414,  0,  0,  0,
  443,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,422,330,  0,  0,424,430,  0,
  451,  0,  0,  0,  0,  0,  0,  0,420,437,437,  0,  0,  0,443,  0,  0,454,
    0,  0,  0,  0,  0,  0,  0,  0,  0,462,  0,  0,  0,  0,  0,  0,  0,  0,
  437,464,430,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,454,  0,  0,
    0,  0,  0,  0,  0,  0,  0,462,  0,  0,  0,  0,  0,  0,  0,  0,464,430,
    0,  0,  0,  0,  0,  0,  0,  0,  0,304,  0,  0,472,  0,  0,  0,  0,  0,
    0,  0,  0,  0,422,  0,  0,351,304,  0,  0,  0,  0,  0,  0,  0,422,  0,
  351,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};
static const unsigned char ag_key_ends[] = {
75,0, 69,0, 78,67,69,76,0, 84,0, 88,0, 58,0, 86,73,84,69,0, 
67,75,0, 83,58,0, 71,73,83,84,69,82,0, 50,46,48,0, 58,0, 
79,83,84,58,0, 83,69,82,73,78,70,79,58,0, 79,83,84,58,0, 
86,45,65,66,83,58,0, 83,69,82,73,78,70,79,58,0, 58,0, 73,79,78,0, 
82,84,0, 65,83,0, 76,73,67,65,84,73,79,78,0, 73,79,0, 83,69,0, 
85,78,68,65,82,89,0, 65,78,67,72,0, 69,0, 78,67,69,76,0, 77,80,0, 
67,0, 82,65,84,73,79,78,0, 82,76,89,45,79,78,76,89,0, 
80,73,82,69,83,0, 66,0, 77,45,84,65,71,0, 84,0, 
78,68,76,73,78,71,0, 68,68,69,78,0, 79,78,0, 71,69,0, 
86,73,84,69,0, 78,0, 82,0, 68,82,0, 83,65,71,69,0, 72,79,68,0, 
78,0, 76,84,73,80,65,82,84,0, 79,86,0, 84,0, 84,73,79,78,65,76,0, 
73,71,0, 79,78,69,0, 67,75,0, 83,58,0, 88,89,0, 
69,73,86,69,68,0, 73,82,69,67,84,0, 82,69,83,72,69,82,0, 
73,83,84,69,82,0, 68,69,82,0, 85,73,82,69,68,0, 79,82,84,0, 84,0, 
84,80,0, 83,73,79,78,0, 79,77,80,0, 65,76,0, 58,0, 78,0, 71,0, 
80,0, 88,84,0, 85,0, 83,0, 84,65,71,0, 
69,78,73,90,69,68,45,66,89,0, 65,78,83,80,79,82,84,0, 76,0, 69,0, 
80,0, 69,82,0, 67,0, 82,83,73,79,78,0, 68,69,79,0, 69,68,0, 
77,58,0, 82,69,83,58,0, 58,0, 75,0, 69,82,84,0, 
80,76,73,67,65,84,73,79,78,0, 68,73,79,0, 89,69,0, 
65,78,67,69,76,0, 82,73,0, 79,78,0, 71,69,0, 86,73,84,69,0, 
83,83,65,71,69,0, 78,0, 76,84,73,80,65,82,84,0, 67,75,0, 83,58,0, 
73,83,84,69,82,0, 68,69,82,0, 84,0, 83,83,73,79,78,0, 78,65,76,0, 
58,0, 78,0, 88,84,0, 85,0, 69,0, 73,68,69,79,0, 69,68,0, 
82,73,0, 79,78,0, 84,0, 78,0, 85,0, 69,0, 69,68,0, 
80,76,73,67,65,84,73,79,78,0, 68,73,79,0, 77,65,71,69,0, 
83,83,65,71,69,0, 76,84,73,80,65,82,84,0, 69,88,84,0, 
73,68,69,79,0, 76,69,82,84,0, 67,79,78,0, 69,78,68,69,82,0, 
83,83,73,79,78,0, 71,78,65,76,0, 67,75,0, 89,69,0, 
65,78,67,69,76,0, 78,86,73,84,69,0, 82,65,67,75,0, 
69,71,73,83,84,69,82,0, 73,80,0, 77,58,0, 82,69,83,58,0, 58,0, 
58,0, 79,77,80,0, 82,0, 68,68,82,0, 84,72,79,68,0, 82,73,71,0, 
75,69,78,73,90,69,68,45,66,89,0, 65,78,83,80,79,82,84,0, 76,0, 
83,69,82,0, 73,80,47,50,46,48,0, 
71,80,80,45,73,77,83,43,88,77,76,0, 76,84,69,82,78,65,84,73,86,69,0, 
73,71,69,83,84,0, 83,85,80,0, 73,88,69,68,0, 76,65,73,78,0, 
83,73,71,0, 70,67,56,50,50,0, 68,80,0, 67,84,73,79,78,0, 
88,80,73,82,69,83,0, 82,0, 71,0, 69,67,0, 69,66,0, 78,0, 
79,86,0, 67,84,0, 69,80,0, 65,71,0, 65,82,76,89,45,79,78,76,89,0, 
82,79,77,45,84,65,71,0, 79,45,84,65,71,0, 
69,70,82,69,83,72,69,82,0, 65,78,68,76,73,78,71,0, 78,0, 
82,85,69,0, 85,82,65,84,73,79,78,0, 73,71,67,79,77,80,0, 80,0, 
72,79,78,69,0, 67,84,80,0, 80,0, 83,0, 68,80,0, 83,69,0, 
85,78,68,65,82,89,0, 69,82,83,73,79,78,0, 76,73,65,83,0, 
82,65,78,67,72,0, 79,77,80,0, 73,68,68,69,78,0, 65,68,68,82,0, 
67,69,73,86,69,68,0, 79,82,84,0, 84,76,0, 82,85,69,0, 
82,79,88,89,0, 69,68,73,82,69,67,84,0, 80,84,73,79,78,65,76,0, 
69,81,85,73,82,69,68,0, 84,0, 84,67,0, 
};
#define AG_TCV(x) ag_tcv[(x)]
static const unsigned short ag_tcv[] = {
    5,465,465,465,465,465,465,465,465,451,466,465,465,466,465,465,465,465,
  465,465,465,465,465,465,465,465,465,465,465,465,465,465, 56,452, 78,462,
  463,452,314,452, 74,208,452,453, 58,454,269, 72,361,364,455,455,455,455,
  455,455,455,455, 52, 68, 76, 63,341, 70, 65,456,456,456,456,456,456,457,
  457,457,457,457,457,457,457,457,457,457,457,457,457,457,457,457,457,457,
  457,265,100,266,464,458,459,456,456,456,456,456,456,457,457,457,457,457,
  457,457,457,457,457,457,457,457,457,457,457,457,457,457,457,460,464,460,
  452,465,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,
  464,461,461,464,464,464,464,464,461,464,464,464,464,464,464,464,464,464,
  464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,
  464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,
  464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,
  464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,
  464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,
  464,464,464,464
};
#ifndef SYNTAX_ERROR
#define SYNTAX_ERROR fprintf(stderr,"%s, line %d, column %d\n", \
  (PCB).error_message, (PCB).line, (PCB).column)
#endif
#ifndef FIRST_LINE
#define FIRST_LINE 1
#endif
#ifndef FIRST_COLUMN
#define FIRST_COLUMN 1
#endif
#ifndef PARSER_STACK_OVERFLOW
#define PARSER_STACK_OVERFLOW {fprintf(stderr, \
   "\nParser stack overflow, line %d, column %d\n",\
   (PCB).line, (PCB).column);}
#endif
#ifndef REDUCTION_TOKEN_ERROR
#define REDUCTION_TOKEN_ERROR {fprintf(stderr, \
    "\nReduction token error, line %d, column %d\n", \
    (PCB).line, (PCB).column);}
#endif
#ifndef INPUT_CODE
#define INPUT_CODE(T) (T)
#endif
typedef enum
  {ag_accept_key, ag_set_key, ag_jmp_key, ag_end_key, ag_no_match_key,
   ag_cf_accept_key, ag_cf_set_key, ag_cf_end_key} key_words;
static void ag_get_key_word(PCB_DECL, int ag_k) {
  int ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
  const  unsigned char *ag_p;
  int ag_ch;
  while (1) {
    switch (ag_key_act[ag_k]) {
    case ag_cf_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          int ag_k1 = ag_key_parm[ag_k];
          int ag_k2 = ag_key_pt[ag_k1];
          if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) goto ag_fail;
          (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1 + 1];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
      goto ag_fail;
    }
    case ag_end_key: {
      const  unsigned char *sp = ag_key_ends + ag_key_jmp[ag_k];
      do {
        if ((ag_ch = *sp++) == 0) {
          (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
          return;
        }
      } while (CONVERT_CASE(*(PCB).la_ptr++) == ag_ch);
    }
    case ag_no_match_key:
ag_fail:
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    case ag_cf_set_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      ag_k = ag_key_jmp[ag_k];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)]) break;
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      break;
    }
    case ag_set_key:
      ag_save = (int) ((PCB).la_ptr - (PCB).pointer);
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
    case ag_jmp_key:
      ag_k = ag_key_jmp[ag_k];
      break;
    case ag_accept_key:
      (PCB).token_number = (SipParser_token_type) ag_key_parm[ag_k];
      return;
    case ag_cf_accept_key: {
      int ag_k1 = ag_key_parm[ag_k];
      int ag_k2 = ag_key_pt[ag_k1];
      if (ag_key_itt[ag_k2 + CONVERT_CASE(*(PCB).la_ptr)])
        (PCB).la_ptr = (PCB).pointer + ag_save;
      else (PCB).token_number = (SipParser_token_type) ag_key_pt[ag_k1+1];
      return;
    }
    }
    ag_ch = CONVERT_CASE(*(PCB).la_ptr++);
    ag_p = &ag_key_ch[ag_k];
    while (*ag_p < ag_ch) ag_p++;
    if (*ag_p != ag_ch) {
      (PCB).la_ptr = (PCB).pointer + ag_save;
      return;
    }
    ag_k = (int) (ag_p - ag_key_ch);
  }
}
#ifndef AG_NEWLINE
#define AG_NEWLINE 10
#endif
#ifndef AG_RETURN
#define AG_RETURN 13
#endif
#ifndef AG_FORMFEED
#define AG_FORMFEED 12
#endif
#ifndef AG_TABCHAR
#define AG_TABCHAR 9
#endif
static void ag_track(PCB_DECL) {
  int ag_k = (int) ((PCB).la_ptr - (PCB).pointer);
  while (ag_k--) {
    switch (*(PCB).pointer++) {
    case AG_NEWLINE:
      (PCB).column = 1, (PCB).line++;
    case AG_RETURN:
    case AG_FORMFEED:
      break;
    case AG_TABCHAR:
      (PCB).column += (TAB_SPACING) - ((PCB).column - 1) % (TAB_SPACING);
      break;
    default:
      (PCB).column++;
    }
  }
}
static const int ag_rtt[] = {
  204,206,  0,204,206,  0,204,206,  0
};
static const unsigned short ag_tstt[] = {
459,458,457,456,455,454,453,452,364,361,337,336,335,334,333,332,331,330,329,
  328,327,326,325,269,235,233,229,228,151,108,107,106,105,104,103,46,42,
  40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,2,0,1,44,45,48,49,
  50,51,79,81,102,147,223,224,225,226,230,234,323,324,
459,458,457,456,455,454,453,452,364,361,269,0,
260,248,0,227,236,239,245,259,
260,248,232,0,227,231,236,239,245,259,
260,248,232,0,227,231,236,239,245,259,
451,56,52,0,53,54,55,61,
56,0,55,148,
5,0,
5,0,
5,0,
5,0,
52,0,3,
5,0,
5,0,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
52,0,3,
457,456,455,364,361,265,0,174,185,247,261,
463,462,458,457,456,455,454,453,452,364,361,314,269,208,74,72,70,68,65,63,
  58,0,64,246,249,251,253,
451,341,70,68,56,5,0,67,237,279,
451,341,70,68,56,5,0,67,237,279,
457,456,455,454,453,364,361,269,0,211,212,215,
457,456,455,454,453,364,361,269,0,211,212,215,
451,56,0,
52,0,66,
457,456,455,454,453,451,364,361,269,235,233,229,228,56,52,0,
457,456,455,454,453,364,361,269,235,233,229,228,0,209,210,211,212,215,223,
  224,225,226,230,234,
455,364,361,56,0,55,149,152,
464,463,462,461,460,459,458,457,456,455,454,453,452,451,428,427,426,425,424,
  384,383,382,381,380,379,378,364,361,352,341,314,269,266,265,235,233,229,
  228,208,167,130,129,128,127,126,125,124,108,107,106,105,104,103,100,78,
  76,74,72,70,56,52,5,0,53,54,61,
457,456,455,454,453,364,361,269,0,47,211,212,215,
461,460,459,458,457,456,455,454,453,452,364,361,341,269,266,265,208,100,78,
  76,74,72,70,52,0,43,82,84,114,442,
455,364,361,0,41,112,372,441,
455,364,361,0,39,112,372,433,
455,384,383,382,381,380,379,378,364,361,0,37,112,372,373,377,409,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,130,129,128,
  127,126,125,124,0,35,85,87,115,116,
459,458,457,456,455,454,453,452,428,427,426,425,424,364,361,269,0,33,79,81,
  421,422,
459,458,457,456,455,454,453,452,364,361,269,0,31,79,81,418,419,
459,458,457,456,455,454,453,452,364,361,269,5,0,29,79,81,418,419,420,
455,364,361,0,27,112,415,416,
455,364,361,0,25,112,416,417,
459,458,457,456,455,454,453,452,364,361,269,108,107,106,105,104,103,0,23,79,
  81,102,157,
459,458,457,456,455,454,453,452,364,361,269,78,76,0,21,75,94,217,339,342,
  407,408,
459,458,457,456,455,454,453,452,364,361,269,167,0,19,79,81,158,159,160,164,
455,364,361,0,17,112,113,
461,460,459,458,457,456,455,454,453,452,364,361,341,269,266,265,208,100,78,
  76,74,72,70,52,0,15,82,84,114,
459,458,457,456,455,454,453,452,364,361,352,269,235,233,229,228,78,76,0,13,
  75,94,216,217,226,230,234,240,241,242,243,244,339,342,349,350,351,353,
455,384,383,382,381,380,379,378,364,361,0,11,373,374,375,377,385,
455,384,383,382,381,380,379,378,364,361,0,9,112,369,372,373,377,
459,458,457,456,455,454,453,452,364,361,269,235,233,229,228,78,76,0,7,75,94,
  216,217,226,230,234,240,241,242,243,244,338,339,342,
455,364,361,0,4,109,110,112,
458,457,456,455,454,364,361,269,0,264,
456,455,364,361,272,0,202,270,271,274,
52,0,66,
457,456,455,364,361,265,0,174,185,247,261,
463,462,458,457,456,455,454,453,452,364,361,314,269,208,74,72,70,68,63,58,0,
52,0,66,
65,0,64,
463,458,457,456,455,454,453,452,451,364,361,314,305,304,298,297,292,291,269,
  266,265,208,199,195,189,74,72,56,52,0,53,54,61,
68,0,67,
451,341,70,56,5,0,69,238,312,
451,341,70,56,5,0,69,238,312,
457,456,455,454,453,364,361,269,0,
52,0,66,
465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,314,
  269,266,265,208,100,78,76,74,72,70,68,65,63,58,56,52,5,0,53,54,61,
56,0,55,148,
455,364,361,0,
56,0,55,
5,0,
461,460,459,458,457,456,455,454,453,452,364,361,341,269,266,265,208,100,78,
  76,74,72,70,52,0,
65,0,64,
451,68,56,5,0,53,54,61,
5,0,
455,364,361,0,
451,68,56,5,0,53,54,61,
5,0,
451,68,56,5,0,53,54,61,
5,0,
451,58,56,0,53,54,61,
451,74,68,56,5,0,53,54,61,
451,74,68,56,5,0,53,54,61,
5,0,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,0,
72,0,71,
5,0,
451,68,56,5,0,53,54,61,
5,0,
451,58,56,5,0,53,54,61,
58,0,59,
5,0,
58,0,59,
5,0,
455,364,361,0,
451,56,5,0,53,54,61,
5,0,
451,56,0,53,61,
451,56,5,0,53,54,61,
5,0,
451,58,56,5,0,53,54,61,
58,0,59,
5,0,
459,458,457,456,455,454,453,452,451,364,361,269,76,56,52,0,343,344,345,
465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,314,
  269,266,265,208,100,78,76,74,72,70,68,65,63,58,56,52,5,0,95,96,97,98,
459,458,457,456,455,454,453,452,364,361,269,0,
451,76,56,52,0,53,54,61,
457,456,455,454,453,451,364,361,269,235,233,229,228,56,0,53,54,61,
76,0,75,
451,68,58,56,5,0,53,54,61,
58,0,59,
5,0,
451,72,56,0,53,54,61,
451,56,0,53,61,
58,0,59,
5,0,
455,364,361,0,
451,56,5,0,53,54,61,
5,0,
451,56,5,0,53,54,61,
5,0,
52,0,66,
260,248,232,0,231,236,239,245,259,
260,248,232,0,231,236,239,245,259,
260,248,0,236,239,245,259,
76,0,75,
68,0,67,354,
451,68,58,56,5,0,53,54,61,
58,0,59,
5,0,
455,364,361,0,
451,56,0,53,61,
451,56,0,53,61,
451,56,5,0,53,54,61,
5,0,
451,56,5,0,53,54,61,
5,0,
68,0,67,340,
451,68,56,5,0,53,54,61,
5,0,
455,364,361,0,
451,56,0,53,61,
451,56,5,0,53,54,61,
5,0,
458,457,456,455,454,364,361,269,0,
456,455,364,361,0,
451,272,269,266,68,58,56,52,5,0,275,276,277,
456,455,451,364,361,269,266,68,58,56,5,0,271,273,274,
272,0,
269,0,
266,0,
455,364,361,0,112,173,
463,458,457,456,455,454,453,452,364,361,314,269,208,74,65,63,58,0,250,254,
  256,257,258,
457,456,455,364,361,265,0,174,185,247,261,
463,458,457,456,455,454,453,452,364,361,314,305,304,298,297,292,291,269,266,
  265,208,199,195,189,74,72,52,0,280,281,282,283,284,285,286,287,288,289,
  290,306,
463,458,457,456,455,454,453,452,451,364,361,314,305,304,298,297,292,291,269,
  266,265,208,199,195,189,74,72,56,52,0,53,54,61,
463,458,457,456,455,454,453,452,364,361,269,266,265,208,74,72,70,52,0,313,
  315,318,
314,0,
463,462,458,457,456,455,454,453,452,451,364,361,314,269,266,265,208,74,72,
  70,68,65,63,58,56,52,0,53,54,61,
465,464,463,462,461,460,459,458,457,456,455,454,453,452,364,361,341,314,269,
  266,265,208,100,78,76,74,72,70,68,65,63,58,52,0,88,
151,56,0,55,147,
455,364,361,0,
464,463,462,461,460,459,458,457,456,455,454,453,452,364,361,341,314,269,266,
  265,208,100,78,76,74,72,70,68,65,63,58,56,52,5,0,150,154,155,156,
461,460,459,458,457,456,455,454,453,452,364,361,341,269,266,265,208,100,78,
  76,74,72,70,52,0,82,84,
68,0,67,443,
68,5,0,67,144,435,
68,0,67,144,434,
58,0,57,
74,68,5,0,73,203,410,411,
74,68,5,0,73,203,410,411,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,139,138,137,
  136,135,134,133,132,131,0,85,87,117,
68,0,67,423,429,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
455,364,361,0,110,112,
459,458,457,456,455,454,453,452,451,364,361,269,108,107,106,105,104,103,56,
  0,53,54,61,
451,56,0,343,
465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,314,
  269,266,265,208,100,78,76,74,72,70,68,65,63,58,56,52,5,0,
465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,314,
  269,266,265,208,100,76,74,72,70,68,65,63,58,56,52,5,0,95,96,
78,0,
459,458,457,456,455,454,453,452,451,364,361,269,76,56,52,0,343,344,345,
457,456,455,454,453,364,361,269,235,233,229,228,0,210,211,212,215,223,224,
  225,226,230,234,
457,456,455,454,453,451,364,361,269,235,233,229,228,56,0,53,54,61,
68,0,67,144,
459,458,457,456,455,454,453,452,451,364,361,269,78,76,56,0,53,54,61,
72,0,71,
457,456,455,364,361,265,0,161,174,185,261,
459,458,457,456,455,454,453,452,451,364,361,269,167,56,0,53,54,61,
463,462,458,457,456,455,454,453,452,364,361,314,269,266,265,208,74,72,65,63,
  52,0,220,222,
459,458,457,456,455,454,453,452,364,361,269,78,0,94,216,217,244,342,
451,70,68,58,56,5,0,53,54,61,
451,70,68,58,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,364,361,269,78,0,94,216,217,244,342,
451,70,68,58,56,5,0,53,54,61,
451,70,68,58,56,5,0,53,54,61,
451,70,68,58,56,5,0,53,54,61,
451,70,68,58,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,451,370,365,364,361,359,269,56,0,53,54,61,
68,0,67,
68,0,67,354,
459,458,457,456,455,454,453,452,451,364,361,269,235,233,229,228,78,76,56,0,
  53,54,61,
399,398,397,396,395,394,393,392,391,390,389,388,0,386,
455,364,361,0,376,400,
459,458,457,456,455,454,453,452,451,364,361,347,269,56,0,53,54,61,
68,0,67,
68,0,67,340,
459,458,457,456,455,454,453,452,364,361,269,108,107,106,105,104,103,0,79,81,
  102,
456,455,364,361,0,
456,455,364,361,0,274,
52,0,275,
456,455,451,364,361,269,266,68,58,56,5,0,271,273,274,
455,364,361,0,267,268,
455,364,361,0,
463,458,457,456,455,454,453,452,364,361,314,269,208,74,63,58,0,256,
463,458,457,456,455,454,453,452,451,364,361,341,314,269,266,265,208,74,72,
  70,68,63,56,52,5,0,309,310,311,
63,0,62,307,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,341,269,70,68,63,56,5,0,62,302,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
463,458,457,456,455,454,453,452,364,361,314,305,304,298,297,292,291,269,266,
  265,208,199,195,189,74,72,52,0,280,281,282,283,284,285,286,287,288,289,
  290,306,
463,458,457,456,455,454,453,452,364,361,269,266,265,208,74,72,70,52,0,
63,0,
463,458,457,456,455,454,453,452,364,361,269,266,265,208,74,72,70,52,0,313,
  315,318,
463,462,458,457,456,455,454,453,452,364,361,314,269,266,265,208,74,72,70,68,
  65,63,58,52,0,213,219,
465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,314,
  269,266,265,208,100,78,76,74,72,70,68,65,63,58,56,52,5,0,91,92,93,
451,56,5,0,53,54,61,
464,463,462,461,460,459,458,457,456,455,454,453,452,364,361,341,314,269,266,
  265,208,100,78,76,74,72,70,68,65,63,58,56,52,0,154,
459,458,457,456,455,454,453,452,451,450,449,448,364,361,269,56,0,53,54,61,
68,0,67,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
68,0,67,
68,0,67,434,
459,458,457,456,455,454,453,452,451,438,364,361,269,56,0,53,54,61,
451,68,56,5,0,53,54,61,
455,451,364,361,56,0,53,54,61,
466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,
  314,269,266,265,208,100,78,76,74,72,70,68,65,63,58,56,52,0,204,205,
451,68,56,5,0,53,54,61,
68,0,67,412,
68,0,67,412,
451,68,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,451,430,364,361,269,56,0,53,54,61,
451,68,56,5,0,53,54,61,
68,0,67,429,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,418,
451,56,0,53,61,
459,458,457,456,455,454,453,452,364,361,269,108,107,106,105,104,103,0,79,81,
  102,
451,341,56,0,53,54,61,
457,456,455,454,453,364,361,269,235,233,229,228,0,210,211,212,215,223,224,
  225,226,230,234,
68,0,67,
459,458,457,456,455,454,453,452,364,361,269,78,76,0,75,94,217,339,342,408,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
451,68,58,56,52,5,0,53,54,61,
68,58,5,0,162,
459,458,457,456,455,454,453,452,364,361,269,167,0,79,81,159,160,164,
463,462,458,457,456,455,454,453,452,364,361,314,269,266,265,208,74,72,65,63,
  52,0,
451,68,58,56,5,0,53,54,61,
70,68,58,5,0,69,238,312,
70,68,58,5,0,69,238,312,
70,68,58,5,0,69,238,312,
70,68,58,5,0,69,238,312,
70,68,58,5,0,69,238,312,
70,68,58,5,0,69,238,312,
459,458,457,456,455,454,453,452,370,365,364,361,359,269,0,79,81,184,355,356,
  357,358,
459,458,457,456,455,454,453,452,451,370,365,364,361,359,269,56,0,53,54,61,
68,0,67,
459,458,457,456,455,454,453,452,364,361,269,235,233,229,228,78,76,0,75,94,
  216,217,226,230,234,240,241,242,243,244,339,342,353,
451,56,0,53,61,
455,364,361,0,
52,0,66,
459,458,457,456,455,454,453,452,364,361,347,269,0,79,81,184,346,348,
459,458,457,456,455,454,453,452,451,364,361,347,269,56,0,53,54,61,
68,0,67,
456,455,364,361,0,
455,364,361,0,
269,0,
463,458,457,456,455,454,453,452,364,361,314,269,266,265,208,74,72,52,0,309,
463,458,457,456,455,454,453,452,451,364,361,314,269,266,265,208,74,72,56,52,
  0,53,54,61,
63,0,62,
63,0,62,
459,458,457,456,455,454,453,452,451,364,361,341,269,70,68,56,5,0,79,81,303,
301,300,299,0,
63,0,62,
63,0,62,
63,0,62,
63,0,62,
63,0,62,
463,458,457,456,455,454,453,452,451,364,361,341,314,269,266,265,208,74,72,
  70,68,65,58,56,52,5,0,316,320,321,322,
463,462,458,457,456,455,454,453,452,364,361,314,269,266,265,208,74,72,70,68,
  65,63,58,52,0,
465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,314,
  269,266,265,208,100,78,76,74,72,70,68,65,63,58,56,52,0,91,
459,458,457,456,455,454,453,452,450,449,448,364,361,269,0,79,81,183,184,444,
  445,446,447,
459,458,457,456,455,454,453,452,451,450,449,448,364,361,269,56,0,53,54,61,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,145,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
451,68,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,451,438,364,361,269,56,0,53,54,61,
459,458,457,456,455,454,453,452,438,364,361,269,0,79,81,145,436,
68,5,0,67,144,435,
455,364,361,0,375,385,
466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,364,361,341,
  314,269,266,265,208,100,78,76,74,72,70,68,65,63,58,56,52,0,204,206,
459,458,457,456,455,454,453,452,451,414,364,361,269,56,0,53,54,61,
68,0,67,
68,0,67,
68,5,0,67,118,119,
459,458,457,456,455,454,453,452,430,364,361,269,0,79,81,145,
459,458,457,456,455,454,453,452,451,430,364,361,269,56,0,53,54,61,
451,68,56,5,0,53,54,61,
451,58,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,364,361,269,108,107,106,105,104,103,0,79,81,
  102,
451,58,56,5,0,53,54,61,
341,0,
451,341,56,0,53,54,61,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,165,
52,0,66,
68,0,67,
451,68,63,58,56,5,0,53,54,61,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,370,365,364,361,359,269,0,79,81,184,355,356,
  357,358,
455,364,361,0,387,
455,364,361,0,401,
451,63,56,0,53,54,61,
451,68,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,364,361,347,269,0,79,81,184,346,348,
455,364,361,0,
455,364,361,0,268,
463,458,457,456,455,454,453,452,364,361,314,269,266,265,208,74,72,52,0,306,
457,456,455,451,364,361,265,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,201,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,108,107,106,105,104,103,56,
  0,53,54,61,
457,456,455,451,364,361,265,56,0,53,54,61,
455,451,364,361,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,296,295,269,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,172,171,170,169,56,0,53,54,
  61,
463,458,457,456,455,454,453,452,364,361,269,266,265,208,74,72,70,65,52,0,
  320,
459,458,457,456,455,454,453,452,451,364,361,269,68,63,56,5,0,62,302,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,68,56,5,0,53,54,61,
451,68,56,5,0,53,54,61,
451,68,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,450,449,448,364,361,269,0,79,81,183,184,444,
  445,446,447,
451,68,63,58,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,145,
68,5,0,67,144,435,
459,458,457,456,455,454,453,452,438,364,361,269,0,79,81,145,436,
451,63,56,0,53,54,61,
451,56,0,53,61,
459,458,457,456,455,454,453,452,414,364,361,269,0,79,81,145,413,
459,458,457,456,455,454,453,452,451,414,364,361,269,56,0,53,54,61,
464,463,462,461,459,458,457,456,455,454,453,452,451,364,361,314,269,142,141,
  140,56,0,53,54,61,
68,0,67,
451,63,56,0,53,54,61,
459,458,457,456,455,454,453,452,430,364,361,269,0,79,81,145,
341,0,
451,72,56,0,53,54,61,
455,451,364,361,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,199,198,196,195,193,189,187,
  186,56,0,53,54,61,
63,0,62,
63,0,62,
63,0,62,
63,0,62,
455,364,361,0,
455,364,361,0,
52,0,66,
63,0,62,
269,0,
457,456,455,364,361,265,0,174,185,261,
459,458,457,456,455,454,453,452,364,361,269,201,0,79,81,200,
459,458,457,456,455,454,453,452,364,361,269,108,107,106,105,104,103,0,79,81,
  102,
457,456,455,364,361,265,0,174,185,261,
455,364,361,0,190,
459,458,457,456,455,454,453,452,364,361,296,295,269,0,79,81,293,294,
459,458,457,456,455,454,453,452,364,361,269,172,171,170,169,0,79,81,168,
459,458,457,456,455,454,453,452,451,364,361,269,68,56,5,0,79,81,303,
300,299,0,
63,0,62,
63,0,62,
63,0,62,146,
63,0,62,
455,364,361,0,376,400,
451,63,56,0,53,54,61,
451,68,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,414,364,361,269,0,79,81,145,413,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,142,141,140,
  0,85,87,120,121,122,123,
464,463,462,461,459,458,457,456,455,454,453,452,451,364,361,314,269,142,141,
  140,56,0,53,54,61,
63,0,62,
72,0,71,
455,364,361,0,112,173,
459,458,457,456,455,454,453,452,364,361,269,199,198,196,195,193,189,187,186,
  0,79,81,163,175,176,177,178,179,180,181,182,183,184,188,191,194,
459,458,457,456,455,454,453,452,451,364,361,269,265,78,56,0,53,54,61,
455,451,364,361,78,56,0,53,54,61,
451,368,367,56,0,53,54,61,
451,364,361,56,0,53,54,61,
455,364,361,0,
455,364,361,0,402,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
455,364,361,0,268,
455,364,361,0,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,78,56,0,53,54,61,
451,440,439,56,0,53,54,61,
63,0,62,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,68,56,5,0,53,54,61,
451,63,56,0,53,54,61,
451,68,56,5,0,53,54,61,
451,63,56,0,53,54,61,
451,68,56,5,0,53,54,61,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,142,141,140,
  0,85,87,120,121,122,123,
459,458,457,456,455,454,453,452,451,432,431,364,361,269,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,172,171,170,169,56,0,53,54,
  61,
451,68,58,56,5,0,53,54,61,
451,68,63,58,56,5,0,53,54,61,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
68,63,58,5,0,62,192,
451,63,56,0,53,54,61,
451,63,56,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,364,361,269,265,78,0,79,81,94,185,
455,364,361,78,0,77,112,371,372,
368,367,0,366,
364,361,0,360,
455,364,361,0,
455,364,361,0,
451,56,0,53,61,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,
455,364,361,0,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,
459,458,457,456,455,454,453,452,364,361,269,78,0,79,81,94,
440,439,0,437,
455,451,364,361,56,0,53,54,61,
63,0,62,143,
63,0,62,
63,0,62,
63,0,62,
451,68,56,5,0,53,54,61,
451,68,56,5,0,53,54,61,
451,68,56,5,0,53,54,61,
459,458,457,456,455,454,453,452,432,431,364,361,269,0,79,81,
459,458,457,456,455,454,453,452,364,361,269,172,171,170,169,0,79,81,166,168,
63,0,62,
63,0,62,
63,0,62,
455,451,364,361,56,0,53,54,61,
63,0,62,
63,0,62,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,384,383,382,381,380,379,378,56,0,53,54,61,
451,269,68,58,56,5,0,363,
451,269,68,58,56,5,0,363,
406,405,404,0,403,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
455,364,361,0,112,372,
464,463,462,461,459,458,457,456,455,454,453,452,451,364,361,314,269,78,56,0,
  53,54,61,
464,463,462,461,459,458,457,456,455,454,453,452,451,364,361,314,269,78,56,0,
  53,54,61,
464,463,462,461,459,458,457,456,455,454,453,452,451,364,361,314,269,78,56,0,
  53,54,61,
464,463,462,461,459,458,457,456,455,454,453,452,451,364,361,314,269,78,56,0,
  53,54,61,
457,456,455,451,364,361,265,56,0,53,54,61,
455,451,364,361,56,0,53,54,61,
459,458,457,456,455,454,453,452,451,364,361,269,201,56,0,53,54,61,
455,364,361,0,112,173,
459,458,457,456,455,454,453,452,451,364,361,269,56,0,53,54,61,
456,455,451,364,361,272,56,0,53,54,61,
384,383,382,381,380,379,378,0,373,377,
455,451,364,361,68,58,56,5,0,362,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,78,0,85,87,
  94,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,78,0,85,87,
  94,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,78,0,85,87,
  94,
464,463,462,461,459,458,457,456,455,454,453,452,364,361,314,269,78,0,85,87,
  94,
457,456,455,364,361,265,0,174,185,261,
455,364,361,0,190,
459,458,457,456,455,454,453,452,364,361,269,201,0,79,81,200,
459,458,457,456,455,454,453,452,364,361,269,0,79,81,
456,455,364,361,272,0,197,202,270,271,274,
451,78,56,0,53,54,61,
455,364,361,0,
451,68,56,5,0,53,54,61,
451,68,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
451,68,58,56,5,0,53,54,61,
78,0,
455,364,361,0,
};
static unsigned const char ag_astt[5580] = {
  1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,0,1,1,1,1,1,1,2,1,2,1,2,2,2,1,1,1,
  2,1,9,9,9,9,9,9,9,9,9,9,9,4,2,2,7,3,1,1,1,1,2,2,2,7,2,1,1,1,1,1,2,2,2,7,2,
  1,1,1,1,1,1,1,8,7,1,1,1,1,2,7,1,1,3,7,3,7,3,7,3,7,1,7,1,3,7,3,7,1,7,1,1,7,
  1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,
  1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,7,1,1,1,1,1,1,1,7,1,2,2,2,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,2,1,1,7,1,1,1,2,1,4,4,4,2,4,4,7,1,1,1,4,4,4,2,4,4,7,1,
  1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,7,2,1,1,9,9,4,2,7,1,4,4,4,4,4,
  5,4,4,4,4,4,4,4,5,5,7,1,1,1,1,1,1,1,1,2,2,2,2,7,1,1,2,1,1,2,2,2,1,1,1,1,1,
  1,2,7,3,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,7,2,2,1,1,1,
  1,1,1,1,1,1,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,
  1,1,1,1,1,1,1,7,1,1,1,2,1,1,1,7,1,1,1,2,1,2,2,2,2,2,2,2,1,1,7,1,1,1,1,1,2,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,7,1,2,1,2,1,1,1,1,1,1,1,1,1,
  2,2,2,2,2,1,1,1,7,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,4,7,1,2,1,1,1,1,1,1,1,7,1,1,1,2,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,2,2,2,2,2,2,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,7,1,1,1,1,1,1,1,2,
  1,1,1,1,1,1,1,1,1,1,1,2,7,1,2,1,1,2,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,2,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,2,2,2,2,2,2,1,1,7,1,2,1,1,1,1,
  1,2,2,2,2,2,2,2,1,1,7,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,2,7,1,1,
  1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,
  7,1,1,1,1,2,4,1,1,1,1,1,1,1,7,1,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,4,2,4,1,2,7,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,
  8,7,1,1,1,2,4,1,4,4,2,4,4,7,1,2,1,4,4,2,4,4,7,1,2,1,9,9,9,9,9,9,9,9,4,2,7,
  1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,5,
  7,1,1,1,2,7,1,1,1,1,1,7,2,4,1,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,4,2,4,1,1,8,1,5,7,1,1,1,3,7,9,9,9,4,1,8,1,5,7,1,1,1,3,7,1,8,1,5,7,
  1,1,1,3,7,1,8,1,7,1,1,1,1,8,5,1,5,7,1,1,1,1,8,5,1,5,7,1,1,1,3,7,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,4,2,7,1,3,7,1,8,1,5,7,1,1,1,3,7,1,5,1,5,7,2,2,1,2,5,
  1,3,7,2,5,1,3,7,9,9,9,4,1,1,5,7,2,2,1,3,7,1,1,7,1,1,1,1,5,7,2,2,1,3,7,1,5,
  1,5,7,2,2,1,2,5,1,3,7,5,5,5,5,5,5,5,5,1,5,5,5,5,1,5,7,1,1,2,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,4,1,5,1,5,7,2,2,1,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,2,7,
  1,1,8,5,1,5,7,1,1,1,2,5,1,3,7,1,8,1,7,1,1,1,1,1,7,1,1,2,5,1,3,7,9,9,9,4,1,
  1,5,7,2,2,1,3,7,1,1,5,7,2,2,1,3,7,2,7,1,2,2,2,7,1,1,1,1,1,2,2,2,7,1,1,1,1,
  1,2,2,7,1,1,1,1,2,4,1,2,4,1,1,1,8,5,1,5,7,1,1,1,2,5,1,3,7,2,2,2,4,1,1,7,1,
  1,1,1,7,1,1,1,1,5,7,2,2,1,3,7,1,1,5,7,2,2,1,3,7,2,4,1,1,1,8,1,5,7,1,1,1,3,
  7,9,9,9,4,1,1,7,1,1,1,1,5,7,2,2,1,3,7,9,9,9,9,9,9,9,9,4,1,1,1,1,5,5,5,5,5,
  5,5,5,1,5,7,1,1,3,1,1,5,1,1,5,5,5,5,5,5,7,3,3,1,1,5,1,5,2,7,1,1,1,7,1,2,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,7,2,2,1,1,2,1,1,1,1,1,1,7,1,2,2,2,1,1,1,1,
  1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,2,2,2,2,2,2,2,2,2,2,1,8,
  8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,8,7,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,4,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,1,8,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,4,2,2,2,7,3,1,2,2,2,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,7,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,7,2,1,2,4,1,1,2,5,7,1,1,2,2,4,1,1,1,2,7,1,2,8,5,7,1,1,1,1,
  2,8,5,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,7,2,1,1,
  2,4,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,1,1,1,7,1,1,8,8,8,8,8,8,8,8,1,
  8,8,8,8,8,8,8,8,8,1,7,1,1,1,9,9,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,1,9,9,9,9,9,9,9,9,9,9,9,5,3,3,2,7,5,5,5,5,5,5,5,5,1,5,5,5,5,1,5,7,
  1,1,2,1,1,1,1,1,1,1,1,2,2,2,2,7,1,2,1,1,2,2,2,1,1,1,8,8,8,8,8,1,8,8,8,8,8,
  8,8,1,7,1,1,1,2,4,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,2,7,1,1,1,1,1,
  1,1,7,1,1,2,2,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,7,
  1,1,1,1,8,5,5,1,5,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,8,5,5,1,5,
  7,1,1,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,1,8,5,5,1,5,7,1,1,1,8,8,8,
  8,8,8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,
  8,8,8,8,8,1,7,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,7,1,1,1,1,7,2,1,8,8,8,8,8,8,8,
  8,1,8,8,8,8,1,7,1,1,1,2,4,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,7,2,
  1,2,1,1,1,1,5,1,1,1,1,7,3,1,5,3,1,1,5,1,1,5,5,5,5,5,5,7,3,3,1,1,1,1,7,3,1,
  9,9,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,1,1,1,1,1,1,1,1,5,1,1,5,1,1,1,
  1,1,1,1,5,5,5,5,1,5,7,1,1,2,2,4,1,2,1,8,1,7,1,1,1,1,8,1,7,1,1,1,8,8,8,8,8,
  8,8,8,5,8,8,5,8,5,5,2,5,5,7,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,
  1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,7,2,2,2,2,2,2,2,2,2,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,1,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,5,7,1,1,2,1,1,5,7,2,2,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,1,
  7,1,1,1,2,4,1,8,8,8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,2,5,1,2,4,1,1,8,8,8,8,8,8,
  8,8,1,8,8,8,8,1,7,1,1,1,1,8,1,5,7,1,1,1,8,1,8,8,1,7,1,1,1,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,1,1,1,5,1,5,7,2,
  2,1,2,4,1,1,2,4,1,1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,
  5,1,5,7,2,2,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,7,1,1,1,1,1,1,1,1,
  1,1,1,1,1,2,2,2,2,2,2,7,2,1,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,7,1,2,
  1,1,2,2,2,1,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,2,7,1,1,1,1,1,2,8,8,8,8,8,8,
  8,8,1,8,8,8,1,7,1,1,1,1,5,5,1,8,5,7,1,1,1,4,4,4,7,1,1,1,1,1,1,1,1,1,1,1,1,
  2,7,2,1,2,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,4,1,5,5,1,5,7,2,2,
  1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,7,1,2,1,2,4,4,4,
  7,1,2,1,2,4,4,4,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,8,8,8,
  8,8,8,8,8,1,8,8,8,8,8,8,1,7,1,1,1,2,4,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,2,
  7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,7,1,1,2,2,2,7,2,7,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,1,1,2,1,2,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,2,4,1,3,3,3,3,5,1,1,
  1,5,1,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,3,8,8,8,8,8,8,8,8,1,8,8,8,8,
  8,8,8,8,8,1,8,7,1,1,1,2,7,1,2,7,1,1,1,1,1,1,1,1,1,5,1,1,5,1,5,5,5,5,7,2,1,
  2,2,2,2,5,2,7,1,2,7,1,2,7,1,2,7,1,2,7,1,1,1,1,1,1,1,1,1,5,1,1,5,5,1,1,1,1,
  1,1,1,5,1,5,5,1,5,7,2,1,1,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,2,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,
  8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,8,8,8,8,8,8,8,8,1,8,8,8,1,7,
  1,1,1,1,8,1,5,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,7,1,1,3,1,2,5,7,1,1,2,1,1,1,7,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,3,2,8,8,8,8,8,8,8,8,1,8,8,8,8,1,
  7,1,1,1,2,4,1,2,4,1,2,4,7,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,8,8,8,8,8,
  8,8,8,1,8,8,8,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,
  1,1,1,2,2,2,2,2,2,7,2,1,2,1,5,1,5,7,2,2,1,2,7,1,8,1,7,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,7,2,1,1,2,4,1,2,4,1,1,5,8,5,1,5,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,
  1,1,8,1,7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,3,1,1,1,1,1,1,7,2,1,1,1,7,1,1,8,1,7,1,1,1,
  1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,1,2,3,3,3,5,1,1,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,8,8,8,1,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,
  8,1,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,8,8,1,7,1,1,1,8,8,8,
  1,8,8,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,
  8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9,9,9,5,3,8,8,8,8,8,8,8,8,5,8,8,8,5,2,5,5,7,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,
  1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,7,1,1,2,2,2,1,1,1,1,5,8,5,1,5,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,2,
  5,7,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,3,1,1,8,1,7,1,1,1,1,1,7,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,7,1,1,2,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,8,8,8,8,8,
  8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,2,5,1,1,8,1,7,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,7,1,1,2,2,7,1,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,
  8,8,8,8,8,8,8,8,8,8,1,7,1,1,1,2,4,1,2,7,1,2,7,1,2,7,1,1,1,1,7,2,2,2,7,2,7,
  1,2,7,1,1,7,1,1,1,1,1,1,7,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,7,2,1,2,1,1,1,1,1,
  1,1,1,1,1,1,2,2,2,2,2,2,7,2,1,2,1,1,1,1,1,1,7,2,2,2,1,1,1,7,2,1,1,1,1,1,1,
  1,1,1,1,2,2,1,7,2,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,7,2,1,2,1,1,1,1,1,1,
  1,1,5,1,1,1,5,5,5,7,2,1,2,2,2,5,2,7,1,2,7,1,2,4,1,2,2,7,1,1,1,1,7,2,1,1,8,
  1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,2,2,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,2,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,
  8,8,1,7,1,1,1,2,7,1,2,7,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,
  8,1,8,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,8,8,1,7,1,1,1,1,1,1,4,1,1,1,7,1,8,8,
  8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,1,1,1,7,3,1,1,1,4,8,8,8,8,8,8,8,8,1,8,8,8,1,
  7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,
  1,1,1,8,8,1,7,1,1,1,2,7,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,8,
  1,7,1,1,1,1,5,1,5,7,2,2,1,1,8,1,7,1,1,1,1,5,1,5,7,2,2,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,3,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,
  8,8,8,8,8,8,8,1,8,8,8,8,8,8,8,1,7,1,1,1,1,5,5,1,5,7,2,2,1,1,5,5,5,1,5,7,3,
  3,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,1,8,1,7,1,1,1,4,2,4,4,7,1,2,1,8,1,7,1,1,1,
  1,8,1,7,1,1,1,1,5,5,1,5,7,3,3,1,1,5,5,1,5,7,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,7,1,1,1,1,1,1,1,2,7,1,1,3,2,2,2,7,2,1,1,7,2,2,2,2,4,2,2,2,7,1,1,7,1,1,1,
  1,1,1,1,1,1,1,1,1,1,7,2,1,2,2,2,4,1,1,1,1,1,1,1,1,1,1,1,7,2,1,1,1,1,1,1,1,
  1,1,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,2,2,7,2,8,1,8,8,1,7,1,1,1,
  2,7,1,2,2,7,1,2,7,1,2,7,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,
  1,1,1,1,1,1,1,1,2,2,1,1,1,7,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,7,2,1,2,2,2,
  7,1,2,7,1,2,7,1,8,1,8,8,1,7,1,1,1,2,7,1,2,7,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,
  7,2,2,1,1,5,5,1,5,7,2,2,1,1,8,8,8,8,8,8,8,1,7,1,1,1,5,1,5,5,5,5,7,2,5,1,5,
  5,5,5,7,2,2,2,2,7,2,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,1,1,7,1,2,8,8,8,
  8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,
  8,1,7,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,8,8,8,8,8,8,8,
  8,8,8,8,1,8,8,8,8,8,1,7,1,1,1,8,8,8,1,8,8,8,1,7,1,1,1,8,1,8,8,1,7,1,1,1,8,
  8,8,8,8,8,8,8,1,8,8,8,8,1,7,1,1,1,1,1,1,7,1,2,8,8,8,8,8,8,8,8,1,8,8,8,1,7,
  1,1,1,8,8,1,8,8,8,1,7,1,1,1,2,2,2,2,2,2,2,7,1,1,1,5,1,1,5,5,5,5,7,3,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,
  1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,7,2,1,2,1,1,1,1,1,1,7,1,2,2,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,2,7,2,1,
  1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,7,1,2,1,1,1,1,8,1,7,1,1,1,1,1,1,5,
  1,5,1,5,7,2,2,1,1,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,
  1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,1,5,5,1,5,7,2,2,1,2,7,3,3,3,5
};
static const unsigned short ag_pstt[] = {
1,1,1,1,1,1,1,1,1,1,365,364,363,362,361,360,359,358,357,356,355,354,353,1,
  230,227,223,222,135,74,73,72,71,70,69,11,14,15,16,17,18,19,20,21,22,23,
  24,25,26,27,28,29,30,31,32,33,0,0,13,12,10,9,8,7,75,1,366,6,218,219,220,
  2,4,3,351,5,
47,47,47,47,47,47,47,47,47,47,47,48,
263,248,2,221,37,36,35,34,
263,248,226,3,229,38,37,36,35,34,
263,248,226,4,225,39,37,36,35,34,
40,42,41,5,41,41,43,40,
31,6,44,44,
27,7,
26,8,
25,9,
24,10,
45,11,46,
22,12,
21,13,
45,14,47,
45,15,48,
45,16,49,
45,17,50,
45,18,51,
45,19,52,
45,20,53,
45,21,54,
45,22,55,
45,23,56,
45,24,57,
45,25,58,
45,26,59,
45,27,60,
45,28,61,
45,29,62,
45,30,63,
45,31,64,
45,32,65,
45,33,66,
67,67,67,67,67,68,34,69,267,262,266,
71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,38,71,71,35,70,73,72,
  251,71,
294,294,294,40,294,294,36,74,76,75,
294,294,294,40,294,294,37,74,77,75,
78,78,78,78,78,78,78,78,38,228,79,78,
78,78,78,78,78,78,78,78,39,224,79,78,
35,35,36,
39,41,80,
31,31,31,31,31,34,31,31,31,31,31,31,31,34,34,42,
78,78,78,78,78,78,78,78,230,227,223,222,43,81,81,370,79,78,367,368,369,2,4,
  3,
82,82,82,31,44,132,83,83,
28,28,28,28,28,28,28,28,28,28,28,28,28,40,28,28,28,28,28,28,28,28,28,28,28,
  28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
  28,28,28,28,28,28,28,28,28,28,40,28,28,45,30,30,40,
78,78,78,78,78,78,78,78,46,84,206,79,78,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,47,
  88,86,85,87,88,
89,89,89,48,91,89,90,522,
89,89,89,49,93,89,92,511,
89,437,436,435,434,433,432,431,89,89,50,97,89,96,95,94,470,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,104,103,102,101,100,99,98,
  51,100,105,98,86,99,
1,1,1,1,1,1,1,1,502,501,500,499,498,1,1,1,52,102,503,1,495,101,
1,1,1,1,1,1,1,1,1,1,1,53,105,488,1,103,104,
1,1,1,1,1,1,1,1,1,1,1,491,54,107,488,1,103,106,107,
108,108,108,55,110,108,109,484,
108,108,108,56,113,108,111,112,
1,1,1,1,1,1,1,1,1,1,1,74,73,72,71,70,69,57,116,75,1,114,115,
117,117,117,117,117,117,117,117,117,117,117,118,44,58,125,121,120,122,123,
  119,124,466,
1,1,1,1,1,1,1,1,1,1,1,155,59,129,154,1,128,148,127,126,
130,130,130,60,132,130,131,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,61,
  134,86,85,133,
117,117,117,117,117,117,117,117,117,117,393,117,230,227,223,222,118,44,62,
  143,121,120,135,139,138,137,136,140,140,140,140,140,141,119,143,393,142,
  396,
144,437,436,435,434,433,432,431,144,144,63,148,429,147,146,94,145,
89,437,436,435,434,433,432,431,89,89,64,150,89,149,424,425,94,
117,117,117,117,117,117,117,117,117,117,117,230,227,223,222,118,44,65,153,
  121,120,135,139,138,137,136,151,151,151,151,151,371,152,119,
154,154,154,66,157,156,155,154,
158,158,158,158,158,158,158,158,268,158,
159,159,159,159,161,68,164,163,162,160,
39,264,165,
67,67,67,67,67,68,70,69,267,247,266,
253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,
  253,254,
39,249,166,
38,73,167,
168,168,168,168,168,168,168,168,40,168,168,168,168,168,168,168,168,168,168,
  168,168,168,168,168,168,168,168,40,168,74,168,168,40,
40,295,169,
337,337,41,337,337,76,170,232,171,
337,337,41,337,337,77,170,231,171,
209,209,209,209,209,209,209,209,210,
39,79,172,
173,173,173,173,173,173,173,173,173,173,173,173,173,173,40,173,173,173,173,
  173,173,173,173,173,173,173,173,173,173,173,173,173,173,40,173,28,80,
  173,173,40,
31,81,174,174,
175,175,175,82,
31,134,176,
23,84,
50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,
38,84,177,
40,178,40,28,87,178,178,40,
20,88,
79,79,79,426,
40,179,40,28,90,179,179,40,
19,91,
40,180,40,28,92,180,180,40,
18,93,
40,181,40,94,181,181,40,
40,182,28,40,28,95,182,182,40,
40,183,28,40,28,96,183,183,40,
17,97,
53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,
42,99,184,
16,100,
40,185,40,28,101,185,185,40,
15,102,
40,28,40,28,103,489,489,40,
33,492,186,
14,105,
33,494,186,
13,107,
79,79,79,485,
40,40,28,109,483,483,40,
12,110,
40,40,111,187,40,
40,40,28,112,486,486,40,
11,113,
40,28,40,28,114,145,145,40,
33,144,188,
10,116,
383,383,383,383,383,383,383,383,189,383,383,383,383,189,383,117,189,189,386,
191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,
  191,191,191,191,190,192,191,191,191,191,191,191,191,191,191,191,191,118,
  191,191,191,192,
193,193,193,193,193,193,193,193,193,193,193,379,
40,28,40,28,120,378,378,40,
194,194,194,194,194,40,194,194,194,194,194,194,194,40,121,194,194,40,
44,122,195,
40,196,28,40,28,123,196,196,40,
33,465,197,
9,125,
40,198,40,126,198,198,40,
40,40,127,199,40,
33,147,200,
8,129,
79,79,79,82,
40,40,28,131,81,81,40,
7,132,
40,40,28,133,83,83,40,
6,134,
39,135,201,
263,248,226,136,202,204,203,35,34,
263,248,226,137,205,207,206,35,34,
263,248,138,209,208,35,34,
44,211,195,
40,400,210,211,
40,212,28,40,28,141,212,212,40,
33,394,213,
5,143,
440,440,440,439,
40,40,145,214,40,
40,40,146,215,40,
40,40,28,147,427,427,40,
4,148,
40,40,28,149,420,420,40,
3,150,
40,374,216,217,
40,218,40,28,152,218,218,40,
2,153,
79,79,79,80,
40,40,155,219,40,
40,40,28,156,76,76,40,
1,157,
270,270,270,270,270,270,270,270,271,
220,220,220,220,290,
287,287,287,287,287,287,287,221,287,160,222,222,289,
159,159,280,159,159,280,280,280,280,280,280,161,283,283,160,
223,279,
224,277,
272,164,
225,225,225,165,225,265,
226,226,226,226,226,226,226,226,226,226,226,226,226,226,259,226,226,166,250,
  255,226,226,255,
67,67,67,67,67,68,167,69,267,246,266,
227,227,227,227,227,227,227,227,227,227,227,327,229,231,232,235,236,227,227,
  227,227,230,233,234,227,227,227,168,296,298,299,300,301,302,303,304,305,
  306,307,228,
237,237,237,237,237,237,237,237,40,237,237,237,237,237,237,237,237,237,237,
  237,237,237,237,237,237,237,237,40,237,169,237,237,40,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,170,
  339,239,238,
240,338,
241,241,241,241,241,241,241,241,241,40,241,241,241,241,241,241,241,241,241,
  241,241,241,241,241,40,241,172,241,241,40,
242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,
  242,242,242,242,242,242,242,242,242,242,242,242,242,242,463,464,
135,31,174,132,243,
143,143,143,175,
244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,
  244,244,244,244,244,244,244,244,244,244,244,244,244,244,140,176,133,244,
  244,142,
85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,177,
  85,85,
40,526,245,246,
40,513,179,247,248,523,
40,512,250,249,251,
32,181,252,
43,255,471,182,253,254,255,255,
43,256,471,183,253,254,256,256,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,114,113,112,111,110,109,108,
  107,106,184,115,98,257,
40,497,258,260,259,
261,261,261,261,261,261,261,261,40,261,261,261,40,186,261,261,40,
154,154,154,187,262,154,
263,263,263,263,263,263,263,263,40,263,263,263,263,263,263,263,263,263,40,
  188,263,263,40,
382,382,384,382,
68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
  68,68,68,68,68,68,68,68,68,68,68,190,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,190,63,
  63,63,63,63,63,63,63,63,63,63,65,63,63,
66,192,
383,383,383,383,383,383,383,383,189,383,383,383,383,189,383,193,189,189,385,
78,78,78,78,78,78,78,78,230,227,223,222,194,264,370,79,78,367,368,369,2,4,3,
265,265,265,265,265,40,265,265,265,265,265,265,265,40,195,265,265,40,
40,468,247,266,
267,267,267,267,267,267,267,267,40,267,267,267,267,267,40,197,267,267,40,
42,198,268,
67,67,67,67,67,68,199,270,269,267,266,
271,271,271,271,271,271,271,271,40,271,271,271,271,40,200,271,271,40,
272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,
  272,272,201,273,272,
117,117,117,117,117,117,117,117,117,117,117,118,202,120,135,211,244,119,
40,274,28,28,40,28,203,274,274,40,
40,275,28,28,40,28,204,275,275,40,
117,117,117,117,117,117,117,117,117,117,117,118,205,120,135,211,241,119,
40,276,28,28,40,28,206,276,276,40,
40,277,28,28,40,28,207,277,277,40,
40,278,28,28,40,28,208,278,278,40,
40,279,28,28,40,28,209,279,279,40,
280,280,280,280,280,280,280,280,40,280,280,280,280,280,280,40,210,280,280,
  40,
40,401,281,
40,398,210,282,
283,283,283,283,283,283,283,283,40,283,283,283,283,283,283,283,283,283,40,
  213,283,283,40,
452,451,450,449,448,447,446,445,444,443,442,441,214,284,
285,285,285,215,428,286,
287,287,287,287,287,287,287,287,40,287,287,287,287,40,216,287,287,40,
40,375,288,
40,372,216,289,
1,1,1,1,1,1,1,1,1,1,1,74,73,72,71,70,69,219,75,1,77,
290,290,290,290,291,
159,159,159,159,221,284,
221,288,286,
159,159,280,159,159,280,280,280,280,280,280,223,282,282,160,
291,291,291,224,278,292,
79,79,79,163,
258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,260,258,
293,293,293,293,293,293,293,293,333,293,293,333,293,293,293,293,293,293,293,
  333,333,333,333,293,333,227,293,293,335,
37,328,294,329,
40,295,40,229,295,295,40,
40,296,40,230,296,296,40,
297,297,297,297,297,297,297,297,320,297,297,320,297,320,320,37,320,320,231,
  298,297,
40,299,40,232,299,299,40,
40,300,40,233,300,300,40,
40,301,40,234,301,301,40,
40,302,40,235,302,302,40,
40,303,40,236,303,303,40,
227,227,227,227,227,227,227,227,227,227,227,327,229,231,232,235,236,227,227,
  227,227,230,233,234,227,227,227,237,297,298,299,300,301,302,303,304,305,
  306,307,228,
343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,343,344,
304,239,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,240,
  340,239,238,
305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,
  305,305,305,305,305,241,207,305,
306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,
  306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,58,242,
  306,306,60,
40,40,28,243,352,352,40,
139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
  139,139,139,139,139,139,139,139,139,139,139,139,139,139,141,139,
307,307,307,307,307,307,307,307,40,307,307,307,307,307,307,40,245,307,307,
  40,
40,525,308,
309,309,309,309,309,309,309,309,40,309,309,309,40,247,309,309,40,
40,514,310,
40,516,312,311,
313,313,313,313,313,313,313,313,40,313,313,313,313,40,250,313,313,40,
40,314,40,28,251,314,314,40,
315,40,315,315,40,252,315,315,40,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
  202,202,202,202,204,202,202,202,203,202,202,202,202,202,202,202,202,253,
  316,316,
40,28,40,28,254,477,477,40,
40,476,317,318,
40,474,317,319,
40,320,40,28,257,320,320,40,
321,321,321,321,321,321,321,321,40,321,321,321,321,40,258,321,321,40,
40,28,40,28,259,504,504,40,
40,496,322,323,
1,1,1,1,1,1,1,1,1,1,1,261,488,1,324,
40,40,262,325,40,
1,1,1,1,1,1,1,1,1,1,1,74,73,72,71,70,69,263,75,1,326,
40,327,40,264,327,327,40,
78,78,78,78,78,78,78,78,230,227,223,222,265,328,370,79,78,367,368,369,2,4,3,
40,469,310,
117,117,117,117,117,117,117,117,117,117,117,118,44,267,121,120,122,123,119,
  467,
329,329,329,329,329,329,329,329,40,329,329,329,40,268,329,329,40,
40,28,28,40,330,28,269,330,330,40,
151,151,151,270,331,
1,1,1,1,1,1,1,1,1,1,1,155,271,154,1,149,127,126,
216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,
  216,216,217,
40,28,28,40,28,273,245,245,40,
41,337,337,337,274,170,243,171,
41,337,337,337,275,170,242,171,
41,337,337,337,276,170,240,171,
41,337,337,337,277,170,239,171,
41,337,337,337,278,170,238,171,
41,337,337,337,279,170,237,171,
1,1,1,1,1,1,1,1,333,334,1,1,335,1,280,332,1,407,402,338,337,336,
339,339,339,339,339,339,339,339,40,339,339,339,339,339,339,40,281,339,339,
  40,
40,399,281,
117,117,117,117,117,117,117,117,117,117,117,230,227,223,222,118,44,283,121,
  120,135,139,138,137,136,140,140,140,140,140,141,119,397,
40,40,284,340,40,
457,457,457,285,
39,286,341,
1,1,1,1,1,1,1,1,1,1,342,1,287,332,1,391,343,388,
344,344,344,344,344,344,344,344,40,344,344,344,344,40,288,344,344,40,
40,373,288,
293,293,293,293,292,
345,345,345,274,
346,292,
332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,334,
  332,
347,347,347,347,347,347,347,347,40,347,347,347,347,347,347,347,347,347,40,
  347,294,347,347,40,
37,295,348,
37,296,349,
1,1,1,1,1,1,1,1,322,1,1,322,1,322,322,322,322,297,324,1,324,
319,318,317,321,
37,299,350,
37,300,351,
37,301,352,
37,302,353,
37,303,354,
355,355,355,355,355,355,355,355,348,355,355,348,348,355,355,355,355,355,355,
  355,348,355,348,348,355,348,304,341,355,355,350,
213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,
  213,213,213,213,213,214,
57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,
  57,57,57,57,57,57,57,57,57,57,59,57,
1,1,1,1,1,1,1,1,356,357,358,1,1,1,307,332,1,532,532,527,361,360,359,
362,362,362,362,362,362,362,362,40,362,362,362,362,362,362,40,308,362,362,
  40,
1,1,1,1,1,1,1,1,1,1,1,309,363,1,125,
364,364,364,364,364,364,364,364,40,364,364,364,40,310,364,364,40,
40,365,40,28,311,365,365,40,
366,366,366,366,366,366,366,366,40,366,366,366,366,40,312,366,366,40,
1,1,1,1,1,1,1,1,367,1,1,1,313,363,1,125,367,
40,513,314,247,248,515,
144,144,144,315,368,145,
202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,
  202,202,202,202,204,202,202,202,203,202,202,202,202,202,202,202,202,316,
  200,201,
369,369,369,369,369,369,369,369,40,369,369,369,369,40,317,369,369,40,
40,475,370,
40,473,370,
40,88,320,371,87,372,
1,1,1,1,1,1,1,1,373,1,1,1,321,363,1,505,
374,374,374,374,374,374,374,374,40,374,374,374,374,40,322,374,374,40,
40,28,40,28,323,506,506,40,
40,28,40,28,324,490,490,40,
1,1,1,1,1,1,1,1,1,1,1,74,73,72,71,70,69,325,75,1,487,
40,28,40,28,326,146,146,40,
377,327,
40,375,40,328,375,375,40,
1,1,1,1,1,1,1,1,1,1,1,329,156,1,376,
39,164,377,
40,150,378,
40,28,379,28,40,28,332,379,379,40,
40,380,40,333,380,380,40,
40,381,40,334,381,381,40,
40,382,40,335,382,382,40,
40,28,28,40,28,336,406,406,40,
40,28,28,40,28,337,405,405,40,
40,28,28,40,28,338,404,404,40,
1,1,1,1,1,1,1,1,333,334,1,1,335,1,339,332,1,407,403,338,337,336,
383,383,383,340,438,
384,384,384,341,385,
40,386,40,342,386,386,40,
40,28,40,28,343,390,390,40,
1,1,1,1,1,1,1,1,1,1,342,1,344,332,1,391,343,389,
276,276,276,275,
291,291,291,346,387,
227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,347,
  336,
388,388,388,40,388,388,388,40,348,388,388,40,
389,389,389,389,389,389,389,389,40,389,389,389,389,40,349,389,389,40,
390,390,390,390,390,390,390,390,40,390,390,390,390,390,390,390,390,390,40,
  350,390,390,40,
391,391,391,40,391,391,391,40,351,391,391,40,
392,40,392,392,40,352,392,392,40,
393,393,393,393,393,393,393,393,40,393,393,393,393,393,40,353,393,393,40,
394,394,394,394,394,394,394,394,40,394,394,394,394,394,394,394,40,354,394,
  394,40,
347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,347,
  349,347,
395,395,395,395,395,395,395,395,320,395,395,395,320,37,320,320,356,396,395,
40,397,40,357,397,397,40,
40,398,40,358,398,398,40,
40,28,40,28,359,531,531,40,
40,28,40,28,360,530,530,40,
40,28,40,28,361,529,529,40,
1,1,1,1,1,1,1,1,356,357,358,1,1,1,362,332,1,532,532,528,361,360,359,
40,28,399,28,40,28,363,399,399,40,
1,1,1,1,1,1,1,1,1,1,1,364,363,1,126,
40,513,365,247,248,517,
1,1,1,1,1,1,1,1,367,1,1,1,366,363,1,126,367,
40,400,40,367,400,400,40,
40,40,368,401,40,
1,1,1,1,1,1,1,1,402,1,1,1,369,363,1,479,403,
404,404,404,404,404,404,404,404,40,404,404,404,404,40,370,404,404,40,
405,405,405,405,405,405,405,405,405,405,405,405,40,405,405,405,405,405,405,
  405,40,371,405,405,40,
40,89,406,
40,407,40,373,407,407,40,
1,1,1,1,1,1,1,1,373,1,1,1,374,363,1,507,
376,375,
40,408,40,376,408,408,40,
409,40,409,409,40,377,409,409,40,
410,410,410,410,410,410,410,410,40,410,410,410,410,410,410,410,410,410,410,
  410,40,378,410,410,40,
37,176,411,
37,380,412,
37,381,413,
37,382,414,
415,415,415,383,
458,458,458,384,
39,385,416,
37,386,417,
418,387,
67,67,67,67,67,68,388,326,267,266,
1,1,1,1,1,1,1,1,1,1,1,196,389,197,1,325,
1,1,1,1,1,1,1,1,1,1,1,74,73,72,71,70,69,390,75,1,316,
67,67,67,67,67,68,391,315,267,266,
419,419,419,392,314,
1,1,1,1,1,1,1,1,1,1,312,311,1,393,313,1,309,310,
1,1,1,1,1,1,1,1,1,1,1,161,160,159,158,394,162,1,308,
1,1,1,1,1,1,1,1,322,1,1,1,322,322,322,395,537,1,537,
536,535,321,
37,397,420,
37,398,421,
37,127,422,128,
37,400,423,
285,285,285,401,430,286,
40,424,40,402,424,424,40,
40,28,40,28,403,478,478,40,
1,1,1,1,1,1,1,1,402,1,1,1,404,363,1,481,480,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,426,428,430,405,425,98,431,
  429,427,93,
432,432,432,432,432,432,432,432,432,432,432,432,40,432,432,432,432,432,432,
  432,40,406,432,432,40,
37,407,433,
42,408,434,
225,225,225,409,225,435,
1,1,1,1,1,1,1,1,1,1,1,439,441,442,437,436,438,443,444,410,332,1,152,166,167,
  168,169,170,171,172,173,174,174,182,440,191,
445,445,445,445,445,445,445,445,40,445,445,445,445,445,40,411,445,445,40,
446,40,446,446,446,40,412,446,446,40,
40,447,447,40,413,447,447,40,
40,448,448,40,414,448,448,40,
449,449,449,453,
450,450,450,416,451,
452,452,452,452,452,452,452,452,40,452,452,452,40,417,452,452,40,
291,291,291,418,273,
453,453,453,184,
454,454,454,454,454,454,454,454,40,454,454,454,40,420,454,454,40,
455,455,455,455,455,455,455,455,40,455,455,455,40,421,455,455,40,
456,456,456,456,456,456,456,456,40,456,456,456,456,40,422,456,456,40,
40,457,457,40,423,457,457,40,
37,424,458,
40,459,40,425,459,459,40,
40,460,40,426,460,460,40,
40,28,40,28,427,92,92,40,
40,461,40,428,461,461,40,
40,28,40,28,429,91,91,40,
40,462,40,430,462,462,40,
40,28,40,28,431,90,90,40,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,426,428,430,432,425,98,465,
  464,463,97,
466,466,466,466,466,466,466,466,40,466,466,466,466,466,40,433,466,466,40,
467,467,467,467,467,467,467,467,40,467,467,467,467,467,467,467,40,434,467,
  467,40,
40,28,28,40,28,435,165,165,40,
40,28,28,28,40,28,436,188,188,40,
40,468,40,437,468,468,40,
40,469,40,438,469,469,40,
40,470,40,439,470,470,40,
189,37,189,189,440,471,187,
40,472,40,441,472,472,40,
40,473,40,442,473,473,40,
40,28,28,40,28,443,181,181,40,
40,28,28,40,28,444,180,180,40,
1,1,1,1,1,1,1,1,1,1,1,68,118,445,476,1,475,474,
89,89,89,45,446,477,89,421,422,
419,418,447,417,
478,479,448,408,
455,455,455,454,
459,459,459,450,
40,40,451,480,40,
1,1,1,1,1,1,1,1,1,1,1,452,387,1,
186,186,186,185,
1,1,1,1,1,1,1,1,1,1,1,454,534,1,
1,1,1,1,1,1,1,1,1,1,1,455,533,1,
1,1,1,1,1,1,1,1,1,1,1,118,456,482,1,481,
521,520,457,518,
483,40,483,483,40,458,483,483,40,
37,459,484,122,
37,460,485,
37,461,486,
37,462,487,
40,28,40,28,463,96,96,40,
40,28,40,28,464,95,95,40,
40,28,40,28,465,94,94,40,
1,1,1,1,1,1,1,1,509,508,1,1,1,466,510,1,
1,1,1,1,1,1,1,1,1,1,1,161,160,159,158,467,162,1,153,157,
37,468,488,
37,469,489,
37,470,490,
491,40,491,491,40,471,491,491,40,
37,472,492,
37,473,493,
40,28,28,40,28,474,179,179,40,
40,28,28,40,28,475,178,178,40,
40,28,28,40,28,476,177,177,40,
40,494,494,494,494,494,494,494,40,477,494,494,40,
409,495,409,409,409,409,478,412,
409,495,409,409,409,409,479,411,
462,461,460,480,456,
40,28,28,40,28,481,130,130,40,
40,28,28,40,28,482,129,129,40,
89,89,89,483,89,482,
496,496,496,496,496,496,496,496,496,496,496,496,40,496,496,496,496,496,40,
  484,496,496,40,
497,497,497,497,497,497,497,497,497,497,497,497,40,497,497,497,497,497,40,
  485,497,497,40,
498,498,498,498,498,498,498,498,498,498,498,498,40,498,498,498,498,498,40,
  486,498,498,40,
499,499,499,499,499,499,499,499,499,499,499,499,40,499,499,499,499,499,40,
  487,499,499,40,
500,500,500,40,500,500,500,40,488,500,500,40,
501,40,501,501,40,489,501,501,40,
502,502,502,502,502,502,502,502,40,502,502,502,502,40,490,502,502,40,
225,225,225,491,225,190,
503,503,503,503,503,503,503,503,40,503,503,503,40,492,503,503,40,
504,504,40,504,504,504,40,493,504,504,40,
437,436,435,434,433,432,431,494,505,94,
506,413,506,506,413,413,413,413,495,410,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,118,496,508,98,507,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,118,497,120,98,121,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,118,498,118,98,119,
98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,118,499,116,98,117,
67,67,67,67,67,68,500,509,267,266,
419,419,419,501,510,
1,1,1,1,1,1,1,1,1,1,1,196,502,197,1,511,
1,1,1,1,1,1,1,1,1,1,1,503,512,1,
159,159,159,159,161,504,513,198,163,162,160,
40,514,40,505,514,514,40,
515,515,515,414,
40,28,40,28,507,124,124,40,
40,28,40,28,508,123,123,40,
40,28,28,40,28,509,192,192,40,
40,28,28,40,28,510,183,183,40,
40,28,28,40,28,511,195,195,40,
40,28,28,40,28,512,194,194,40,
40,28,28,40,28,513,193,193,40,
423,514,
416,416,416,415,
};
static const unsigned short ag_sbt[] = {
     0,  76,  88,  96, 106, 116, 124, 128, 130, 132, 134, 136, 139, 141,
   143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 182,
   185, 188, 191, 194, 197, 200, 203, 214, 241, 251, 261, 273, 285, 288,
   291, 307, 331, 339, 405, 418, 448, 456, 464, 481, 510, 532, 549, 568,
   576, 584, 607, 629, 649, 656, 685, 723, 740, 757, 791, 799, 809, 819,
   822, 833, 854, 857, 860, 893, 896, 905, 914, 923, 926, 966, 970, 974,
   977, 979,1004,1007,1015,1017,1021,1029,1031,1039,1041,1048,1057,1066,
  1068,1085,1088,1090,1098,1100,1108,1111,1113,1116,1118,1122,1129,1131,
  1136,1143,1145,1153,1156,1158,1177,1218,1230,1238,1256,1259,1268,1271,
  1273,1280,1285,1288,1290,1294,1301,1303,1310,1312,1315,1324,1333,1340,
  1343,1347,1356,1359,1361,1365,1370,1375,1382,1384,1391,1393,1397,1405,
  1407,1411,1416,1423,1425,1434,1439,1452,1467,1469,1471,1473,1479,1502,
  1513,1553,1586,1608,1610,1640,1675,1680,1684,1723,1750,1754,1760,1765,
  1768,1776,1784,1813,1818,1835,1841,1864,1868,1905,1943,1945,1964,1987,
  2005,2009,2028,2031,2042,2060,2084,2102,2112,2122,2140,2150,2160,2170,
  2180,2200,2203,2207,2230,2244,2250,2268,2271,2275,2296,2301,2307,2310,
  2325,2331,2335,2353,2382,2386,2393,2400,2421,2428,2435,2442,2449,2456,
  2496,2515,2517,2539,2566,2606,2613,2648,2668,2671,2688,2691,2695,2713,
  2721,2730,2769,2777,2781,2785,2793,2811,2819,2823,2838,2843,2864,2871,
  2894,2897,2917,2934,2944,2949,2967,2989,2998,3006,3014,3022,3030,3038,
  3046,3068,3088,3091,3124,3129,3133,3136,3154,3172,3175,3180,3184,3186,
  3206,3230,3233,3236,3257,3261,3264,3267,3270,3273,3276,3307,3332,3369,
  3392,3412,3427,3444,3452,3470,3487,3493,3499,3538,3556,3559,3562,3568,
  3584,3602,3610,3618,3639,3647,3649,3656,3671,3674,3677,3687,3694,3701,
  3708,3717,3726,3735,3757,3762,3767,3774,3782,3800,3804,3809,3829,3841,
  3859,3882,3894,3903,3922,3943,3964,3983,3990,3997,4005,4013,4021,4044,
  4054,4069,4075,4092,4099,4104,4121,4139,4164,4167,4174,4190,4192,4199,
  4208,4233,4236,4239,4242,4245,4249,4253,4256,4259,4261,4271,4287,4308,
  4318,4323,4341,4360,4379,4382,4385,4388,4392,4395,4401,4408,4416,4433,
  4459,4484,4487,4490,4496,4532,4551,4561,4569,4577,4581,4586,4603,4608,
  4612,4629,4646,4664,4672,4675,4682,4689,4697,4704,4712,4719,4727,4753,
  4772,4793,4802,4812,4819,4826,4833,4840,4847,4854,4863,4872,4890,4899,
  4903,4907,4911,4915,4920,4934,4938,4952,4966,4982,4986,4995,4999,5002,
  5005,5008,5016,5024,5032,5048,5068,5071,5074,5077,5086,5089,5092,5101,
  5110,5119,5132,5140,5148,5153,5162,5171,5177,5200,5223,5246,5269,5281,
  5290,5308,5314,5331,5342,5352,5362,5383,5404,5425,5446,5456,5461,5477,
  5491,5502,5509,5513,5521,5529,5538,5547,5556,5565,5574,5576,5580
};
static const unsigned short ag_sbe[] = {
    56,  87,  90,  99, 109, 119, 125, 129, 131, 133, 135, 137, 140, 142,
   144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183,
   186, 189, 192, 195, 198, 201, 209, 235, 247, 257, 269, 281, 287, 289,
   306, 319, 335, 401, 413, 442, 451, 459, 474, 504, 526, 543, 561, 571,
   579, 601, 620, 641, 652, 680, 703, 733, 750, 774, 794, 807, 814, 820,
   828, 853, 855, 858, 889, 894, 901, 910, 922, 924, 962, 967, 973, 975,
   978,1003,1005,1011,1016,1020,1025,1030,1035,1040,1044,1053,1062,1067,
  1084,1086,1089,1094,1099,1104,1109,1112,1114,1117,1121,1125,1130,1133,
  1139,1144,1149,1154,1157,1173,1213,1229,1234,1252,1257,1264,1269,1272,
  1276,1282,1286,1289,1293,1297,1302,1306,1311,1313,1318,1327,1335,1341,
  1344,1352,1357,1360,1364,1367,1372,1378,1383,1387,1392,1394,1401,1406,
  1410,1413,1419,1424,1433,1438,1448,1463,1468,1470,1472,1476,1496,1508,
  1540,1582,1604,1609,1636,1673,1677,1683,1718,1747,1751,1756,1761,1766,
  1771,1779,1809,1814,1831,1838,1860,1866,1904,1940,1944,1960,1976,2001,
  2006,2024,2029,2037,2056,2081,2096,2108,2118,2134,2146,2156,2166,2176,
  2196,2201,2204,2226,2242,2247,2264,2269,2272,2292,2300,2305,2308,2321,
  2328,2334,2351,2378,2383,2389,2396,2418,2424,2431,2438,2445,2452,2483,
  2514,2516,2535,2563,2602,2609,2646,2664,2669,2684,2689,2692,2709,2717,
  2726,2766,2773,2778,2782,2789,2807,2815,2820,2834,2840,2860,2867,2883,
  2895,2910,2930,2940,2947,2961,2988,2994,3002,3010,3018,3026,3034,3042,
  3060,3084,3089,3108,3126,3132,3134,3148,3168,3173,3179,3183,3185,3204,
  3226,3231,3234,3253,3260,3262,3265,3268,3271,3274,3302,3331,3367,3383,
  3408,3423,3440,3448,3466,3482,3489,3496,3535,3552,3557,3560,3564,3580,
  3598,3606,3614,3635,3643,3648,3652,3667,3672,3675,3683,3690,3697,3704,
  3713,3722,3731,3749,3760,3765,3770,3778,3794,3803,3807,3827,3837,3855,
  3878,3890,3899,3918,3939,3962,3980,3986,3993,4001,4009,4017,4035,4050,
  4065,4071,4087,4095,4101,4116,4135,4160,4165,4170,4186,4191,4195,4204,
  4229,4234,4237,4240,4243,4248,4252,4254,4257,4260,4267,4283,4304,4314,
  4321,4336,4356,4375,4381,4383,4386,4389,4393,4398,4404,4412,4428,4452,
  4480,4485,4488,4493,4515,4547,4557,4565,4573,4580,4584,4599,4606,4611,
  4625,4642,4660,4668,4673,4678,4685,4693,4700,4708,4715,4723,4746,4768,
  4789,4798,4808,4815,4822,4829,4837,4843,4850,4859,4868,4885,4894,4901,
  4905,4910,4914,4917,4931,4937,4949,4963,4978,4984,4991,4996,5000,5003,
  5006,5012,5020,5028,5045,5063,5069,5072,5075,5082,5087,5090,5097,5106,
  5115,5128,5138,5146,5151,5158,5167,5174,5196,5219,5242,5265,5277,5286,
  5304,5311,5327,5338,5349,5360,5379,5400,5421,5442,5452,5459,5473,5488,
  5496,5505,5512,5517,5525,5534,5543,5552,5561,5570,5575,5579,5580
};
static const unsigned char ag_fl[] = {
  1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,4,2,2,2,2,0,1,2,1,1,1,1,
  2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,2,0,1,2,1,1,2,0,1,3,1,2,1,
  1,1,1,1,1,1,2,3,1,2,1,2,1,2,1,3,1,5,0,1,4,4,4,3,5,5,5,4,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,3,4,4,3,4,2,3,4,4,1,2,5,3,1,1,1,1,2,
  0,1,1,3,1,2,5,1,1,4,4,0,4,9,1,1,1,1,1,1,1,1,1,1,2,6,1,1,1,1,1,1,1,1,1,
  1,2,6,6,6,2,2,1,6,1,2,3,2,2,0,3,1,6,6,6,6,1,1,1,1,2,3,1,1,1,1,1,4,1,2,
  1,1,1,2,1,1,2,1,1,1,1,2,1,1,3,2,1,1,3,2,1,3,3,1,1,1,1,4,4,4,4,3,4,4,3,
  4,4,3,1,1,3,1,1,2,1,1,1,1,2,0,1,1,2,1,1,3,1,1,1,1,2,2,3,5,1,2,3,1,3,1,
  0,1,3,2,2,1,2,0,1,2,1,2,3,4,0,1,3,4,1,1,1,1,1,1,1,1,1,1,5,5,5,1,1,1,5,
  5,5,3,3,3,0,1,0,1,3,5,5,1,1,2,1,1,2,0,1,2,3,0,1,2,3,3,1,2,1,1,1,2,0,1,
  1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,2,6,5,2,1,1,1,2,0,1,
  3,2,5,3,4,2,1,1,1,1,1,1,4,2,3,1,2,3,4,2,2,2,1,5,0,2,2,2,0,1,2,3,5,1,1,
  2,5,1,5,1,1,1,2,3,1,7,1,1,1,1,1,1,1,5,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,3,
  4,7,2,2,2,1,1,1,4,5,1,1,4,2,3,1,0,1,4,3,4,3,2,4,3,4,4,5,2,1,1,2,5,1,2,
  5,0,1,1,1,1,3,2,1,1,1,1,1,1,2,3,3,4,7,7,7,1,2,0,1,5,3,6,7,1,1,1,1,3,1,
  3,2,3,4,2,2,2,1,5,5,3,3,3
};
static const unsigned short ag_ptt[] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 54, 54,  3, 55, 57, 59, 61, 61,
   53, 62, 64, 66, 67, 69, 71, 73, 75, 77, 81, 81, 79, 84, 84, 82, 87, 87,
   85, 91, 92, 92, 93, 93, 88, 96, 97, 97, 98, 98, 94, 95, 95,102,102,102,
  102,102,102,102,  4,109,112,112,110, 17,113, 15,114,114, 35,115,118,118,
  119,119,119,119,119,119,119,119,116,116,116,116,116,116,116,116,117,117,
  117,117,117,117,117,117,117,117,120,120,121,121,122,122,123,143,143,144,
  144,145,145,146,146,148,148, 44, 44,147,149,154,155,155,156,156,150,152,
   23,157,157, 19,158,158,159,162,162,160,164,164,165,166,168,168,168,168,
  168,173,161,161,163,163,163,163,163,163,163,163,163,183,184,184,184,184,
  175,176,177,188,190,190,190,181,191,192,192,178,194,179,180,182,200,200,
  197,205,205,203,204,204,204,209, 47,211,215,215,212,216,219,219,213,222,
  222,220, 50, 48, 49,223,226,226,224,224,231,230,225,225,234,227,227,240,
  240,240,240,241,241,242,242,242,243,243,243,244,236,236,245,246,246,249,
  253,253,251,250,256,257,257,258,258,254,239,259,247,247,174,174,261,264,
  264,261,185,267,268,268,268,202,202,270,273,273,270,270,275,276,276,277,
  277,271,274,274,274,274,237,237,279,279,280,280,280,280,280,280,280,280,
  280,280,281,282,282,293,293,294,283,284,285,286,286,286,302,302,303,303,
  286,287,288,289,290,290,309,310,310,311,311,306,307,238,238,312,312,313,
  318,318,315,320,321,321,322,322,316, 45,323,324,324,324,324,324,324,324,
  324,324,324,324,324,324,324,210,210,210,210,  7,338,338,338,338,339,339,
  217,217,343,344,344,345,345,342,342,346,340,340,348,348, 13,349,349,350,
  351,351,353,353,353,353,354,354,355,355,355,355,356,363,363,360,360,362,
  362,362,362,357,366,366,  9,358,371,371,369,369,372, 11,374,374,373,377,
  377,377,377,377,377,377,375,385,385,386,386,386,386,386,386,386,386,386,
  386,386,386,387,387,387,376,400,401,402,403,403,403, 51, 51, 21,407,407,
  408,408, 37,411,411,409,409,409,409,410,412,412,412,412,413, 27,415,416,
   25,417,418,419,419,420, 31, 29, 29, 33,421,421,422,422,422,422,422,422,
  423,423,423,423,429,429,429, 39,433,435,435,433,433,433,434,436,437,437,
   41,441, 43,442,442,443,443,444,444,444,444,445,446,447,447,447
};
static const unsigned short  *ag_valid(PCB_DECL, int ag_k) {
  const unsigned short  *ag_tp = &ag_tstt[ag_sbt[(PCB).sn+1]];
  while (*--ag_tp != (const unsigned short) ag_k) if (*ag_tp == 0) return NULL;
  return ag_tp;
}
int SipParser_change_reduction(PCB_DECL, SipParser_token_type ag_k) {
  if (!ag_valid(PCB_POINTER, ag_k)) return 0;
  (PCB).reduction_token = ag_k;
  return 1;
}
static void ag_default(PCB_DECL, const  int *ag_tp) {
  (PCB).ag_dsn = (PCB).sn;
  (PCB).ag_dtl = ag_tp;
  while (!ag_valid(PCB_POINTER, (SipParser_token_type) *ag_tp)) ag_tp++;
  (PCB).reduction_token = (SipParser_token_type) *ag_tp;
}
static void ag_ra(PCB_DECL)
{
  switch(ag_rpx[(PCB).ag_ap]) {
    case 1: ag_rp_1(PCB_POINTER); break;
    case 2: ag_rp_2(PCB_POINTER); break;
    case 3: ag_rp_3(PCB_POINTER); break;
    case 4: ag_rp_4(PCB_POINTER); break;
    case 5: ag_rp_5(PCB_POINTER); break;
    case 6: ag_rp_6(PCB_POINTER); break;
    case 7: ag_rp_7(PCB_POINTER); break;
    case 8: ag_rp_8(PCB_POINTER); break;
    case 9: ag_rp_9(PCB_POINTER); break;
    case 10: ag_rp_10(PCB_POINTER); break;
    case 11: ag_rp_11(PCB_POINTER); break;
    case 12: ag_rp_12(PCB_POINTER); break;
    case 13: ag_rp_13(PCB_POINTER); break;
    case 14: ag_rp_14(PCB_POINTER); break;
    case 15: V(0,ParserBasicToken) = ag_rp_15(PCB_POINTER); break;
    case 16: V(0,ParserBasicToken) = ag_rp_16(PCB_POINTER); break;
    case 17: V(0,ParserBasicToken) = ag_rp_17(PCB_POINTER); break;
    case 18: V(0,ParserBasicToken) = ag_rp_18(PCB_POINTER); break;
    case 19: V(0,ParserQuotedString) = ag_rp_19(PCB_POINTER); break;
    case 20: V(0,ParserMethod) = ag_rp_20(PCB_POINTER); break;
    case 21: V(0,ParserMethod) = ag_rp_21(PCB_POINTER); break;
    case 22: V(0,ParserMethod) = ag_rp_22(PCB_POINTER); break;
    case 23: V(0,ParserMethod) = ag_rp_23(PCB_POINTER); break;
    case 24: V(0,ParserMethod) = ag_rp_24(PCB_POINTER); break;
    case 25: V(0,ParserMethod) = ag_rp_25(PCB_POINTER); break;
    case 26: V(0,ParserMethod) = ag_rp_26(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 27: ag_rp_27(PCB_POINTER, V(0,ParserCSeq)); break;
    case 28: V(0,ParserCSeq) = ag_rp_28(PCB_POINTER, V(0,ParserSequenceNumber), V(2,ParserMethod)); break;
    case 29: V(0,ParserSequenceNumber) = ag_rp_29(PCB_POINTER); break;
    case 30: ag_rp_30(PCB_POINTER, V(0,ParserContentLength)); break;
    case 31: V(0,ParserContentLength) = ag_rp_31(PCB_POINTER); break;
    case 32: ag_rp_32(PCB_POINTER, V(0,ParserCallId)); break;
    case 33: V(0,ParserCallId) = ag_rp_33(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 34: V(0,ParserCallId) = ag_rp_34(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 35: ag_rp_35(PCB_POINTER); break;
    case 36: ag_rp_36(PCB_POINTER, V(0,ParserMediaType), V(2,ParserMediaSubType)); break;
    case 37: ag_rp_37(PCB_POINTER); break;
    case 38: ag_rp_38(PCB_POINTER, V(2,ParserBoundary)); break;
    case 39: ag_rp_39(PCB_POINTER, V(2,ParserBase)); break;
    case 40: ag_rp_40(PCB_POINTER, V(2,ParserBase)); break;
    case 41: ag_rp_41(PCB_POINTER); break;
    case 42: ag_rp_42(PCB_POINTER, V(3,ParserBoundary)); break;
    case 43: ag_rp_43(PCB_POINTER, V(3,ParserBase)); break;
    case 44: ag_rp_44(PCB_POINTER, V(3,ParserBase)); break;
    case 45: V(0,ParserMediaType) = ag_rp_45(PCB_POINTER); break;
    case 46: V(0,ParserMediaType) = ag_rp_46(PCB_POINTER); break;
    case 47: V(0,ParserMediaType) = ag_rp_47(PCB_POINTER); break;
    case 48: V(0,ParserMediaType) = ag_rp_48(PCB_POINTER); break;
    case 49: V(0,ParserMediaType) = ag_rp_49(PCB_POINTER); break;
    case 50: V(0,ParserMediaType) = ag_rp_50(PCB_POINTER); break;
    case 51: V(0,ParserMediaType) = ag_rp_51(PCB_POINTER); break;
    case 52: V(0,ParserMediaType) = ag_rp_52(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 53: V(0,ParserMediaSubType) = ag_rp_53(PCB_POINTER); break;
    case 54: V(0,ParserMediaSubType) = ag_rp_54(PCB_POINTER); break;
    case 55: V(0,ParserMediaSubType) = ag_rp_55(PCB_POINTER); break;
    case 56: V(0,ParserMediaSubType) = ag_rp_56(PCB_POINTER); break;
    case 57: V(0,ParserMediaSubType) = ag_rp_57(PCB_POINTER); break;
    case 58: V(0,ParserMediaSubType) = ag_rp_58(PCB_POINTER); break;
    case 59: V(0,ParserMediaSubType) = ag_rp_59(PCB_POINTER); break;
    case 60: V(0,ParserMediaSubType) = ag_rp_60(PCB_POINTER); break;
    case 61: V(0,ParserMediaSubType) = ag_rp_61(PCB_POINTER); break;
    case 62: V(0,ParserMediaSubType) = ag_rp_62(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 63: V(0,ParserBoundary) = ag_rp_63(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 64: V(0,ParserBoundary) = ag_rp_64(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 65: V(0,ParserBase) = ag_rp_65(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 66: V(0,ParserBase) = ag_rp_66(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 67: V(0,ParserBase) = ag_rp_67(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 68: V(0,ParserBase) = ag_rp_68(PCB_POINTER, V(4,ParserQuotedString)); break;
    case 69: ag_rp_69(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 70: V(0,ParserGenericParamDataVal) = ag_rp_70(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 71: V(0,ParserGenericParamDataVal) = ag_rp_71(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 72: ag_rp_72(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 73: ag_rp_73(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserGenericParamDataVal)); break;
    case 74: V(0,ParserGenericParamDataVal) = ag_rp_74(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 75: V(0,ParserGenericParamDataVal) = ag_rp_75(PCB_POINTER, V(2,ParserQuotedString)); break;
    case 76: ag_rp_76(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode), V(4,ParserReasonPhrase)); break;
    case 77: ag_rp_77(PCB_POINTER, V(0,ParserSipVersion), V(2,ParserStatusCode)); break;
    case 78: V(0,ParserSipVersion) = ag_rp_78(PCB_POINTER); break;
    case 79: V(0,ParserReasonPhrase) = ag_rp_79(PCB_POINTER); break;
    case 80: V(0,ParserStatusCode) = ag_rp_80(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 81: ag_rp_81(PCB_POINTER, V(0,ParserMethod)); break;
    case 82: ag_rp_82(PCB_POINTER, V(3,ParserMethod)); break;
    case 83: ag_rp_83(PCB_POINTER); break;
    case 84: ag_rp_84(PCB_POINTER); break;
    case 85: ag_rp_85(PCB_POINTER); break;
    case 86: ag_rp_86(PCB_POINTER); break;
    case 87: ag_rp_87(PCB_POINTER, V(3,ParserViaParam)); break;
    case 88: ag_rp_88(PCB_POINTER, V(0,ParserProtocolName), V(4,ParserProtocolVersion), V(8,ParserTransport)); break;
    case 89: V(0,ParserProtocolName) = ag_rp_89(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 90: V(0,ParserProtocolName) = ag_rp_90(PCB_POINTER); break;
    case 91: V(0,ParserProtocolVersion) = ag_rp_91(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 92: V(0,ParserTransport) = ag_rp_92(PCB_POINTER, V(0,ParserTransport)); break;
    case 93: V(0,ParserTransport) = ag_rp_93(PCB_POINTER); break;
    case 94: V(0,ParserTransport) = ag_rp_94(PCB_POINTER); break;
    case 95: V(0,ParserTransport) = ag_rp_95(PCB_POINTER); break;
    case 96: V(0,ParserTransport) = ag_rp_96(PCB_POINTER); break;
    case 97: V(0,ParserTransport) = ag_rp_97(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 98: V(0,ParserPort) = ag_rp_98(PCB_POINTER); break;
    case 99: ag_rp_99(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 100: ag_rp_100(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserPort)); break;
    case 101: V(0,ParserViaParam) = ag_rp_101(PCB_POINTER); break;
    case 102: V(0,ParserViaParam) = ag_rp_102(PCB_POINTER); break;
    case 103: V(0,ParserViaParam) = ag_rp_103(PCB_POINTER, V(0,ParserTTLParam)); break;
    case 104: V(0,ParserViaParam) = ag_rp_104(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 105: V(0,ParserViaParam) = ag_rp_105(PCB_POINTER, V(0,ParserReceived)); break;
    case 106: V(0,ParserViaParam) = ag_rp_106(PCB_POINTER, V(0,ParserBranch)); break;
    case 107: V(0,ParserViaParam) = ag_rp_107(PCB_POINTER, V(0,ParserPort)); break;
    case 108: V(0,ParserViaParam) = ag_rp_108(PCB_POINTER, V(0,ParserCompParam)); break;
    case 109: V(0,ParserViaParam) = ag_rp_109(PCB_POINTER); break;
    case 110: ag_rp_110(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 111: ag_rp_111(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 112: ag_rp_112(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserQuotedString)); break;
    case 113: ag_rp_113(PCB_POINTER, V(0,ParserBasicToken), V(4,ParserBasicToken)); break;
    case 114: V(0,ParserTTLParam) = ag_rp_114(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 115: V(0,ParserTtlParam) = ag_rp_115(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 116: V(0,ParserBasicToken) = ag_rp_116(PCB_POINTER); break;
    case 117: V(0,ParserBasicToken) = ag_rp_117(PCB_POINTER); break;
    case 118: V(0,ParserBasicToken) = ag_rp_118(PCB_POINTER); break;
    case 119: V(0,ParserPort) = ag_rp_119(PCB_POINTER, V(1,ParserPort)); break;
    case 120: V(0,ParserPort) = ag_rp_120(PCB_POINTER); break;
    case 121: V(0,ParserPort) = ag_rp_121(PCB_POINTER, V(2,ParserPort)); break;
    case 122: V(0,ParserMaddrParam) = ag_rp_122(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 123: V(0,ParserMaddrParam) = ag_rp_123(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 124: V(0,ParserReceived) = ag_rp_124(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 125: V(0,ParserBranch) = ag_rp_125(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 126: V(0,ParserCompParam) = ag_rp_126(PCB_POINTER, V(4,ParserCompParam)); break;
    case 127: V(0,ParserCompParam) = ag_rp_127(PCB_POINTER); break;
    case 128: V(0,ParserCompParam) = ag_rp_128(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 129: V(0,ParserBasicToken) = ag_rp_129(PCB_POINTER); break;
    case 130: V(0,ParserBasicToken) = ag_rp_130(PCB_POINTER); break;
    case 131: ag_default(PCB_POINTER, &ag_rtt[0]); ag_rp_131(PCB_POINTER); break;
    case 132: ag_default(PCB_POINTER, &ag_rtt[3]); ag_rp_132(PCB_POINTER); break;
    case 133: ag_default(PCB_POINTER, &ag_rtt[6]); ag_rp_133(PCB_POINTER); break;
    case 134: ag_rp_134(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 135: V(0,ParserAbsoluteUri) = ag_rp_135(PCB_POINTER, V(0,ParserBasicToken), V(3,ParserBasicToken)); break;
    case 136: V(0,ParserBasicToken) = ag_rp_136(PCB_POINTER); break;
    case 137: V(0,ParserDisplayName) = ag_rp_137(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 138: V(0,ParserBasicToken) = ag_rp_138(PCB_POINTER); break;
    case 139: V(0,ParserBasicToken) = ag_rp_139(PCB_POINTER); break;
    case 140: ag_rp_140(PCB_POINTER); break;
    case 141: ag_rp_141(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 142: ag_rp_142(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 143: ag_rp_143(PCB_POINTER); break;
    case 144: ag_rp_144(PCB_POINTER); break;
    case 145: V(0,ParserAbsoluteUri) = ag_rp_145(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 146: V(0,ParserAbsoluteUri) = ag_rp_146(PCB_POINTER); break;
    case 147: ag_rp_147(PCB_POINTER); break;
    case 148: ag_rp_148(PCB_POINTER); break;
    case 149: V(0,ParserAbsoluteUri) = ag_rp_149(PCB_POINTER, V(2,ParserAbsoluteUri)); break;
    case 150: V(0,ParserAbsoluteUri) = ag_rp_150(PCB_POINTER); break;
    case 151: ag_rp_151(PCB_POINTER); break;
    case 152: ag_rp_152(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 153: ag_rp_153(PCB_POINTER, V(2,ParserOptionalHeaders)); break;
    case 154: ag_rp_154(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 155: ag_rp_155(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 156: ag_rp_156(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 157: ag_rp_157(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 158: ag_rp_158(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 159: ag_rp_159(PCB_POINTER, V(3,ParserOptionalHeaders)); break;
    case 160: ag_rp_160(PCB_POINTER, V(0,ParserDisplayName), V(2,ParserBasicToken)); break;
    case 161: ag_rp_161(PCB_POINTER); break;
    case 162: ag_rp_162(PCB_POINTER); break;
    case 163: ag_rp_163(PCB_POINTER); break;
    case 164: ag_rp_164(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 165: ag_rp_165(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserBasicToken)); break;
    case 166: V(0,ParserBasicToken) = ag_rp_166(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 167: V(0,ParserBasicToken) = ag_rp_167(PCB_POINTER); break;
    case 168: V(0,ParserBasicToken) = ag_rp_168(PCB_POINTER); break;
    case 169: ag_rp_169(PCB_POINTER); break;
    case 170: ag_rp_170(PCB_POINTER); break;
    case 171: ag_rp_171(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 172: ag_rp_172(PCB_POINTER, V(0,ParserBasicToken), V(2,ParserPort)); break;
    case 173: V(0,ParserBasicToken) = ag_rp_173(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 174: V(0,ParserBasicToken) = ag_rp_174(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 175: V(0,ParserBasicToken) = ag_rp_175(PCB_POINTER); break;
    case 176: V(0,ParserBasicToken) = ag_rp_176(PCB_POINTER); break;
    case 177: V(0,ParserBasicToken) = ag_rp_177(PCB_POINTER); break;
    case 178: ag_rp_178(PCB_POINTER); break;
    case 179: ag_rp_179(PCB_POINTER); break;
    case 180: ag_rp_180(PCB_POINTER); break;
    case 181: ag_rp_181(PCB_POINTER); break;
    case 182: ag_rp_182(PCB_POINTER, V(0,ParserTransport)); break;
    case 183: ag_rp_183(PCB_POINTER, V(0,ParserUserParam)); break;
    case 184: ag_rp_184(PCB_POINTER, V(0,ParserTtlParam)); break;
    case 185: ag_rp_185(PCB_POINTER, V(0,ParserMaddrParam)); break;
    case 186: ag_rp_186(PCB_POINTER, V(0,ParserMethod)); break;
    case 187: ag_rp_187(PCB_POINTER, V(0,ParserLrParamType)); break;
    case 188: ag_rp_188(PCB_POINTER, V(0,ParserCompParam)); break;
    case 189: ag_rp_189(PCB_POINTER, V(0,ParserTokenizedByParam)); break;
    case 190: ag_rp_190(PCB_POINTER, V(0,RvBool)); break;
    case 191: ag_rp_191(PCB_POINTER); break;
    case 192: V(0,ParserTransport) = ag_rp_192(PCB_POINTER, V(4,ParserTransport)); break;
    case 193: V(0,ParserUserParam) = ag_rp_193(PCB_POINTER, V(4,RvSipUserParam)); break;
    case 194: V(0,ParserUserParam) = ag_rp_194(PCB_POINTER, V(4,ParserOtherUser)); break;
    case 195: V(0,RvSipUserParam) = ag_rp_195(PCB_POINTER); break;
    case 196: V(0,RvSipUserParam) = ag_rp_196(PCB_POINTER); break;
    case 197: V(0,ParserOtherUser) = ag_rp_197(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 198: V(0,ParserTtlParam) = ag_rp_198(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 199: V(0,ParserMaddrParam) = ag_rp_199(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 200: V(0,ParserMethod) = ag_rp_200(PCB_POINTER, V(4,ParserMethod)); break;
    case 201: V(0,ParserLrParamType) = ag_rp_201(PCB_POINTER); break;
    case 202: V(0,ParserLrParamType) = ag_rp_202(PCB_POINTER); break;
    case 203: V(0,ParserLrParamType) = ag_rp_203(PCB_POINTER); break;
    case 204: V(0,ParserLrParamType) = ag_rp_204(PCB_POINTER); break;
    case 205: V(0,ParserCompParam) = ag_rp_205(PCB_POINTER, V(4,ParserCompParam)); break;
    case 206: V(0,ParserTokenizedByParam) = ag_rp_206(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 207: V(0,RvBool) = ag_rp_207(PCB_POINTER); break;
    case 208: ag_rp_208(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 209: ag_rp_209(PCB_POINTER, V(0,ParserBasicToken), V(1,ParserBasicToken)); break;
    case 210: V(0,ParserBasicToken) = ag_rp_210(PCB_POINTER); break;
    case 211: V(0,ParserBasicToken) = ag_rp_211(PCB_POINTER, V(2,ParserBasicToken)); break;
    case 212: V(0,ParserOptionalHeaders) = ag_rp_212(PCB_POINTER); break;
    case 213: V(0,ParserOptionalHeaders) = ag_rp_213(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 214: V(0,ParserBasicToken) = ag_rp_214(PCB_POINTER); break;
    case 215: V(0,ParserBasicToken) = ag_rp_215(PCB_POINTER); break;
    case 216: V(0,ParserBasicToken) = ag_rp_216(PCB_POINTER); break;
    case 217: V(0,ParserBasicToken) = ag_rp_217(PCB_POINTER); break;
    case 218: V(0,ParserBasicToken) = ag_rp_218(PCB_POINTER); break;
    case 219: ag_rp_219(PCB_POINTER); break;
    case 220: ag_rp_220(PCB_POINTER, V(0,ParserMethod), V(4,ParserSipVersion)); break;
    case 221: V(0,ParserMethod) = ag_rp_221(PCB_POINTER); break;
    case 222: V(0,ParserMethod) = ag_rp_222(PCB_POINTER); break;
    case 223: V(0,ParserMethod) = ag_rp_223(PCB_POINTER); break;
    case 224: V(0,ParserMethod) = ag_rp_224(PCB_POINTER); break;
    case 225: V(0,ParserMethod) = ag_rp_225(PCB_POINTER); break;
    case 226: V(0,ParserMethod) = ag_rp_226(PCB_POINTER); break;
    case 227: V(0,ParserMethod) = ag_rp_227(PCB_POINTER); break;
    case 228: V(0,ParserMethod) = ag_rp_228(PCB_POINTER); break;
    case 229: V(0,ParserMethod) = ag_rp_229(PCB_POINTER); break;
    case 230: V(0,ParserMethod) = ag_rp_230(PCB_POINTER); break;
    case 231: V(0,ParserMethod) = ag_rp_231(PCB_POINTER); break;
    case 232: V(0,ParserMethod) = ag_rp_232(PCB_POINTER); break;
    case 233: V(0,ParserMethod) = ag_rp_233(PCB_POINTER); break;
    case 234: V(0,ParserMethod) = ag_rp_234(PCB_POINTER, V(0,ParserMethod)); break;
    case 235: ag_rp_235(PCB_POINTER); break;
    case 236: ag_rp_236(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 237: ag_rp_237(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 238: ag_rp_238(PCB_POINTER, V(0,ParserAbsoluteUri)); break;
    case 239: ag_rp_239(PCB_POINTER); break;
    case 240: ag_rp_240(PCB_POINTER); break;
    case 241: ag_rp_241(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 242: ag_rp_242(PCB_POINTER); break;
    case 243: ag_rp_243(PCB_POINTER, V(1,ParserPartyParams)); break;
    case 244: ag_rp_244(PCB_POINTER, V(0,ParserDisplayName)); break;
    case 245: ag_rp_245(PCB_POINTER); break;
    case 246: V(0,ParserDisplayName) = ag_rp_246(PCB_POINTER, V(0,ParserQuotedString)); break;
    case 247: V(0,ParserDisplayName) = ag_rp_247(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 248: V(0,ParserBasicToken) = ag_rp_248(PCB_POINTER); break;
    case 249: V(0,ParserBasicToken) = ag_rp_249(PCB_POINTER); break;
    case 250: V(0,ParserTagParam) = ag_rp_250(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 251: V(0,ParserPartyParams) = ag_rp_251(PCB_POINTER, V(2,ParserPartyParams)); break;
    case 252: V(0,ParserPartyParams) = ag_rp_252(PCB_POINTER, V(0,ParserPartyParams), V(3,ParserPartyParams)); break;
    case 253: V(0,ParserPartyParams) = ag_rp_253(PCB_POINTER, V(0,ParserTagParam)); break;
    case 254: V(0,ParserPartyParams) = ag_rp_254(PCB_POINTER); break;
    case 255: ag_rp_255(PCB_POINTER); break;
    case 256: ag_rp_256(PCB_POINTER); break;
    case 257: ag_rp_257(PCB_POINTER); break;
    case 258: ag_rp_258(PCB_POINTER); break;
    case 259: ag_rp_259(PCB_POINTER); break;
    case 260: ag_rp_260(PCB_POINTER); break;
    case 261: ag_rp_261(PCB_POINTER); break;
    case 262: ag_rp_262(PCB_POINTER, V(0,ParserQVal)); break;
    case 263: ag_rp_263(PCB_POINTER, V(0,ParserContactActionType)); break;
    case 264: ag_rp_264(PCB_POINTER); break;
    case 265: ag_rp_265(PCB_POINTER); break;
    case 266: V(0,ParserQVal) = ag_rp_266(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 267: V(0,ParserBasicToken) = ag_rp_267(PCB_POINTER); break;
    case 268: V(0,ParserBasicToken) = ag_rp_268(PCB_POINTER); break;
    case 269: V(0,ParserContactActionType) = ag_rp_269(PCB_POINTER, V(4,ParserContactActionType)); break;
    case 270: V(0,ParserContactActionType) = ag_rp_270(PCB_POINTER); break;
    case 271: V(0,ParserContactActionType) = ag_rp_271(PCB_POINTER); break;
    case 272: ag_rp_272(PCB_POINTER); break;
    case 273: ag_rp_273(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 274: ag_rp_274(PCB_POINTER, V(2,ParserSipDate)); break;
    case 275: ag_rp_275(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 276: ag_rp_276(PCB_POINTER, V(0,ParserSipDate)); break;
    case 277: V(0,ParserDeltaSeconds) = ag_rp_277(PCB_POINTER); break;
    case 278: ag_rp_278(PCB_POINTER, V(0,ParserSipDate)); break;
    case 279: V(0,ParserSipDate) = ag_rp_279(PCB_POINTER, V(0,ParserDDMMYY), V(2,ParserTime)); break;
    case 280: V(0,ParserSipDate) = ag_rp_280(PCB_POINTER, V(0,ParserSipDate)); break;
    case 281: V(0,ParserSipDate) = ag_rp_281(PCB_POINTER, V(0,RvSipDateWeekDay), V(4,ParserDDMMYY), V(6,ParserTime)); break;
    case 282: V(0,RvSipDateWeekDay) = ag_rp_282(PCB_POINTER); break;
    case 283: V(0,RvSipDateWeekDay) = ag_rp_283(PCB_POINTER); break;
    case 284: V(0,RvSipDateWeekDay) = ag_rp_284(PCB_POINTER); break;
    case 285: V(0,RvSipDateWeekDay) = ag_rp_285(PCB_POINTER); break;
    case 286: V(0,RvSipDateWeekDay) = ag_rp_286(PCB_POINTER); break;
    case 287: V(0,RvSipDateWeekDay) = ag_rp_287(PCB_POINTER); break;
    case 288: V(0,RvSipDateWeekDay) = ag_rp_288(PCB_POINTER); break;
    case 289: V(0,ParserDDMMYY) = ag_rp_289(PCB_POINTER, V(0,ParserInt32), V(2,RvSipDateMonth), V(4,ParserInt32)); break;
    case 290: V(0,ParserInt32) = ag_rp_290(PCB_POINTER, V(0,int)); break;
    case 291: V(0,ParserInt32) = ag_rp_291(PCB_POINTER, V(0,int), V(1,int)); break;
    case 292: V(0,RvSipDateMonth) = ag_rp_292(PCB_POINTER); break;
    case 293: V(0,RvSipDateMonth) = ag_rp_293(PCB_POINTER); break;
    case 294: V(0,RvSipDateMonth) = ag_rp_294(PCB_POINTER); break;
    case 295: V(0,RvSipDateMonth) = ag_rp_295(PCB_POINTER); break;
    case 296: V(0,RvSipDateMonth) = ag_rp_296(PCB_POINTER); break;
    case 297: V(0,RvSipDateMonth) = ag_rp_297(PCB_POINTER); break;
    case 298: V(0,RvSipDateMonth) = ag_rp_298(PCB_POINTER); break;
    case 299: V(0,RvSipDateMonth) = ag_rp_299(PCB_POINTER); break;
    case 300: V(0,RvSipDateMonth) = ag_rp_300(PCB_POINTER); break;
    case 301: V(0,RvSipDateMonth) = ag_rp_301(PCB_POINTER); break;
    case 302: V(0,RvSipDateMonth) = ag_rp_302(PCB_POINTER); break;
    case 303: V(0,RvSipDateMonth) = ag_rp_303(PCB_POINTER); break;
    case 304: V(0,ParserInt32) = ag_rp_304(PCB_POINTER, V(0,int), V(1,int)); break;
    case 305: V(0,ParserInt32) = ag_rp_305(PCB_POINTER, V(0,int), V(1,int), V(2,int)); break;
    case 306: V(0,ParserInt32) = ag_rp_306(PCB_POINTER, V(0,int), V(1,int), V(2,int), V(3,int)); break;
    case 307: V(0,ParserTime) = ag_rp_307(PCB_POINTER, V(0,ParserInt32), V(2,ParserInt32), V(4,ParserInt32), V(6,ParserTimeZone)); break;
    case 308: V(0,ParserInt32) = ag_rp_308(PCB_POINTER, V(0,int), V(1,int)); break;
    case 309: V(0,ParserInt32) = ag_rp_309(PCB_POINTER, V(0,int), V(1,int)); break;
    case 310: V(0,ParserInt32) = ag_rp_310(PCB_POINTER, V(0,int), V(1,int)); break;
    case 311: V(0,ParserTimeZone) = ag_rp_311(PCB_POINTER); break;
    case 312: V(0,ParserTimeZone) = ag_rp_312(PCB_POINTER); break;
    case 313: V(0,ParserTimeZone) = ag_rp_313(PCB_POINTER); break;
    case 314: ag_rp_314(PCB_POINTER, V(0,ParserMethod)); break;
    case 315: ag_rp_315(PCB_POINTER, V(0,ParserMethod), V(4,ParserBasicToken)); break;
    case 316: ag_rp_316(PCB_POINTER); break;
    case 317: ag_rp_317(PCB_POINTER); break;
    case 318: ag_rp_318(PCB_POINTER); break;
    case 319: ag_rp_319(PCB_POINTER); break;
    case 320: ag_rp_320(PCB_POINTER); break;
    case 321: ag_rp_321(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,ParserRetryParam)); break;
    case 322: ag_rp_322(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 323: ag_rp_323(PCB_POINTER, V(0,ParserSipDate), V(3,ParserRetryParam)); break;
    case 324: ag_rp_324(PCB_POINTER, V(0,ParserSipDate)); break;
    case 325: ag_rp_325(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 326: V(0,ParserRetryParam) = ag_rp_326(PCB_POINTER, V(2,ParserDeltaSeconds)); break;
    case 327: V(0,ParserRetryParam) = ag_rp_327(PCB_POINTER); break;
    case 328: V(0,ParserRetryParam) = ag_rp_328(PCB_POINTER, V(0,ParserRetryParam), V(3,ParserDeltaSeconds)); break;
    case 329: V(0,ParserRetryParam) = ag_rp_329(PCB_POINTER, V(0,ParserRetryParam)); break;
    case 330: V(0,ParserDeltaSeconds) = ag_rp_330(PCB_POINTER, V(4,ParserDeltaSeconds)); break;
    case 331: ag_rp_331(PCB_POINTER, V(0,ParserRSeq)); break;
    case 332: V(0,ParserRSeq) = ag_rp_332(PCB_POINTER, V(0,ParserResponseNum)); break;
    case 333: V(0,ParserResponseNum) = ag_rp_333(PCB_POINTER); break;
    case 334: ag_rp_334(PCB_POINTER); break;
    case 335: ag_rp_335(PCB_POINTER, V(0,ParserResponseNum), V(2,ParserSequenceNumber), V(4,ParserMethod)); break;
    case 336: V(0,ParserBasicToken) = ag_rp_336(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 337: ag_rp_337(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 338: ag_rp_338(PCB_POINTER, V(3,ParserBasicToken)); break;
    case 339: ag_rp_339(PCB_POINTER); break;
    case 340: ag_rp_340(PCB_POINTER); break;
    case 341: ag_rp_341(PCB_POINTER, V(0,ParserDisposition), V(2,ParserDispositionParams)); break;
    case 342: ag_rp_342(PCB_POINTER, V(0,ParserDisposition)); break;
    case 343: V(0,ParserDisposition) = ag_rp_343(PCB_POINTER); break;
    case 344: V(0,ParserDisposition) = ag_rp_344(PCB_POINTER); break;
    case 345: V(0,ParserDisposition) = ag_rp_345(PCB_POINTER); break;
    case 346: V(0,ParserDisposition) = ag_rp_346(PCB_POINTER); break;
    case 347: V(0,ParserDisposition) = ag_rp_347(PCB_POINTER); break;
    case 348: V(0,ParserDisposition) = ag_rp_348(PCB_POINTER, V(0,ParserBasicToken)); break;
    case 349: V(0,ParserDispositionParams) = ag_rp_349(PCB_POINTER, V(0,ParserDispositionParam)); break;
    case 350: V(0,ParserDispositionParams) = ag_rp_350(PCB_POINTER); break;
    case 351: V(0,ParserDispositionParams) = ag_rp_351(PCB_POINTER, V(0,ParserDispositionParams), V(1,ParserDispositionParam)); break;
    case 352: V(0,ParserDispositionParams) = ag_rp_352(PCB_POINTER, V(0,ParserDispositionParams)); break;
    case 353: V(0,ParserDispositionParam) = ag_rp_353(PCB_POINTER); break;
    case 354: V(0,ParserDispositionParam) = ag_rp_354(PCB_POINTER); break;
    case 355: V(0,ParserDispositionParam) = ag_rp_355(PCB_POINTER, V(6,ParserBasicToken)); break;
    case 356: ag_rp_356(PCB_POINTER, V(0,ParserSessionExpiresHeader)); break;
    case 357: V(0,ParserSessionExpiresHeader) = ag_rp_357(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 358: V(0,ParserSessionExpiresHeader) = ag_rp_358(PCB_POINTER, V(0,ParserDeltaSeconds), V(2,RvSipSessionExpiresRefresherType)); break;
    case 359: V(0,ParserSessionExpiresHeader) = ag_rp_359(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 360: V(0,ParserSessionExpiresHeader) = ag_rp_360(PCB_POINTER, V(0,ParserDeltaSeconds), V(3,RvSipSessionExpiresRefresherType)); break;
    case 361: V(0,RvSipSessionExpiresRefresherType) = ag_rp_361(PCB_POINTER, V(6,RvSipSessionExpiresRefresherType)); break;
    case 362: V(0,RvSipSessionExpiresRefresherType) = ag_rp_362(PCB_POINTER); break;
    case 363: V(0,RvSipSessionExpiresRefresherType) = ag_rp_363(PCB_POINTER); break;
    case 364: ag_rp_364(PCB_POINTER, V(0,ParserMinSEHeader)); break;
    case 365: V(0,ParserMinSEHeader) = ag_rp_365(PCB_POINTER, V(0,ParserDeltaSeconds)); break;
    case 366: ag_rp_366(PCB_POINTER, V(0,ParserCallId)); break;
    case 367: ag_rp_367(PCB_POINTER, V(0,ParserCallId)); break;
    case 368: ag_rp_368(PCB_POINTER); break;
    case 369: ag_rp_369(PCB_POINTER); break;
    case 370: ag_rp_370(PCB_POINTER, V(0,ParserTagParam)); break;
    case 371: ag_rp_371(PCB_POINTER, V(0,ParserTagParam)); break;
    case 372: ag_rp_372(PCB_POINTER, V(0,ParserReplacesEarlyFlagParamType)); break;
    case 373: ag_rp_373(PCB_POINTER); break;
    case 374: V(0,ParserTagParam) = ag_rp_374(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 375: V(0,ParserTagParam) = ag_rp_375(PCB_POINTER, V(4,ParserBasicToken)); break;
    case 376: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_376(PCB_POINTER); break;
    case 377: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_377(PCB_POINTER); break;
    case 378: V(0,ParserReplacesEarlyFlagParamType) = ag_rp_378(PCB_POINTER); break;
  }
  (PCB).la_ptr = (PCB).pointer;
}
static int ag_action_1_r_proc(PCB_DECL);
static int ag_action_2_r_proc(PCB_DECL);
static int ag_action_3_r_proc(PCB_DECL);
static int ag_action_4_r_proc(PCB_DECL);
static int ag_action_1_s_proc(PCB_DECL);
static int ag_action_3_s_proc(PCB_DECL);
static int ag_action_1_proc(PCB_DECL);
static int ag_action_2_proc(PCB_DECL);
static int ag_action_3_proc(PCB_DECL);
static int ag_action_4_proc(PCB_DECL);
static int ag_action_5_proc(PCB_DECL);
static int ag_action_6_proc(PCB_DECL);
static int ag_action_7_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int ag_action_9_proc(PCB_DECL);
static int ag_action_10_proc(PCB_DECL);
static int ag_action_11_proc(PCB_DECL);
static int ag_action_8_proc(PCB_DECL);
static int (*const  ag_r_procs_scan[])(PCB_DECL) = {
  ag_action_1_r_proc,
  ag_action_2_r_proc,
  ag_action_3_r_proc,
  ag_action_4_r_proc
};
static int (*const  ag_s_procs_scan[])(PCB_DECL) = {
  ag_action_1_s_proc,
  ag_action_2_r_proc,
  ag_action_3_s_proc,
  ag_action_4_r_proc
};
static int (*const  ag_gt_procs_scan[])(PCB_DECL) = {
  ag_action_1_proc,
  ag_action_2_proc,
  ag_action_3_proc,
  ag_action_4_proc,
  ag_action_5_proc,
  ag_action_6_proc,
  ag_action_7_proc,
  ag_action_8_proc,
  ag_action_9_proc,
  ag_action_10_proc,
  ag_action_11_proc,
  ag_action_8_proc
};
static int ag_action_10_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    ag_track(PCB_POINTER);
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  } while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_11_proc(PCB_DECL) {
  int ag_t = (PCB).token_number;
  do {
    (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
    (PCB).ssx--;
    ag_track(PCB_POINTER);
    ag_ra(PCB_POINTER);
    if ((PCB).exit_flag != AG_RUNNING_CODE) return 0;
    (PCB).ssx++;
    (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
    (PCB).la_ptr++;
    if (ag_key_index[(PCB).sn]) {
      unsigned ag_k = ag_key_index[(PCB).sn];
      int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
      while (ag_key_ch[ag_k] < ag_ch) ag_k++;
      if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
    }
  }
  while ((PCB).token_number == (SipParser_token_type) ag_t);
  (PCB).la_ptr =  (PCB).pointer;
  return 1;
}
static int ag_action_3_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_3_s_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  return (PCB).exit_flag == AG_RUNNING_CODE;;
}
static int ag_action_4_r_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  return 1;
}
static int ag_action_2_proc(PCB_DECL) {
  if ((PCB).ssx >= 28) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  ag_track(PCB_POINTER);
  return 0;
}
static int ag_action_9_proc(PCB_DECL) {
  if ((PCB).ssx >= 28) {
    (PCB).exit_flag = AG_STACK_ERROR_CODE;
    PARSER_STACK_OVERFLOW;
  }
  (PCB).vs[(PCB).ssx] = ag_null_value;
  (PCB).ss[(PCB).ssx] = (PCB).sn;
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  (PCB).la_ptr =  (PCB).pointer;
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_2_r_proc(PCB_DECL) {
  (PCB).ssx++;
  (PCB).sn = (PCB).ag_ap;
  return 0;
}
static int ag_action_7_proc(PCB_DECL) {
  --(PCB).ssx;
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_proc(PCB_DECL) {
  ag_track(PCB_POINTER);
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_r_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_1_s_proc(PCB_DECL) {
  (PCB).exit_flag = AG_SUCCESS_CODE;
  return 0;
}
static int ag_action_4_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_3_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap] - 1;
  (*(int *) &(PCB).vs[(PCB).ssx]) = *(PCB).pointer;
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else (PCB).ss[(PCB).ssx] = (PCB).sn;
  ag_track(PCB_POINTER);
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_s_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return 0;
}
static int ag_action_8_proc(PCB_DECL) {
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).exit_flag = AG_SYNTAX_ERROR_CODE;
  SYNTAX_ERROR;
  {(PCB).la_ptr = (PCB).pointer + 1; ag_track(PCB_POINTER);}
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_5_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  if (ag_sd) (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  else {
    if ((PCB).ssx >= 28) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  ag_ra(PCB_POINTER);
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
static int ag_action_6_proc(PCB_DECL) {
  int ag_sd = ag_fl[(PCB).ag_ap];
  (PCB).reduction_token = (SipParser_token_type) ag_ptt[(PCB).ag_ap];
  if (ag_sd) {
    (PCB).sn = (PCB).ss[(PCB).ssx -= ag_sd];
  }
  else {
    if ((PCB).ssx >= 28) {
      (PCB).exit_flag = AG_STACK_ERROR_CODE;
      PARSER_STACK_OVERFLOW;
    }
    (PCB).vs[(PCB).ssx] = ag_null_value;
    (PCB).ss[(PCB).ssx] = (PCB).sn;
  }
  (PCB).la_ptr =  (PCB).pointer;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbe[(PCB).sn] + 1;
    unsigned ag_t2 = ag_sbt[(PCB).sn+1] - 1;
    do {
      unsigned ag_tx = (ag_t1 + ag_t2)/2;
      if (ag_tstt[ag_tx] < (const unsigned short)(PCB).reduction_token) ag_t1 = ag_tx + 1;
      else ag_t2 = ag_tx;
    } while (ag_t1 < ag_t2);
    if (ag_tstt[ag_t1] != (PCB).reduction_token) {
      (PCB).exit_flag = AG_REDUCTION_ERROR_CODE; 
      REDUCTION_TOKEN_ERROR; break;}
      (PCB).ag_ap = ag_pstt[ag_t1];
    if ((ag_r_procs_scan[ag_astt[ag_t1]])(PCB_POINTER) == 0) break;
  }
  return (PCB).exit_flag == AG_RUNNING_CODE;
}
void init_SipParser(SipParser_pcb_type *PCB_POINTER) {
  (PCB).la_ptr = (PCB).pointer;
  (PCB).error_message = "Syntax Error";
  (PCB).ss[0] = (PCB).sn = (PCB).ssx = 0;
  (PCB).exit_flag = AG_RUNNING_CODE;
  (PCB).line = FIRST_LINE;
  (PCB).column = FIRST_COLUMN;
}
void SipParser(SipParser_pcb_type *PCB_POINTER) {
  init_SipParser(PCB_POINTER);
  (PCB).exit_flag = AG_RUNNING_CODE;
  while ((PCB).exit_flag == AG_RUNNING_CODE) {
    unsigned ag_t1 = ag_sbt[(PCB).sn];
    if (ag_tstt[ag_t1]) {
      unsigned ag_t2 = ag_sbe[(PCB).sn] - 1;
      (PCB).token_number = (SipParser_token_type) AG_TCV(INPUT_CODE(*(PCB).la_ptr));
      (PCB).la_ptr++;
      if (ag_key_index[(PCB).sn]) {
        unsigned ag_k = ag_key_index[(PCB).sn];
        int ag_ch = CONVERT_CASE(INPUT_CODE(*(PCB).pointer));
        while (ag_key_ch[ag_k] < ag_ch) ag_k++;
        if (ag_key_ch[ag_k] == ag_ch) ag_get_key_word((PCB_TYPE *)PCB_POINTER, ag_k);
      }
      do {
        unsigned ag_tx = (ag_t1 + ag_t2)/2;
        if (ag_tstt[ag_tx] > (const unsigned short)(PCB).token_number)
          ag_t1 = ag_tx + 1;
        else ag_t2 = ag_tx;
      } while (ag_t1 < ag_t2);
      if (ag_tstt[ag_t1] != (const unsigned short)(PCB).token_number)
        ag_t1 = ag_sbe[(PCB).sn];
    }
    (PCB).ag_ap = ag_pstt[ag_t1];
    (ag_gt_procs_scan[ag_astt[ag_t1]])((PCB_TYPE *)PCB_POINTER);
  }
}
#endif
